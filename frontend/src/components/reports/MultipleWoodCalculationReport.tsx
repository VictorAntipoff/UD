import { Document, Page, Text, View, StyleSheet, Image } from '@react-pdf/renderer';
import type { CalculationResult } from '../../types/calculations';
import logo from '../../assets/images/logo.png';
import { APP_NAME, APP_VERSION } from '../../constants/version';

const styles = StyleSheet.create({
  page: {
    padding: '30 40',
    fontFamily: 'Helvetica',
    fontSize: 9,
    color: '#2c3e50'
  },
  header: {
    marginBottom: 15,
    borderBottom: 1,
    borderColor: '#e2e8f0',
    paddingBottom: 12
  },
  logo: {
    width: 100,
    marginBottom: 8
  },
  title: {
    fontSize: 16,
    fontFamily: 'Helvetica-Bold',
    marginBottom: 4
  },
  subtitle: {
    fontSize: 9,
    color: '#64748b',
    marginBottom: 12
  },
  metadata: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    fontSize: 8,
    color: '#64748b'
  },
  calculationSection: {
    marginBottom: 15,
    backgroundColor: '#ffffff',
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#e2e8f0',
    overflow: 'hidden'
  },
  sectionTitle: {
    fontSize: 10,
    fontFamily: 'Helvetica-Bold',
    color: '#ffffff',
    padding: '8 12',
    backgroundColor: '#dc2626',
    borderBottomWidth: 2,
    borderBottomColor: '#9f1239'
  },
  contentWrapper: {
    padding: 10,
    backgroundColor: '#ffffff'
  },
  infoBoxRow: {
    flexDirection: 'row',
    gap: 8,
    marginBottom: 8
  },
  infoBoxHalf: {
    flex: 1,
    borderRadius: 4,
    borderWidth: 1,
    borderColor: '#e2e8f0',
    overflow: 'hidden'
  },
  infoBoxHeader: {
    backgroundColor: '#f1f5f9',
    padding: '4 8',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0'
  },
  infoBoxTitle: {
    fontSize: 8,
    color: '#64748b',
    fontFamily: 'Helvetica-Bold'
  },
  infoBoxContent: {
    padding: '6 8',
    backgroundColor: '#ffffff'
  },
  row: {
    flexDirection: 'row',
    marginBottom: 3,
    fontSize: 9,
    alignItems: 'center'
  },
  label: {
    width: '35%',
    color: '#64748b',
    fontFamily: 'Helvetica-Bold'
  },
  value: {
    width: '65%',
    color: '#2c3e50'
  },
  resultBox: {
    marginTop: 8,
    borderRadius: 4,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#e2e8f0'
  },
  bulkAccessRow: {
    backgroundColor: '#f8fafc',
    padding: '6 8',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0'
  },
  totalRow: {
    backgroundColor: '#334155',
    padding: '6 8'
  },
  totalLabel: {
    width: '35%',
    color: '#ffffff',
    fontFamily: 'Helvetica-Bold'
  },
  totalValue: {
    width: '65%',
    color: '#ffffff',
    fontFamily: 'Helvetica-Bold'
  },
  highlightValue: {
    color: '#dc2626',
    fontFamily: 'Helvetica-Bold'
  },
  pageNumber: {
    position: 'absolute',
    bottom: 30,
    right: 40,
    fontSize: 8,
    color: '#94a3b8'
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 40,
    right: 80,
    textAlign: 'center',
    color: '#94a3b8',
    fontSize: 8,
    paddingTop: 6,
    borderTopWidth: 1,
    borderTopColor: '#e2e8f0'
  },
  vixText: {
    color: '#dc2626'
  },
  remarkSection: {
    marginTop: 8,
    marginBottom: 8,
    backgroundColor: '#f8fafc',
    padding: '6 8',
    borderRadius: 4,
    borderWidth: 1,
    borderColor: '#e2e8f0'
  }
});

const formatNumber = (num: number): string => {
  return num.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
};

interface MultipleWoodCalculationReportProps {
  calculations: CalculationResult[];
  timestamp: string;
  user: {
    email: string;
    name?: string;
  };
}

export const MultipleWoodCalculationReport = ({ calculations, timestamp, user }: MultipleWoodCalculationReportProps) => {
  const formatDimension = (value: number, unit: string) => {
    return `${value.toLocaleString('en-US', { 
      minimumFractionDigits: 2,
      maximumFractionDigits: 2 
    })} ${unit}`;
  };

  return (
    <Document>
      {Array.from({ length: Math.ceil(calculations.length / 4) }).map((_, pageIndex) => (
        <Page key={pageIndex} size="A4" style={styles.page}>
          {pageIndex === 0 && (
            <View style={styles.header}>
              <Image src={logo} style={styles.logo} />
              <Text style={styles.title}>
                <Text>Combined Wood Calculation Report</Text>
              </Text>
              <Text style={styles.subtitle}>
                <Text>Professional Wood Solutions</Text>
              </Text>
              <View style={styles.metadata}>
                <View>
                  <Text>
                    <Text>Generated by: </Text>
                    <Text>{user.name || user.email}</Text>
                  </Text>
                </View>
                <View>
                  <Text>
                    <Text>{new Date(timestamp).toLocaleString()}</Text>
                  </Text>
                </View>
              </View>
            </View>
          )}

          {calculations
            .slice(pageIndex * 4, (pageIndex + 1) * 4)
            .map((calculation, index) => (
              <View key={index} style={styles.calculationSection}>
                <Text style={styles.sectionTitle}>
                  <Text>Calculation {pageIndex * 4 + index + 1}: {calculation.woodType.name}</Text>
                </Text>
                
                <View style={styles.contentWrapper}>
                  <View style={styles.infoBoxRow}>
                    <View style={styles.infoBoxHalf}>
                      <View style={styles.infoBoxHeader}>
                        <Text style={styles.infoBoxTitle}>
                          <Text>WOOD SPECIFICATIONS</Text>
                        </Text>
                      </View>
                      <View style={styles.infoBoxContent}>
                        <View style={styles.row}>
                          <Text style={styles.label}>
                            <Text>Type:</Text>
                          </Text>
                          <Text style={styles.value}>
                            <Text>{calculation.woodType.name} ({calculation.woodType.grade})</Text>
                          </Text>
                        </View>
                        <View style={styles.row}>
                          <Text style={styles.label}>
                            <Text>Size:</Text>
                          </Text>
                          <Text style={styles.value}>
                            <Text>
                              {formatDimension(calculation.dimensions.thickness, '"')}×
                              {formatDimension(calculation.dimensions.width, '"')}×
                              {formatDimension(calculation.dimensions.length, '\'')}
                            </Text>
                          </Text>
                        </View>
                      </View>
                    </View>

                    <View style={styles.infoBoxHalf}>
                      <View style={styles.infoBoxHeader}>
                        <Text style={styles.infoBoxTitle}>
                          <Text>VOLUME & PRICING</Text>
                        </Text>
                      </View>
                      <View style={styles.infoBoxContent}>
                        <View style={styles.row}>
                          <Text style={styles.label}>
                            <Text>Volume:</Text>
                          </Text>
                          <Text style={styles.value}>
                            <Text>{calculation.volumeM3.toFixed(4)} m³</Text>
                          </Text>
                        </View>
                        <View style={styles.row}>
                          <Text style={styles.label}>
                            <Text>Price/m³:</Text>
                          </Text>
                          <Text style={styles.value}>
                            <Text>TZS {formatNumber(calculation.pricePerM3)}</Text>
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>

                  <View style={styles.resultBox}>
                    <View style={styles.bulkAccessRow}>
                      <View style={styles.row}>
                        <Text style={styles.label}>
                          <Text>Bulk Access:</Text>
                        </Text>
                        <Text style={styles.value}>
                          <Text style={styles.highlightValue}>
                            {(calculation.volumeM3 * calculation.planksPerM3).toFixed(0)} planks
                          </Text>
                        </Text>
                      </View>
                    </View>
                    <View style={styles.totalRow}>
                      <View style={styles.row}>
                        <Text style={styles.totalLabel}>
                          <Text>Total Value:</Text>
                        </Text>
                        <Text style={styles.totalValue}>
                          <Text>TZS {formatNumber(calculation.pricePerM3 * calculation.volumeM3)}</Text>
                        </Text>
                      </View>
                    </View>
                  </View>

                  {calculation.notes && calculation.notes.trim() !== '' && (
                    <View style={styles.remarkSection}>
                      <Text style={styles.label}>
                        <Text>Remarks:</Text>
                      </Text>
                      <Text style={styles.value}>
                        <Text>{calculation.notes}</Text>
                      </Text>
                    </View>
                  )}
                </View>
              </View>
            ))}

          <View style={styles.footer}>
            <Text>
              <Text>{APP_NAME} {APP_VERSION} • </Text>
              <Text>Developed by </Text>
              <Text style={styles.vixText}>Vix</Text>
            </Text>
          </View>

          <Text style={styles.pageNumber}>
            <Text>Page {pageIndex + 1} of {Math.ceil(calculations.length / 4)}</Text>
          </Text>
        </Page>
      ))}
    </Document>
  );
}; 