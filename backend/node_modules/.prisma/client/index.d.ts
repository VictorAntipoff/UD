
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Factory
 * 
 */
export type Factory = $Result.DefaultSelection<Prisma.$FactoryPayload>
/**
 * Model Design
 * 
 */
export type Design = $Result.DefaultSelection<Prisma.$DesignPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model Setting
 * 
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>
/**
 * Model ElectricityRecharge
 * 
 */
export type ElectricityRecharge = $Result.DefaultSelection<Prisma.$ElectricityRechargePayload>
/**
 * Model WoodType
 * 
 */
export type WoodType = $Result.DefaultSelection<Prisma.$WoodTypePayload>
/**
 * Model WoodCalculation
 * 
 */
export type WoodCalculation = $Result.DefaultSelection<Prisma.$WoodCalculationPayload>
/**
 * Model WoodReceipt
 * 
 */
export type WoodReceipt = $Result.DefaultSelection<Prisma.$WoodReceiptPayload>
/**
 * Model Operation
 * 
 */
export type Operation = $Result.DefaultSelection<Prisma.$OperationPayload>
/**
 * Model DryingProcess
 * 
 */
export type DryingProcess = $Result.DefaultSelection<Prisma.$DryingProcessPayload>
/**
 * Model DryingReading
 * 
 */
export type DryingReading = $Result.DefaultSelection<Prisma.$DryingReadingPayload>
/**
 * Model ReceiptDraft
 * 
 */
export type ReceiptDraft = $Result.DefaultSelection<Prisma.$ReceiptDraftPayload>
/**
 * Model ReceiptHistory
 * 
 */
export type ReceiptHistory = $Result.DefaultSelection<Prisma.$ReceiptHistoryPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.factory`: Exposes CRUD operations for the **Factory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Factories
    * const factories = await prisma.factory.findMany()
    * ```
    */
  get factory(): Prisma.FactoryDelegate<ExtArgs>;

  /**
   * `prisma.design`: Exposes CRUD operations for the **Design** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Designs
    * const designs = await prisma.design.findMany()
    * ```
    */
  get design(): Prisma.DesignDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs>;

  /**
   * `prisma.electricityRecharge`: Exposes CRUD operations for the **ElectricityRecharge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ElectricityRecharges
    * const electricityRecharges = await prisma.electricityRecharge.findMany()
    * ```
    */
  get electricityRecharge(): Prisma.ElectricityRechargeDelegate<ExtArgs>;

  /**
   * `prisma.woodType`: Exposes CRUD operations for the **WoodType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WoodTypes
    * const woodTypes = await prisma.woodType.findMany()
    * ```
    */
  get woodType(): Prisma.WoodTypeDelegate<ExtArgs>;

  /**
   * `prisma.woodCalculation`: Exposes CRUD operations for the **WoodCalculation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WoodCalculations
    * const woodCalculations = await prisma.woodCalculation.findMany()
    * ```
    */
  get woodCalculation(): Prisma.WoodCalculationDelegate<ExtArgs>;

  /**
   * `prisma.woodReceipt`: Exposes CRUD operations for the **WoodReceipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WoodReceipts
    * const woodReceipts = await prisma.woodReceipt.findMany()
    * ```
    */
  get woodReceipt(): Prisma.WoodReceiptDelegate<ExtArgs>;

  /**
   * `prisma.operation`: Exposes CRUD operations for the **Operation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Operations
    * const operations = await prisma.operation.findMany()
    * ```
    */
  get operation(): Prisma.OperationDelegate<ExtArgs>;

  /**
   * `prisma.dryingProcess`: Exposes CRUD operations for the **DryingProcess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DryingProcesses
    * const dryingProcesses = await prisma.dryingProcess.findMany()
    * ```
    */
  get dryingProcess(): Prisma.DryingProcessDelegate<ExtArgs>;

  /**
   * `prisma.dryingReading`: Exposes CRUD operations for the **DryingReading** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DryingReadings
    * const dryingReadings = await prisma.dryingReading.findMany()
    * ```
    */
  get dryingReading(): Prisma.DryingReadingDelegate<ExtArgs>;

  /**
   * `prisma.receiptDraft`: Exposes CRUD operations for the **ReceiptDraft** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptDrafts
    * const receiptDrafts = await prisma.receiptDraft.findMany()
    * ```
    */
  get receiptDraft(): Prisma.ReceiptDraftDelegate<ExtArgs>;

  /**
   * `prisma.receiptHistory`: Exposes CRUD operations for the **ReceiptHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptHistories
    * const receiptHistories = await prisma.receiptHistory.findMany()
    * ```
    */
  get receiptHistory(): Prisma.ReceiptHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Project: 'Project',
    Factory: 'Factory',
    Design: 'Design',
    Comment: 'Comment',
    Job: 'Job',
    Setting: 'Setting',
    ElectricityRecharge: 'ElectricityRecharge',
    WoodType: 'WoodType',
    WoodCalculation: 'WoodCalculation',
    WoodReceipt: 'WoodReceipt',
    Operation: 'Operation',
    DryingProcess: 'DryingProcess',
    DryingReading: 'DryingReading',
    ReceiptDraft: 'ReceiptDraft',
    ReceiptHistory: 'ReceiptHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "project" | "factory" | "design" | "comment" | "job" | "setting" | "electricityRecharge" | "woodType" | "woodCalculation" | "woodReceipt" | "operation" | "dryingProcess" | "dryingReading" | "receiptDraft" | "receiptHistory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Factory: {
        payload: Prisma.$FactoryPayload<ExtArgs>
        fields: Prisma.FactoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FactoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FactoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload>
          }
          findFirst: {
            args: Prisma.FactoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FactoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload>
          }
          findMany: {
            args: Prisma.FactoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload>[]
          }
          create: {
            args: Prisma.FactoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload>
          }
          createMany: {
            args: Prisma.FactoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FactoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload>[]
          }
          delete: {
            args: Prisma.FactoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload>
          }
          update: {
            args: Prisma.FactoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload>
          }
          deleteMany: {
            args: Prisma.FactoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FactoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FactoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactoryPayload>
          }
          aggregate: {
            args: Prisma.FactoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFactory>
          }
          groupBy: {
            args: Prisma.FactoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<FactoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.FactoryCountArgs<ExtArgs>
            result: $Utils.Optional<FactoryCountAggregateOutputType> | number
          }
        }
      }
      Design: {
        payload: Prisma.$DesignPayload<ExtArgs>
        fields: Prisma.DesignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DesignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DesignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload>
          }
          findFirst: {
            args: Prisma.DesignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DesignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload>
          }
          findMany: {
            args: Prisma.DesignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload>[]
          }
          create: {
            args: Prisma.DesignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload>
          }
          createMany: {
            args: Prisma.DesignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DesignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload>[]
          }
          delete: {
            args: Prisma.DesignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload>
          }
          update: {
            args: Prisma.DesignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload>
          }
          deleteMany: {
            args: Prisma.DesignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DesignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DesignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignPayload>
          }
          aggregate: {
            args: Prisma.DesignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDesign>
          }
          groupBy: {
            args: Prisma.DesignGroupByArgs<ExtArgs>
            result: $Utils.Optional<DesignGroupByOutputType>[]
          }
          count: {
            args: Prisma.DesignCountArgs<ExtArgs>
            result: $Utils.Optional<DesignCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
      ElectricityRecharge: {
        payload: Prisma.$ElectricityRechargePayload<ExtArgs>
        fields: Prisma.ElectricityRechargeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ElectricityRechargeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ElectricityRechargeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload>
          }
          findFirst: {
            args: Prisma.ElectricityRechargeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ElectricityRechargeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload>
          }
          findMany: {
            args: Prisma.ElectricityRechargeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload>[]
          }
          create: {
            args: Prisma.ElectricityRechargeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload>
          }
          createMany: {
            args: Prisma.ElectricityRechargeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ElectricityRechargeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload>[]
          }
          delete: {
            args: Prisma.ElectricityRechargeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload>
          }
          update: {
            args: Prisma.ElectricityRechargeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload>
          }
          deleteMany: {
            args: Prisma.ElectricityRechargeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ElectricityRechargeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ElectricityRechargeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectricityRechargePayload>
          }
          aggregate: {
            args: Prisma.ElectricityRechargeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateElectricityRecharge>
          }
          groupBy: {
            args: Prisma.ElectricityRechargeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ElectricityRechargeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ElectricityRechargeCountArgs<ExtArgs>
            result: $Utils.Optional<ElectricityRechargeCountAggregateOutputType> | number
          }
        }
      }
      WoodType: {
        payload: Prisma.$WoodTypePayload<ExtArgs>
        fields: Prisma.WoodTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WoodTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WoodTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload>
          }
          findFirst: {
            args: Prisma.WoodTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WoodTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload>
          }
          findMany: {
            args: Prisma.WoodTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload>[]
          }
          create: {
            args: Prisma.WoodTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload>
          }
          createMany: {
            args: Prisma.WoodTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WoodTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload>[]
          }
          delete: {
            args: Prisma.WoodTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload>
          }
          update: {
            args: Prisma.WoodTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload>
          }
          deleteMany: {
            args: Prisma.WoodTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WoodTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WoodTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodTypePayload>
          }
          aggregate: {
            args: Prisma.WoodTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWoodType>
          }
          groupBy: {
            args: Prisma.WoodTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<WoodTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.WoodTypeCountArgs<ExtArgs>
            result: $Utils.Optional<WoodTypeCountAggregateOutputType> | number
          }
        }
      }
      WoodCalculation: {
        payload: Prisma.$WoodCalculationPayload<ExtArgs>
        fields: Prisma.WoodCalculationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WoodCalculationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WoodCalculationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload>
          }
          findFirst: {
            args: Prisma.WoodCalculationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WoodCalculationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload>
          }
          findMany: {
            args: Prisma.WoodCalculationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload>[]
          }
          create: {
            args: Prisma.WoodCalculationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload>
          }
          createMany: {
            args: Prisma.WoodCalculationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WoodCalculationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload>[]
          }
          delete: {
            args: Prisma.WoodCalculationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload>
          }
          update: {
            args: Prisma.WoodCalculationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload>
          }
          deleteMany: {
            args: Prisma.WoodCalculationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WoodCalculationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WoodCalculationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodCalculationPayload>
          }
          aggregate: {
            args: Prisma.WoodCalculationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWoodCalculation>
          }
          groupBy: {
            args: Prisma.WoodCalculationGroupByArgs<ExtArgs>
            result: $Utils.Optional<WoodCalculationGroupByOutputType>[]
          }
          count: {
            args: Prisma.WoodCalculationCountArgs<ExtArgs>
            result: $Utils.Optional<WoodCalculationCountAggregateOutputType> | number
          }
        }
      }
      WoodReceipt: {
        payload: Prisma.$WoodReceiptPayload<ExtArgs>
        fields: Prisma.WoodReceiptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WoodReceiptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WoodReceiptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload>
          }
          findFirst: {
            args: Prisma.WoodReceiptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WoodReceiptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload>
          }
          findMany: {
            args: Prisma.WoodReceiptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload>[]
          }
          create: {
            args: Prisma.WoodReceiptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload>
          }
          createMany: {
            args: Prisma.WoodReceiptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WoodReceiptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload>[]
          }
          delete: {
            args: Prisma.WoodReceiptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload>
          }
          update: {
            args: Prisma.WoodReceiptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload>
          }
          deleteMany: {
            args: Prisma.WoodReceiptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WoodReceiptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WoodReceiptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WoodReceiptPayload>
          }
          aggregate: {
            args: Prisma.WoodReceiptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWoodReceipt>
          }
          groupBy: {
            args: Prisma.WoodReceiptGroupByArgs<ExtArgs>
            result: $Utils.Optional<WoodReceiptGroupByOutputType>[]
          }
          count: {
            args: Prisma.WoodReceiptCountArgs<ExtArgs>
            result: $Utils.Optional<WoodReceiptCountAggregateOutputType> | number
          }
        }
      }
      Operation: {
        payload: Prisma.$OperationPayload<ExtArgs>
        fields: Prisma.OperationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          findFirst: {
            args: Prisma.OperationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          findMany: {
            args: Prisma.OperationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>[]
          }
          create: {
            args: Prisma.OperationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          createMany: {
            args: Prisma.OperationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>[]
          }
          delete: {
            args: Prisma.OperationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          update: {
            args: Prisma.OperationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          deleteMany: {
            args: Prisma.OperationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OperationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          aggregate: {
            args: Prisma.OperationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperation>
          }
          groupBy: {
            args: Prisma.OperationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperationCountArgs<ExtArgs>
            result: $Utils.Optional<OperationCountAggregateOutputType> | number
          }
        }
      }
      DryingProcess: {
        payload: Prisma.$DryingProcessPayload<ExtArgs>
        fields: Prisma.DryingProcessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DryingProcessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DryingProcessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload>
          }
          findFirst: {
            args: Prisma.DryingProcessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DryingProcessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload>
          }
          findMany: {
            args: Prisma.DryingProcessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload>[]
          }
          create: {
            args: Prisma.DryingProcessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload>
          }
          createMany: {
            args: Prisma.DryingProcessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DryingProcessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload>[]
          }
          delete: {
            args: Prisma.DryingProcessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload>
          }
          update: {
            args: Prisma.DryingProcessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload>
          }
          deleteMany: {
            args: Prisma.DryingProcessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DryingProcessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DryingProcessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingProcessPayload>
          }
          aggregate: {
            args: Prisma.DryingProcessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDryingProcess>
          }
          groupBy: {
            args: Prisma.DryingProcessGroupByArgs<ExtArgs>
            result: $Utils.Optional<DryingProcessGroupByOutputType>[]
          }
          count: {
            args: Prisma.DryingProcessCountArgs<ExtArgs>
            result: $Utils.Optional<DryingProcessCountAggregateOutputType> | number
          }
        }
      }
      DryingReading: {
        payload: Prisma.$DryingReadingPayload<ExtArgs>
        fields: Prisma.DryingReadingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DryingReadingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DryingReadingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload>
          }
          findFirst: {
            args: Prisma.DryingReadingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DryingReadingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload>
          }
          findMany: {
            args: Prisma.DryingReadingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload>[]
          }
          create: {
            args: Prisma.DryingReadingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload>
          }
          createMany: {
            args: Prisma.DryingReadingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DryingReadingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload>[]
          }
          delete: {
            args: Prisma.DryingReadingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload>
          }
          update: {
            args: Prisma.DryingReadingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload>
          }
          deleteMany: {
            args: Prisma.DryingReadingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DryingReadingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DryingReadingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DryingReadingPayload>
          }
          aggregate: {
            args: Prisma.DryingReadingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDryingReading>
          }
          groupBy: {
            args: Prisma.DryingReadingGroupByArgs<ExtArgs>
            result: $Utils.Optional<DryingReadingGroupByOutputType>[]
          }
          count: {
            args: Prisma.DryingReadingCountArgs<ExtArgs>
            result: $Utils.Optional<DryingReadingCountAggregateOutputType> | number
          }
        }
      }
      ReceiptDraft: {
        payload: Prisma.$ReceiptDraftPayload<ExtArgs>
        fields: Prisma.ReceiptDraftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptDraftFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptDraftFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload>
          }
          findFirst: {
            args: Prisma.ReceiptDraftFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptDraftFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload>
          }
          findMany: {
            args: Prisma.ReceiptDraftFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload>[]
          }
          create: {
            args: Prisma.ReceiptDraftCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload>
          }
          createMany: {
            args: Prisma.ReceiptDraftCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptDraftCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload>[]
          }
          delete: {
            args: Prisma.ReceiptDraftDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload>
          }
          update: {
            args: Prisma.ReceiptDraftUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptDraftDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptDraftUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReceiptDraftUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptDraftPayload>
          }
          aggregate: {
            args: Prisma.ReceiptDraftAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptDraft>
          }
          groupBy: {
            args: Prisma.ReceiptDraftGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptDraftGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptDraftCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptDraftCountAggregateOutputType> | number
          }
        }
      }
      ReceiptHistory: {
        payload: Prisma.$ReceiptHistoryPayload<ExtArgs>
        fields: Prisma.ReceiptHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload>
          }
          findFirst: {
            args: Prisma.ReceiptHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload>
          }
          findMany: {
            args: Prisma.ReceiptHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload>[]
          }
          create: {
            args: Prisma.ReceiptHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload>
          }
          createMany: {
            args: Prisma.ReceiptHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload>[]
          }
          delete: {
            args: Prisma.ReceiptHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload>
          }
          update: {
            args: Prisma.ReceiptHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReceiptHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptHistoryPayload>
          }
          aggregate: {
            args: Prisma.ReceiptHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptHistory>
          }
          groupBy: {
            args: Prisma.ReceiptHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    projects: number
    factories: number
    designs: number
    comments: number
    calculations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    factories?: boolean | UserCountOutputTypeCountFactoriesArgs
    designs?: boolean | UserCountOutputTypeCountDesignsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    calculations?: boolean | UserCountOutputTypeCountCalculationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFactoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FactoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDesignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DesignWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WoodCalculationWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    designs: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    designs?: boolean | ProjectCountOutputTypeCountDesignsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDesignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DesignWhereInput
  }


  /**
   * Count Type DesignCountOutputType
   */

  export type DesignCountOutputType = {
    comments: number
  }

  export type DesignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | DesignCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * DesignCountOutputType without action
   */
  export type DesignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignCountOutputType
     */
    select?: DesignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DesignCountOutputType without action
   */
  export type DesignCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type WoodTypeCountOutputType
   */

  export type WoodTypeCountOutputType = {
    calculations: number
    receipts: number
    operations: number
    dryingProcesses: number
  }

  export type WoodTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    calculations?: boolean | WoodTypeCountOutputTypeCountCalculationsArgs
    receipts?: boolean | WoodTypeCountOutputTypeCountReceiptsArgs
    operations?: boolean | WoodTypeCountOutputTypeCountOperationsArgs
    dryingProcesses?: boolean | WoodTypeCountOutputTypeCountDryingProcessesArgs
  }

  // Custom InputTypes
  /**
   * WoodTypeCountOutputType without action
   */
  export type WoodTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodTypeCountOutputType
     */
    select?: WoodTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WoodTypeCountOutputType without action
   */
  export type WoodTypeCountOutputTypeCountCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WoodCalculationWhereInput
  }

  /**
   * WoodTypeCountOutputType without action
   */
  export type WoodTypeCountOutputTypeCountReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WoodReceiptWhereInput
  }

  /**
   * WoodTypeCountOutputType without action
   */
  export type WoodTypeCountOutputTypeCountOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationWhereInput
  }

  /**
   * WoodTypeCountOutputType without action
   */
  export type WoodTypeCountOutputTypeCountDryingProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DryingProcessWhereInput
  }


  /**
   * Count Type DryingProcessCountOutputType
   */

  export type DryingProcessCountOutputType = {
    readings: number
  }

  export type DryingProcessCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readings?: boolean | DryingProcessCountOutputTypeCountReadingsArgs
  }

  // Custom InputTypes
  /**
   * DryingProcessCountOutputType without action
   */
  export type DryingProcessCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcessCountOutputType
     */
    select?: DryingProcessCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DryingProcessCountOutputType without action
   */
  export type DryingProcessCountOutputTypeCountReadingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DryingReadingWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string | null
    lastName: string | null
    role: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projects?: boolean | User$projectsArgs<ExtArgs>
    factories?: boolean | User$factoriesArgs<ExtArgs>
    designs?: boolean | User$designsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    calculations?: boolean | User$calculationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | User$projectsArgs<ExtArgs>
    factories?: boolean | User$factoriesArgs<ExtArgs>
    designs?: boolean | User$designsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    calculations?: boolean | User$calculationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      factories: Prisma.$FactoryPayload<ExtArgs>[]
      designs: Prisma.$DesignPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      calculations: Prisma.$WoodCalculationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string | null
      lastName: string | null
      role: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    factories<T extends User$factoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$factoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findMany"> | Null>
    designs<T extends User$designsArgs<ExtArgs> = {}>(args?: Subset<T, User$designsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    calculations<T extends User$calculationsArgs<ExtArgs> = {}>(args?: Subset<T, User$calculationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.factories
   */
  export type User$factoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    where?: FactoryWhereInput
    orderBy?: FactoryOrderByWithRelationInput | FactoryOrderByWithRelationInput[]
    cursor?: FactoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FactoryScalarFieldEnum | FactoryScalarFieldEnum[]
  }

  /**
   * User.designs
   */
  export type User$designsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    where?: DesignWhereInput
    orderBy?: DesignOrderByWithRelationInput | DesignOrderByWithRelationInput[]
    cursor?: DesignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DesignScalarFieldEnum | DesignScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.calculations
   */
  export type User$calculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    where?: WoodCalculationWhereInput
    orderBy?: WoodCalculationOrderByWithRelationInput | WoodCalculationOrderByWithRelationInput[]
    cursor?: WoodCalculationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WoodCalculationScalarFieldEnum | WoodCalculationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    ownerId: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    ownerId: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    ownerId: number
    isPublic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ownerId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ownerId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ownerId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    ownerId: string
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    designs?: boolean | Project$designsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    designs?: boolean | Project$designsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      designs: Prisma.$DesignPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      ownerId: string
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    designs<T extends Project$designsArgs<ExtArgs> = {}>(args?: Subset<T, Project$designsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly ownerId: FieldRef<"Project", 'String'>
    readonly isPublic: FieldRef<"Project", 'Boolean'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.designs
   */
  export type Project$designsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    where?: DesignWhereInput
    orderBy?: DesignOrderByWithRelationInput | DesignOrderByWithRelationInput[]
    cursor?: DesignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DesignScalarFieldEnum | DesignScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Factory
   */

  export type AggregateFactory = {
    _count: FactoryCountAggregateOutputType | null
    _min: FactoryMinAggregateOutputType | null
    _max: FactoryMaxAggregateOutputType | null
  }

  export type FactoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FactoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FactoryCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FactoryMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FactoryMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FactoryCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FactoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Factory to aggregate.
     */
    where?: FactoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factories to fetch.
     */
    orderBy?: FactoryOrderByWithRelationInput | FactoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FactoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Factories
    **/
    _count?: true | FactoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FactoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FactoryMaxAggregateInputType
  }

  export type GetFactoryAggregateType<T extends FactoryAggregateArgs> = {
        [P in keyof T & keyof AggregateFactory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFactory[P]>
      : GetScalarType<T[P], AggregateFactory[P]>
  }




  export type FactoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FactoryWhereInput
    orderBy?: FactoryOrderByWithAggregationInput | FactoryOrderByWithAggregationInput[]
    by: FactoryScalarFieldEnum[] | FactoryScalarFieldEnum
    having?: FactoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FactoryCountAggregateInputType | true
    _min?: FactoryMinAggregateInputType
    _max?: FactoryMaxAggregateInputType
  }

  export type FactoryGroupByOutputType = {
    id: string
    name: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: FactoryCountAggregateOutputType | null
    _min: FactoryMinAggregateOutputType | null
    _max: FactoryMaxAggregateOutputType | null
  }

  type GetFactoryGroupByPayload<T extends FactoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FactoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FactoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FactoryGroupByOutputType[P]>
            : GetScalarType<T[P], FactoryGroupByOutputType[P]>
        }
      >
    >


  export type FactorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factory"]>

  export type FactorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factory"]>

  export type FactorySelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FactoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FactoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FactoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Factory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["factory"]>
    composites: {}
  }

  type FactoryGetPayload<S extends boolean | null | undefined | FactoryDefaultArgs> = $Result.GetResult<Prisma.$FactoryPayload, S>

  type FactoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FactoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FactoryCountAggregateInputType | true
    }

  export interface FactoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Factory'], meta: { name: 'Factory' } }
    /**
     * Find zero or one Factory that matches the filter.
     * @param {FactoryFindUniqueArgs} args - Arguments to find a Factory
     * @example
     * // Get one Factory
     * const factory = await prisma.factory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FactoryFindUniqueArgs>(args: SelectSubset<T, FactoryFindUniqueArgs<ExtArgs>>): Prisma__FactoryClient<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Factory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FactoryFindUniqueOrThrowArgs} args - Arguments to find a Factory
     * @example
     * // Get one Factory
     * const factory = await prisma.factory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FactoryFindUniqueOrThrowArgs>(args: SelectSubset<T, FactoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FactoryClient<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Factory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactoryFindFirstArgs} args - Arguments to find a Factory
     * @example
     * // Get one Factory
     * const factory = await prisma.factory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FactoryFindFirstArgs>(args?: SelectSubset<T, FactoryFindFirstArgs<ExtArgs>>): Prisma__FactoryClient<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Factory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactoryFindFirstOrThrowArgs} args - Arguments to find a Factory
     * @example
     * // Get one Factory
     * const factory = await prisma.factory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FactoryFindFirstOrThrowArgs>(args?: SelectSubset<T, FactoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__FactoryClient<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Factories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Factories
     * const factories = await prisma.factory.findMany()
     * 
     * // Get first 10 Factories
     * const factories = await prisma.factory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const factoryWithIdOnly = await prisma.factory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FactoryFindManyArgs>(args?: SelectSubset<T, FactoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Factory.
     * @param {FactoryCreateArgs} args - Arguments to create a Factory.
     * @example
     * // Create one Factory
     * const Factory = await prisma.factory.create({
     *   data: {
     *     // ... data to create a Factory
     *   }
     * })
     * 
     */
    create<T extends FactoryCreateArgs>(args: SelectSubset<T, FactoryCreateArgs<ExtArgs>>): Prisma__FactoryClient<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Factories.
     * @param {FactoryCreateManyArgs} args - Arguments to create many Factories.
     * @example
     * // Create many Factories
     * const factory = await prisma.factory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FactoryCreateManyArgs>(args?: SelectSubset<T, FactoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Factories and returns the data saved in the database.
     * @param {FactoryCreateManyAndReturnArgs} args - Arguments to create many Factories.
     * @example
     * // Create many Factories
     * const factory = await prisma.factory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Factories and only return the `id`
     * const factoryWithIdOnly = await prisma.factory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FactoryCreateManyAndReturnArgs>(args?: SelectSubset<T, FactoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Factory.
     * @param {FactoryDeleteArgs} args - Arguments to delete one Factory.
     * @example
     * // Delete one Factory
     * const Factory = await prisma.factory.delete({
     *   where: {
     *     // ... filter to delete one Factory
     *   }
     * })
     * 
     */
    delete<T extends FactoryDeleteArgs>(args: SelectSubset<T, FactoryDeleteArgs<ExtArgs>>): Prisma__FactoryClient<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Factory.
     * @param {FactoryUpdateArgs} args - Arguments to update one Factory.
     * @example
     * // Update one Factory
     * const factory = await prisma.factory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FactoryUpdateArgs>(args: SelectSubset<T, FactoryUpdateArgs<ExtArgs>>): Prisma__FactoryClient<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Factories.
     * @param {FactoryDeleteManyArgs} args - Arguments to filter Factories to delete.
     * @example
     * // Delete a few Factories
     * const { count } = await prisma.factory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FactoryDeleteManyArgs>(args?: SelectSubset<T, FactoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Factories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Factories
     * const factory = await prisma.factory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FactoryUpdateManyArgs>(args: SelectSubset<T, FactoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Factory.
     * @param {FactoryUpsertArgs} args - Arguments to update or create a Factory.
     * @example
     * // Update or create a Factory
     * const factory = await prisma.factory.upsert({
     *   create: {
     *     // ... data to create a Factory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Factory we want to update
     *   }
     * })
     */
    upsert<T extends FactoryUpsertArgs>(args: SelectSubset<T, FactoryUpsertArgs<ExtArgs>>): Prisma__FactoryClient<$Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Factories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactoryCountArgs} args - Arguments to filter Factories to count.
     * @example
     * // Count the number of Factories
     * const count = await prisma.factory.count({
     *   where: {
     *     // ... the filter for the Factories we want to count
     *   }
     * })
    **/
    count<T extends FactoryCountArgs>(
      args?: Subset<T, FactoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FactoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Factory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FactoryAggregateArgs>(args: Subset<T, FactoryAggregateArgs>): Prisma.PrismaPromise<GetFactoryAggregateType<T>>

    /**
     * Group by Factory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FactoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FactoryGroupByArgs['orderBy'] }
        : { orderBy?: FactoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FactoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFactoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Factory model
   */
  readonly fields: FactoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Factory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FactoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Factory model
   */ 
  interface FactoryFieldRefs {
    readonly id: FieldRef<"Factory", 'String'>
    readonly name: FieldRef<"Factory", 'String'>
    readonly userId: FieldRef<"Factory", 'String'>
    readonly createdAt: FieldRef<"Factory", 'DateTime'>
    readonly updatedAt: FieldRef<"Factory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Factory findUnique
   */
  export type FactoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * Filter, which Factory to fetch.
     */
    where: FactoryWhereUniqueInput
  }

  /**
   * Factory findUniqueOrThrow
   */
  export type FactoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * Filter, which Factory to fetch.
     */
    where: FactoryWhereUniqueInput
  }

  /**
   * Factory findFirst
   */
  export type FactoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * Filter, which Factory to fetch.
     */
    where?: FactoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factories to fetch.
     */
    orderBy?: FactoryOrderByWithRelationInput | FactoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Factories.
     */
    cursor?: FactoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Factories.
     */
    distinct?: FactoryScalarFieldEnum | FactoryScalarFieldEnum[]
  }

  /**
   * Factory findFirstOrThrow
   */
  export type FactoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * Filter, which Factory to fetch.
     */
    where?: FactoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factories to fetch.
     */
    orderBy?: FactoryOrderByWithRelationInput | FactoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Factories.
     */
    cursor?: FactoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Factories.
     */
    distinct?: FactoryScalarFieldEnum | FactoryScalarFieldEnum[]
  }

  /**
   * Factory findMany
   */
  export type FactoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * Filter, which Factories to fetch.
     */
    where?: FactoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factories to fetch.
     */
    orderBy?: FactoryOrderByWithRelationInput | FactoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Factories.
     */
    cursor?: FactoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factories.
     */
    skip?: number
    distinct?: FactoryScalarFieldEnum | FactoryScalarFieldEnum[]
  }

  /**
   * Factory create
   */
  export type FactoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Factory.
     */
    data: XOR<FactoryCreateInput, FactoryUncheckedCreateInput>
  }

  /**
   * Factory createMany
   */
  export type FactoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Factories.
     */
    data: FactoryCreateManyInput | FactoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Factory createManyAndReturn
   */
  export type FactoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Factories.
     */
    data: FactoryCreateManyInput | FactoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Factory update
   */
  export type FactoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Factory.
     */
    data: XOR<FactoryUpdateInput, FactoryUncheckedUpdateInput>
    /**
     * Choose, which Factory to update.
     */
    where: FactoryWhereUniqueInput
  }

  /**
   * Factory updateMany
   */
  export type FactoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Factories.
     */
    data: XOR<FactoryUpdateManyMutationInput, FactoryUncheckedUpdateManyInput>
    /**
     * Filter which Factories to update
     */
    where?: FactoryWhereInput
  }

  /**
   * Factory upsert
   */
  export type FactoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Factory to update in case it exists.
     */
    where: FactoryWhereUniqueInput
    /**
     * In case the Factory found by the `where` argument doesn't exist, create a new Factory with this data.
     */
    create: XOR<FactoryCreateInput, FactoryUncheckedCreateInput>
    /**
     * In case the Factory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FactoryUpdateInput, FactoryUncheckedUpdateInput>
  }

  /**
   * Factory delete
   */
  export type FactoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
    /**
     * Filter which Factory to delete.
     */
    where: FactoryWhereUniqueInput
  }

  /**
   * Factory deleteMany
   */
  export type FactoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Factories to delete
     */
    where?: FactoryWhereInput
  }

  /**
   * Factory without action
   */
  export type FactoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factory
     */
    select?: FactorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactoryInclude<ExtArgs> | null
  }


  /**
   * Model Design
   */

  export type AggregateDesign = {
    _count: DesignCountAggregateOutputType | null
    _min: DesignMinAggregateOutputType | null
    _max: DesignMaxAggregateOutputType | null
  }

  export type DesignMinAggregateOutputType = {
    id: string | null
    name: string | null
    thumbnail: string | null
    projectId: string | null
    creatorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DesignMaxAggregateOutputType = {
    id: string | null
    name: string | null
    thumbnail: string | null
    projectId: string | null
    creatorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DesignCountAggregateOutputType = {
    id: number
    name: number
    content: number
    thumbnail: number
    projectId: number
    creatorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DesignMinAggregateInputType = {
    id?: true
    name?: true
    thumbnail?: true
    projectId?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DesignMaxAggregateInputType = {
    id?: true
    name?: true
    thumbnail?: true
    projectId?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DesignCountAggregateInputType = {
    id?: true
    name?: true
    content?: true
    thumbnail?: true
    projectId?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DesignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Design to aggregate.
     */
    where?: DesignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Designs to fetch.
     */
    orderBy?: DesignOrderByWithRelationInput | DesignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DesignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Designs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Designs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Designs
    **/
    _count?: true | DesignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DesignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DesignMaxAggregateInputType
  }

  export type GetDesignAggregateType<T extends DesignAggregateArgs> = {
        [P in keyof T & keyof AggregateDesign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDesign[P]>
      : GetScalarType<T[P], AggregateDesign[P]>
  }




  export type DesignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DesignWhereInput
    orderBy?: DesignOrderByWithAggregationInput | DesignOrderByWithAggregationInput[]
    by: DesignScalarFieldEnum[] | DesignScalarFieldEnum
    having?: DesignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DesignCountAggregateInputType | true
    _min?: DesignMinAggregateInputType
    _max?: DesignMaxAggregateInputType
  }

  export type DesignGroupByOutputType = {
    id: string
    name: string
    content: JsonValue
    thumbnail: string | null
    projectId: string
    creatorId: string
    createdAt: Date
    updatedAt: Date
    _count: DesignCountAggregateOutputType | null
    _min: DesignMinAggregateOutputType | null
    _max: DesignMaxAggregateOutputType | null
  }

  type GetDesignGroupByPayload<T extends DesignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DesignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DesignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DesignGroupByOutputType[P]>
            : GetScalarType<T[P], DesignGroupByOutputType[P]>
        }
      >
    >


  export type DesignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    content?: boolean
    thumbnail?: boolean
    projectId?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Design$commentsArgs<ExtArgs>
    _count?: boolean | DesignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["design"]>

  export type DesignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    content?: boolean
    thumbnail?: boolean
    projectId?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["design"]>

  export type DesignSelectScalar = {
    id?: boolean
    name?: boolean
    content?: boolean
    thumbnail?: boolean
    projectId?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DesignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Design$commentsArgs<ExtArgs>
    _count?: boolean | DesignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DesignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DesignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Design"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      content: Prisma.JsonValue
      thumbnail: string | null
      projectId: string
      creatorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["design"]>
    composites: {}
  }

  type DesignGetPayload<S extends boolean | null | undefined | DesignDefaultArgs> = $Result.GetResult<Prisma.$DesignPayload, S>

  type DesignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DesignFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DesignCountAggregateInputType | true
    }

  export interface DesignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Design'], meta: { name: 'Design' } }
    /**
     * Find zero or one Design that matches the filter.
     * @param {DesignFindUniqueArgs} args - Arguments to find a Design
     * @example
     * // Get one Design
     * const design = await prisma.design.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DesignFindUniqueArgs>(args: SelectSubset<T, DesignFindUniqueArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Design that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DesignFindUniqueOrThrowArgs} args - Arguments to find a Design
     * @example
     * // Get one Design
     * const design = await prisma.design.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DesignFindUniqueOrThrowArgs>(args: SelectSubset<T, DesignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Design that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignFindFirstArgs} args - Arguments to find a Design
     * @example
     * // Get one Design
     * const design = await prisma.design.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DesignFindFirstArgs>(args?: SelectSubset<T, DesignFindFirstArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Design that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignFindFirstOrThrowArgs} args - Arguments to find a Design
     * @example
     * // Get one Design
     * const design = await prisma.design.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DesignFindFirstOrThrowArgs>(args?: SelectSubset<T, DesignFindFirstOrThrowArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Designs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Designs
     * const designs = await prisma.design.findMany()
     * 
     * // Get first 10 Designs
     * const designs = await prisma.design.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const designWithIdOnly = await prisma.design.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DesignFindManyArgs>(args?: SelectSubset<T, DesignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Design.
     * @param {DesignCreateArgs} args - Arguments to create a Design.
     * @example
     * // Create one Design
     * const Design = await prisma.design.create({
     *   data: {
     *     // ... data to create a Design
     *   }
     * })
     * 
     */
    create<T extends DesignCreateArgs>(args: SelectSubset<T, DesignCreateArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Designs.
     * @param {DesignCreateManyArgs} args - Arguments to create many Designs.
     * @example
     * // Create many Designs
     * const design = await prisma.design.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DesignCreateManyArgs>(args?: SelectSubset<T, DesignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Designs and returns the data saved in the database.
     * @param {DesignCreateManyAndReturnArgs} args - Arguments to create many Designs.
     * @example
     * // Create many Designs
     * const design = await prisma.design.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Designs and only return the `id`
     * const designWithIdOnly = await prisma.design.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DesignCreateManyAndReturnArgs>(args?: SelectSubset<T, DesignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Design.
     * @param {DesignDeleteArgs} args - Arguments to delete one Design.
     * @example
     * // Delete one Design
     * const Design = await prisma.design.delete({
     *   where: {
     *     // ... filter to delete one Design
     *   }
     * })
     * 
     */
    delete<T extends DesignDeleteArgs>(args: SelectSubset<T, DesignDeleteArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Design.
     * @param {DesignUpdateArgs} args - Arguments to update one Design.
     * @example
     * // Update one Design
     * const design = await prisma.design.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DesignUpdateArgs>(args: SelectSubset<T, DesignUpdateArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Designs.
     * @param {DesignDeleteManyArgs} args - Arguments to filter Designs to delete.
     * @example
     * // Delete a few Designs
     * const { count } = await prisma.design.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DesignDeleteManyArgs>(args?: SelectSubset<T, DesignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Designs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Designs
     * const design = await prisma.design.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DesignUpdateManyArgs>(args: SelectSubset<T, DesignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Design.
     * @param {DesignUpsertArgs} args - Arguments to update or create a Design.
     * @example
     * // Update or create a Design
     * const design = await prisma.design.upsert({
     *   create: {
     *     // ... data to create a Design
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Design we want to update
     *   }
     * })
     */
    upsert<T extends DesignUpsertArgs>(args: SelectSubset<T, DesignUpsertArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Designs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignCountArgs} args - Arguments to filter Designs to count.
     * @example
     * // Count the number of Designs
     * const count = await prisma.design.count({
     *   where: {
     *     // ... the filter for the Designs we want to count
     *   }
     * })
    **/
    count<T extends DesignCountArgs>(
      args?: Subset<T, DesignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DesignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Design.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DesignAggregateArgs>(args: Subset<T, DesignAggregateArgs>): Prisma.PrismaPromise<GetDesignAggregateType<T>>

    /**
     * Group by Design.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DesignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DesignGroupByArgs['orderBy'] }
        : { orderBy?: DesignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DesignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDesignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Design model
   */
  readonly fields: DesignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Design.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DesignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Design$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Design$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Design model
   */ 
  interface DesignFieldRefs {
    readonly id: FieldRef<"Design", 'String'>
    readonly name: FieldRef<"Design", 'String'>
    readonly content: FieldRef<"Design", 'Json'>
    readonly thumbnail: FieldRef<"Design", 'String'>
    readonly projectId: FieldRef<"Design", 'String'>
    readonly creatorId: FieldRef<"Design", 'String'>
    readonly createdAt: FieldRef<"Design", 'DateTime'>
    readonly updatedAt: FieldRef<"Design", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Design findUnique
   */
  export type DesignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * Filter, which Design to fetch.
     */
    where: DesignWhereUniqueInput
  }

  /**
   * Design findUniqueOrThrow
   */
  export type DesignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * Filter, which Design to fetch.
     */
    where: DesignWhereUniqueInput
  }

  /**
   * Design findFirst
   */
  export type DesignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * Filter, which Design to fetch.
     */
    where?: DesignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Designs to fetch.
     */
    orderBy?: DesignOrderByWithRelationInput | DesignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Designs.
     */
    cursor?: DesignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Designs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Designs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Designs.
     */
    distinct?: DesignScalarFieldEnum | DesignScalarFieldEnum[]
  }

  /**
   * Design findFirstOrThrow
   */
  export type DesignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * Filter, which Design to fetch.
     */
    where?: DesignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Designs to fetch.
     */
    orderBy?: DesignOrderByWithRelationInput | DesignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Designs.
     */
    cursor?: DesignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Designs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Designs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Designs.
     */
    distinct?: DesignScalarFieldEnum | DesignScalarFieldEnum[]
  }

  /**
   * Design findMany
   */
  export type DesignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * Filter, which Designs to fetch.
     */
    where?: DesignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Designs to fetch.
     */
    orderBy?: DesignOrderByWithRelationInput | DesignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Designs.
     */
    cursor?: DesignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Designs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Designs.
     */
    skip?: number
    distinct?: DesignScalarFieldEnum | DesignScalarFieldEnum[]
  }

  /**
   * Design create
   */
  export type DesignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * The data needed to create a Design.
     */
    data: XOR<DesignCreateInput, DesignUncheckedCreateInput>
  }

  /**
   * Design createMany
   */
  export type DesignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Designs.
     */
    data: DesignCreateManyInput | DesignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Design createManyAndReturn
   */
  export type DesignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Designs.
     */
    data: DesignCreateManyInput | DesignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Design update
   */
  export type DesignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * The data needed to update a Design.
     */
    data: XOR<DesignUpdateInput, DesignUncheckedUpdateInput>
    /**
     * Choose, which Design to update.
     */
    where: DesignWhereUniqueInput
  }

  /**
   * Design updateMany
   */
  export type DesignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Designs.
     */
    data: XOR<DesignUpdateManyMutationInput, DesignUncheckedUpdateManyInput>
    /**
     * Filter which Designs to update
     */
    where?: DesignWhereInput
  }

  /**
   * Design upsert
   */
  export type DesignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * The filter to search for the Design to update in case it exists.
     */
    where: DesignWhereUniqueInput
    /**
     * In case the Design found by the `where` argument doesn't exist, create a new Design with this data.
     */
    create: XOR<DesignCreateInput, DesignUncheckedCreateInput>
    /**
     * In case the Design was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DesignUpdateInput, DesignUncheckedUpdateInput>
  }

  /**
   * Design delete
   */
  export type DesignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
    /**
     * Filter which Design to delete.
     */
    where: DesignWhereUniqueInput
  }

  /**
   * Design deleteMany
   */
  export type DesignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Designs to delete
     */
    where?: DesignWhereInput
  }

  /**
   * Design.comments
   */
  export type Design$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Design without action
   */
  export type DesignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Design
     */
    select?: DesignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    designId: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    designId: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    designId: number
    authorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    designId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    designId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    designId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    designId: string
    authorId: string
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    designId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    design?: boolean | DesignDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    designId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    design?: boolean | DesignDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    designId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    design?: boolean | DesignDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    design?: boolean | DesignDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      design: Prisma.$DesignPayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      designId: string
      authorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    design<T extends DesignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DesignDefaultArgs<ExtArgs>>): Prisma__DesignClient<$Result.GetResult<Prisma.$DesignPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly designId: FieldRef<"Comment", 'String'>
    readonly authorId: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobMinAggregateOutputType = {
    id: string | null
    name: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: string | null
    name: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    name: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: string
    name: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: JobCountAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */ 
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'String'>
    readonly name: FieldRef<"Job", 'String'>
    readonly status: FieldRef<"Job", 'String'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly updatedAt: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingCountAggregateOutputType = {
    id: number
    key: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SettingMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    id: string
    key: string
    value: string
    createdAt: Date
    updatedAt: Date
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingWithIdOnly = await prisma.setting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */ 
  interface SettingFieldRefs {
    readonly id: FieldRef<"Setting", 'String'>
    readonly key: FieldRef<"Setting", 'String'>
    readonly value: FieldRef<"Setting", 'String'>
    readonly createdAt: FieldRef<"Setting", 'DateTime'>
    readonly updatedAt: FieldRef<"Setting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting createManyAndReturn
   */
  export type SettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
  }


  /**
   * Model ElectricityRecharge
   */

  export type AggregateElectricityRecharge = {
    _count: ElectricityRechargeCountAggregateOutputType | null
    _avg: ElectricityRechargeAvgAggregateOutputType | null
    _sum: ElectricityRechargeSumAggregateOutputType | null
    _min: ElectricityRechargeMinAggregateOutputType | null
    _max: ElectricityRechargeMaxAggregateOutputType | null
  }

  export type ElectricityRechargeAvgAggregateOutputType = {
    kwhAmount: number | null
    totalPaid: number | null
    baseCost: number | null
    vat: number | null
    ewuraFee: number | null
    reaFee: number | null
    debtCollected: number | null
  }

  export type ElectricityRechargeSumAggregateOutputType = {
    kwhAmount: number | null
    totalPaid: number | null
    baseCost: number | null
    vat: number | null
    ewuraFee: number | null
    reaFee: number | null
    debtCollected: number | null
  }

  export type ElectricityRechargeMinAggregateOutputType = {
    id: string | null
    rechargeDate: Date | null
    token: string | null
    kwhAmount: number | null
    totalPaid: number | null
    baseCost: number | null
    vat: number | null
    ewuraFee: number | null
    reaFee: number | null
    debtCollected: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ElectricityRechargeMaxAggregateOutputType = {
    id: string | null
    rechargeDate: Date | null
    token: string | null
    kwhAmount: number | null
    totalPaid: number | null
    baseCost: number | null
    vat: number | null
    ewuraFee: number | null
    reaFee: number | null
    debtCollected: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ElectricityRechargeCountAggregateOutputType = {
    id: number
    rechargeDate: number
    token: number
    kwhAmount: number
    totalPaid: number
    baseCost: number
    vat: number
    ewuraFee: number
    reaFee: number
    debtCollected: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ElectricityRechargeAvgAggregateInputType = {
    kwhAmount?: true
    totalPaid?: true
    baseCost?: true
    vat?: true
    ewuraFee?: true
    reaFee?: true
    debtCollected?: true
  }

  export type ElectricityRechargeSumAggregateInputType = {
    kwhAmount?: true
    totalPaid?: true
    baseCost?: true
    vat?: true
    ewuraFee?: true
    reaFee?: true
    debtCollected?: true
  }

  export type ElectricityRechargeMinAggregateInputType = {
    id?: true
    rechargeDate?: true
    token?: true
    kwhAmount?: true
    totalPaid?: true
    baseCost?: true
    vat?: true
    ewuraFee?: true
    reaFee?: true
    debtCollected?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ElectricityRechargeMaxAggregateInputType = {
    id?: true
    rechargeDate?: true
    token?: true
    kwhAmount?: true
    totalPaid?: true
    baseCost?: true
    vat?: true
    ewuraFee?: true
    reaFee?: true
    debtCollected?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ElectricityRechargeCountAggregateInputType = {
    id?: true
    rechargeDate?: true
    token?: true
    kwhAmount?: true
    totalPaid?: true
    baseCost?: true
    vat?: true
    ewuraFee?: true
    reaFee?: true
    debtCollected?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ElectricityRechargeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ElectricityRecharge to aggregate.
     */
    where?: ElectricityRechargeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectricityRecharges to fetch.
     */
    orderBy?: ElectricityRechargeOrderByWithRelationInput | ElectricityRechargeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ElectricityRechargeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectricityRecharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectricityRecharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ElectricityRecharges
    **/
    _count?: true | ElectricityRechargeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ElectricityRechargeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ElectricityRechargeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ElectricityRechargeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ElectricityRechargeMaxAggregateInputType
  }

  export type GetElectricityRechargeAggregateType<T extends ElectricityRechargeAggregateArgs> = {
        [P in keyof T & keyof AggregateElectricityRecharge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateElectricityRecharge[P]>
      : GetScalarType<T[P], AggregateElectricityRecharge[P]>
  }




  export type ElectricityRechargeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ElectricityRechargeWhereInput
    orderBy?: ElectricityRechargeOrderByWithAggregationInput | ElectricityRechargeOrderByWithAggregationInput[]
    by: ElectricityRechargeScalarFieldEnum[] | ElectricityRechargeScalarFieldEnum
    having?: ElectricityRechargeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ElectricityRechargeCountAggregateInputType | true
    _avg?: ElectricityRechargeAvgAggregateInputType
    _sum?: ElectricityRechargeSumAggregateInputType
    _min?: ElectricityRechargeMinAggregateInputType
    _max?: ElectricityRechargeMaxAggregateInputType
  }

  export type ElectricityRechargeGroupByOutputType = {
    id: string
    rechargeDate: Date
    token: string
    kwhAmount: number
    totalPaid: number
    baseCost: number | null
    vat: number | null
    ewuraFee: number | null
    reaFee: number | null
    debtCollected: number | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ElectricityRechargeCountAggregateOutputType | null
    _avg: ElectricityRechargeAvgAggregateOutputType | null
    _sum: ElectricityRechargeSumAggregateOutputType | null
    _min: ElectricityRechargeMinAggregateOutputType | null
    _max: ElectricityRechargeMaxAggregateOutputType | null
  }

  type GetElectricityRechargeGroupByPayload<T extends ElectricityRechargeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ElectricityRechargeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ElectricityRechargeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ElectricityRechargeGroupByOutputType[P]>
            : GetScalarType<T[P], ElectricityRechargeGroupByOutputType[P]>
        }
      >
    >


  export type ElectricityRechargeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rechargeDate?: boolean
    token?: boolean
    kwhAmount?: boolean
    totalPaid?: boolean
    baseCost?: boolean
    vat?: boolean
    ewuraFee?: boolean
    reaFee?: boolean
    debtCollected?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["electricityRecharge"]>

  export type ElectricityRechargeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rechargeDate?: boolean
    token?: boolean
    kwhAmount?: boolean
    totalPaid?: boolean
    baseCost?: boolean
    vat?: boolean
    ewuraFee?: boolean
    reaFee?: boolean
    debtCollected?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["electricityRecharge"]>

  export type ElectricityRechargeSelectScalar = {
    id?: boolean
    rechargeDate?: boolean
    token?: boolean
    kwhAmount?: boolean
    totalPaid?: boolean
    baseCost?: boolean
    vat?: boolean
    ewuraFee?: boolean
    reaFee?: boolean
    debtCollected?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ElectricityRechargePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ElectricityRecharge"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rechargeDate: Date
      token: string
      kwhAmount: number
      totalPaid: number
      baseCost: number | null
      vat: number | null
      ewuraFee: number | null
      reaFee: number | null
      debtCollected: number | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["electricityRecharge"]>
    composites: {}
  }

  type ElectricityRechargeGetPayload<S extends boolean | null | undefined | ElectricityRechargeDefaultArgs> = $Result.GetResult<Prisma.$ElectricityRechargePayload, S>

  type ElectricityRechargeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ElectricityRechargeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ElectricityRechargeCountAggregateInputType | true
    }

  export interface ElectricityRechargeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ElectricityRecharge'], meta: { name: 'ElectricityRecharge' } }
    /**
     * Find zero or one ElectricityRecharge that matches the filter.
     * @param {ElectricityRechargeFindUniqueArgs} args - Arguments to find a ElectricityRecharge
     * @example
     * // Get one ElectricityRecharge
     * const electricityRecharge = await prisma.electricityRecharge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ElectricityRechargeFindUniqueArgs>(args: SelectSubset<T, ElectricityRechargeFindUniqueArgs<ExtArgs>>): Prisma__ElectricityRechargeClient<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ElectricityRecharge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ElectricityRechargeFindUniqueOrThrowArgs} args - Arguments to find a ElectricityRecharge
     * @example
     * // Get one ElectricityRecharge
     * const electricityRecharge = await prisma.electricityRecharge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ElectricityRechargeFindUniqueOrThrowArgs>(args: SelectSubset<T, ElectricityRechargeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ElectricityRechargeClient<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ElectricityRecharge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityRechargeFindFirstArgs} args - Arguments to find a ElectricityRecharge
     * @example
     * // Get one ElectricityRecharge
     * const electricityRecharge = await prisma.electricityRecharge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ElectricityRechargeFindFirstArgs>(args?: SelectSubset<T, ElectricityRechargeFindFirstArgs<ExtArgs>>): Prisma__ElectricityRechargeClient<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ElectricityRecharge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityRechargeFindFirstOrThrowArgs} args - Arguments to find a ElectricityRecharge
     * @example
     * // Get one ElectricityRecharge
     * const electricityRecharge = await prisma.electricityRecharge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ElectricityRechargeFindFirstOrThrowArgs>(args?: SelectSubset<T, ElectricityRechargeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ElectricityRechargeClient<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ElectricityRecharges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityRechargeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ElectricityRecharges
     * const electricityRecharges = await prisma.electricityRecharge.findMany()
     * 
     * // Get first 10 ElectricityRecharges
     * const electricityRecharges = await prisma.electricityRecharge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const electricityRechargeWithIdOnly = await prisma.electricityRecharge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ElectricityRechargeFindManyArgs>(args?: SelectSubset<T, ElectricityRechargeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ElectricityRecharge.
     * @param {ElectricityRechargeCreateArgs} args - Arguments to create a ElectricityRecharge.
     * @example
     * // Create one ElectricityRecharge
     * const ElectricityRecharge = await prisma.electricityRecharge.create({
     *   data: {
     *     // ... data to create a ElectricityRecharge
     *   }
     * })
     * 
     */
    create<T extends ElectricityRechargeCreateArgs>(args: SelectSubset<T, ElectricityRechargeCreateArgs<ExtArgs>>): Prisma__ElectricityRechargeClient<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ElectricityRecharges.
     * @param {ElectricityRechargeCreateManyArgs} args - Arguments to create many ElectricityRecharges.
     * @example
     * // Create many ElectricityRecharges
     * const electricityRecharge = await prisma.electricityRecharge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ElectricityRechargeCreateManyArgs>(args?: SelectSubset<T, ElectricityRechargeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ElectricityRecharges and returns the data saved in the database.
     * @param {ElectricityRechargeCreateManyAndReturnArgs} args - Arguments to create many ElectricityRecharges.
     * @example
     * // Create many ElectricityRecharges
     * const electricityRecharge = await prisma.electricityRecharge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ElectricityRecharges and only return the `id`
     * const electricityRechargeWithIdOnly = await prisma.electricityRecharge.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ElectricityRechargeCreateManyAndReturnArgs>(args?: SelectSubset<T, ElectricityRechargeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ElectricityRecharge.
     * @param {ElectricityRechargeDeleteArgs} args - Arguments to delete one ElectricityRecharge.
     * @example
     * // Delete one ElectricityRecharge
     * const ElectricityRecharge = await prisma.electricityRecharge.delete({
     *   where: {
     *     // ... filter to delete one ElectricityRecharge
     *   }
     * })
     * 
     */
    delete<T extends ElectricityRechargeDeleteArgs>(args: SelectSubset<T, ElectricityRechargeDeleteArgs<ExtArgs>>): Prisma__ElectricityRechargeClient<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ElectricityRecharge.
     * @param {ElectricityRechargeUpdateArgs} args - Arguments to update one ElectricityRecharge.
     * @example
     * // Update one ElectricityRecharge
     * const electricityRecharge = await prisma.electricityRecharge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ElectricityRechargeUpdateArgs>(args: SelectSubset<T, ElectricityRechargeUpdateArgs<ExtArgs>>): Prisma__ElectricityRechargeClient<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ElectricityRecharges.
     * @param {ElectricityRechargeDeleteManyArgs} args - Arguments to filter ElectricityRecharges to delete.
     * @example
     * // Delete a few ElectricityRecharges
     * const { count } = await prisma.electricityRecharge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ElectricityRechargeDeleteManyArgs>(args?: SelectSubset<T, ElectricityRechargeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ElectricityRecharges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityRechargeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ElectricityRecharges
     * const electricityRecharge = await prisma.electricityRecharge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ElectricityRechargeUpdateManyArgs>(args: SelectSubset<T, ElectricityRechargeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ElectricityRecharge.
     * @param {ElectricityRechargeUpsertArgs} args - Arguments to update or create a ElectricityRecharge.
     * @example
     * // Update or create a ElectricityRecharge
     * const electricityRecharge = await prisma.electricityRecharge.upsert({
     *   create: {
     *     // ... data to create a ElectricityRecharge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ElectricityRecharge we want to update
     *   }
     * })
     */
    upsert<T extends ElectricityRechargeUpsertArgs>(args: SelectSubset<T, ElectricityRechargeUpsertArgs<ExtArgs>>): Prisma__ElectricityRechargeClient<$Result.GetResult<Prisma.$ElectricityRechargePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ElectricityRecharges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityRechargeCountArgs} args - Arguments to filter ElectricityRecharges to count.
     * @example
     * // Count the number of ElectricityRecharges
     * const count = await prisma.electricityRecharge.count({
     *   where: {
     *     // ... the filter for the ElectricityRecharges we want to count
     *   }
     * })
    **/
    count<T extends ElectricityRechargeCountArgs>(
      args?: Subset<T, ElectricityRechargeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ElectricityRechargeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ElectricityRecharge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityRechargeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ElectricityRechargeAggregateArgs>(args: Subset<T, ElectricityRechargeAggregateArgs>): Prisma.PrismaPromise<GetElectricityRechargeAggregateType<T>>

    /**
     * Group by ElectricityRecharge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityRechargeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ElectricityRechargeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ElectricityRechargeGroupByArgs['orderBy'] }
        : { orderBy?: ElectricityRechargeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ElectricityRechargeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetElectricityRechargeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ElectricityRecharge model
   */
  readonly fields: ElectricityRechargeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ElectricityRecharge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ElectricityRechargeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ElectricityRecharge model
   */ 
  interface ElectricityRechargeFieldRefs {
    readonly id: FieldRef<"ElectricityRecharge", 'String'>
    readonly rechargeDate: FieldRef<"ElectricityRecharge", 'DateTime'>
    readonly token: FieldRef<"ElectricityRecharge", 'String'>
    readonly kwhAmount: FieldRef<"ElectricityRecharge", 'Float'>
    readonly totalPaid: FieldRef<"ElectricityRecharge", 'Float'>
    readonly baseCost: FieldRef<"ElectricityRecharge", 'Float'>
    readonly vat: FieldRef<"ElectricityRecharge", 'Float'>
    readonly ewuraFee: FieldRef<"ElectricityRecharge", 'Float'>
    readonly reaFee: FieldRef<"ElectricityRecharge", 'Float'>
    readonly debtCollected: FieldRef<"ElectricityRecharge", 'Float'>
    readonly notes: FieldRef<"ElectricityRecharge", 'String'>
    readonly createdAt: FieldRef<"ElectricityRecharge", 'DateTime'>
    readonly updatedAt: FieldRef<"ElectricityRecharge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ElectricityRecharge findUnique
   */
  export type ElectricityRechargeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * Filter, which ElectricityRecharge to fetch.
     */
    where: ElectricityRechargeWhereUniqueInput
  }

  /**
   * ElectricityRecharge findUniqueOrThrow
   */
  export type ElectricityRechargeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * Filter, which ElectricityRecharge to fetch.
     */
    where: ElectricityRechargeWhereUniqueInput
  }

  /**
   * ElectricityRecharge findFirst
   */
  export type ElectricityRechargeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * Filter, which ElectricityRecharge to fetch.
     */
    where?: ElectricityRechargeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectricityRecharges to fetch.
     */
    orderBy?: ElectricityRechargeOrderByWithRelationInput | ElectricityRechargeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ElectricityRecharges.
     */
    cursor?: ElectricityRechargeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectricityRecharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectricityRecharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ElectricityRecharges.
     */
    distinct?: ElectricityRechargeScalarFieldEnum | ElectricityRechargeScalarFieldEnum[]
  }

  /**
   * ElectricityRecharge findFirstOrThrow
   */
  export type ElectricityRechargeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * Filter, which ElectricityRecharge to fetch.
     */
    where?: ElectricityRechargeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectricityRecharges to fetch.
     */
    orderBy?: ElectricityRechargeOrderByWithRelationInput | ElectricityRechargeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ElectricityRecharges.
     */
    cursor?: ElectricityRechargeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectricityRecharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectricityRecharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ElectricityRecharges.
     */
    distinct?: ElectricityRechargeScalarFieldEnum | ElectricityRechargeScalarFieldEnum[]
  }

  /**
   * ElectricityRecharge findMany
   */
  export type ElectricityRechargeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * Filter, which ElectricityRecharges to fetch.
     */
    where?: ElectricityRechargeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectricityRecharges to fetch.
     */
    orderBy?: ElectricityRechargeOrderByWithRelationInput | ElectricityRechargeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ElectricityRecharges.
     */
    cursor?: ElectricityRechargeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectricityRecharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectricityRecharges.
     */
    skip?: number
    distinct?: ElectricityRechargeScalarFieldEnum | ElectricityRechargeScalarFieldEnum[]
  }

  /**
   * ElectricityRecharge create
   */
  export type ElectricityRechargeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * The data needed to create a ElectricityRecharge.
     */
    data: XOR<ElectricityRechargeCreateInput, ElectricityRechargeUncheckedCreateInput>
  }

  /**
   * ElectricityRecharge createMany
   */
  export type ElectricityRechargeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ElectricityRecharges.
     */
    data: ElectricityRechargeCreateManyInput | ElectricityRechargeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ElectricityRecharge createManyAndReturn
   */
  export type ElectricityRechargeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ElectricityRecharges.
     */
    data: ElectricityRechargeCreateManyInput | ElectricityRechargeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ElectricityRecharge update
   */
  export type ElectricityRechargeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * The data needed to update a ElectricityRecharge.
     */
    data: XOR<ElectricityRechargeUpdateInput, ElectricityRechargeUncheckedUpdateInput>
    /**
     * Choose, which ElectricityRecharge to update.
     */
    where: ElectricityRechargeWhereUniqueInput
  }

  /**
   * ElectricityRecharge updateMany
   */
  export type ElectricityRechargeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ElectricityRecharges.
     */
    data: XOR<ElectricityRechargeUpdateManyMutationInput, ElectricityRechargeUncheckedUpdateManyInput>
    /**
     * Filter which ElectricityRecharges to update
     */
    where?: ElectricityRechargeWhereInput
  }

  /**
   * ElectricityRecharge upsert
   */
  export type ElectricityRechargeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * The filter to search for the ElectricityRecharge to update in case it exists.
     */
    where: ElectricityRechargeWhereUniqueInput
    /**
     * In case the ElectricityRecharge found by the `where` argument doesn't exist, create a new ElectricityRecharge with this data.
     */
    create: XOR<ElectricityRechargeCreateInput, ElectricityRechargeUncheckedCreateInput>
    /**
     * In case the ElectricityRecharge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ElectricityRechargeUpdateInput, ElectricityRechargeUncheckedUpdateInput>
  }

  /**
   * ElectricityRecharge delete
   */
  export type ElectricityRechargeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
    /**
     * Filter which ElectricityRecharge to delete.
     */
    where: ElectricityRechargeWhereUniqueInput
  }

  /**
   * ElectricityRecharge deleteMany
   */
  export type ElectricityRechargeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ElectricityRecharges to delete
     */
    where?: ElectricityRechargeWhereInput
  }

  /**
   * ElectricityRecharge without action
   */
  export type ElectricityRechargeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityRecharge
     */
    select?: ElectricityRechargeSelect<ExtArgs> | null
  }


  /**
   * Model WoodType
   */

  export type AggregateWoodType = {
    _count: WoodTypeCountAggregateOutputType | null
    _avg: WoodTypeAvgAggregateOutputType | null
    _sum: WoodTypeSumAggregateOutputType | null
    _min: WoodTypeMinAggregateOutputType | null
    _max: WoodTypeMaxAggregateOutputType | null
  }

  export type WoodTypeAvgAggregateOutputType = {
    density: number | null
  }

  export type WoodTypeSumAggregateOutputType = {
    density: number | null
  }

  export type WoodTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    density: number | null
    grade: string | null
    origin: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WoodTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    density: number | null
    grade: string | null
    origin: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WoodTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    density: number
    grade: number
    origin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WoodTypeAvgAggregateInputType = {
    density?: true
  }

  export type WoodTypeSumAggregateInputType = {
    density?: true
  }

  export type WoodTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    density?: true
    grade?: true
    origin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WoodTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    density?: true
    grade?: true
    origin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WoodTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    density?: true
    grade?: true
    origin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WoodTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WoodType to aggregate.
     */
    where?: WoodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodTypes to fetch.
     */
    orderBy?: WoodTypeOrderByWithRelationInput | WoodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WoodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WoodTypes
    **/
    _count?: true | WoodTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WoodTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WoodTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WoodTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WoodTypeMaxAggregateInputType
  }

  export type GetWoodTypeAggregateType<T extends WoodTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateWoodType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWoodType[P]>
      : GetScalarType<T[P], AggregateWoodType[P]>
  }




  export type WoodTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WoodTypeWhereInput
    orderBy?: WoodTypeOrderByWithAggregationInput | WoodTypeOrderByWithAggregationInput[]
    by: WoodTypeScalarFieldEnum[] | WoodTypeScalarFieldEnum
    having?: WoodTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WoodTypeCountAggregateInputType | true
    _avg?: WoodTypeAvgAggregateInputType
    _sum?: WoodTypeSumAggregateInputType
    _min?: WoodTypeMinAggregateInputType
    _max?: WoodTypeMaxAggregateInputType
  }

  export type WoodTypeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    density: number | null
    grade: string
    origin: string | null
    createdAt: Date
    updatedAt: Date
    _count: WoodTypeCountAggregateOutputType | null
    _avg: WoodTypeAvgAggregateOutputType | null
    _sum: WoodTypeSumAggregateOutputType | null
    _min: WoodTypeMinAggregateOutputType | null
    _max: WoodTypeMaxAggregateOutputType | null
  }

  type GetWoodTypeGroupByPayload<T extends WoodTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WoodTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WoodTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WoodTypeGroupByOutputType[P]>
            : GetScalarType<T[P], WoodTypeGroupByOutputType[P]>
        }
      >
    >


  export type WoodTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    density?: boolean
    grade?: boolean
    origin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    calculations?: boolean | WoodType$calculationsArgs<ExtArgs>
    receipts?: boolean | WoodType$receiptsArgs<ExtArgs>
    operations?: boolean | WoodType$operationsArgs<ExtArgs>
    dryingProcesses?: boolean | WoodType$dryingProcessesArgs<ExtArgs>
    _count?: boolean | WoodTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["woodType"]>

  export type WoodTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    density?: boolean
    grade?: boolean
    origin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["woodType"]>

  export type WoodTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    density?: boolean
    grade?: boolean
    origin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WoodTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    calculations?: boolean | WoodType$calculationsArgs<ExtArgs>
    receipts?: boolean | WoodType$receiptsArgs<ExtArgs>
    operations?: boolean | WoodType$operationsArgs<ExtArgs>
    dryingProcesses?: boolean | WoodType$dryingProcessesArgs<ExtArgs>
    _count?: boolean | WoodTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WoodTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WoodTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WoodType"
    objects: {
      calculations: Prisma.$WoodCalculationPayload<ExtArgs>[]
      receipts: Prisma.$WoodReceiptPayload<ExtArgs>[]
      operations: Prisma.$OperationPayload<ExtArgs>[]
      dryingProcesses: Prisma.$DryingProcessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      density: number | null
      grade: string
      origin: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["woodType"]>
    composites: {}
  }

  type WoodTypeGetPayload<S extends boolean | null | undefined | WoodTypeDefaultArgs> = $Result.GetResult<Prisma.$WoodTypePayload, S>

  type WoodTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WoodTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WoodTypeCountAggregateInputType | true
    }

  export interface WoodTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WoodType'], meta: { name: 'WoodType' } }
    /**
     * Find zero or one WoodType that matches the filter.
     * @param {WoodTypeFindUniqueArgs} args - Arguments to find a WoodType
     * @example
     * // Get one WoodType
     * const woodType = await prisma.woodType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WoodTypeFindUniqueArgs>(args: SelectSubset<T, WoodTypeFindUniqueArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WoodType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WoodTypeFindUniqueOrThrowArgs} args - Arguments to find a WoodType
     * @example
     * // Get one WoodType
     * const woodType = await prisma.woodType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WoodTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, WoodTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WoodType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodTypeFindFirstArgs} args - Arguments to find a WoodType
     * @example
     * // Get one WoodType
     * const woodType = await prisma.woodType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WoodTypeFindFirstArgs>(args?: SelectSubset<T, WoodTypeFindFirstArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WoodType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodTypeFindFirstOrThrowArgs} args - Arguments to find a WoodType
     * @example
     * // Get one WoodType
     * const woodType = await prisma.woodType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WoodTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, WoodTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WoodTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WoodTypes
     * const woodTypes = await prisma.woodType.findMany()
     * 
     * // Get first 10 WoodTypes
     * const woodTypes = await prisma.woodType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const woodTypeWithIdOnly = await prisma.woodType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WoodTypeFindManyArgs>(args?: SelectSubset<T, WoodTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WoodType.
     * @param {WoodTypeCreateArgs} args - Arguments to create a WoodType.
     * @example
     * // Create one WoodType
     * const WoodType = await prisma.woodType.create({
     *   data: {
     *     // ... data to create a WoodType
     *   }
     * })
     * 
     */
    create<T extends WoodTypeCreateArgs>(args: SelectSubset<T, WoodTypeCreateArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WoodTypes.
     * @param {WoodTypeCreateManyArgs} args - Arguments to create many WoodTypes.
     * @example
     * // Create many WoodTypes
     * const woodType = await prisma.woodType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WoodTypeCreateManyArgs>(args?: SelectSubset<T, WoodTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WoodTypes and returns the data saved in the database.
     * @param {WoodTypeCreateManyAndReturnArgs} args - Arguments to create many WoodTypes.
     * @example
     * // Create many WoodTypes
     * const woodType = await prisma.woodType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WoodTypes and only return the `id`
     * const woodTypeWithIdOnly = await prisma.woodType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WoodTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, WoodTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WoodType.
     * @param {WoodTypeDeleteArgs} args - Arguments to delete one WoodType.
     * @example
     * // Delete one WoodType
     * const WoodType = await prisma.woodType.delete({
     *   where: {
     *     // ... filter to delete one WoodType
     *   }
     * })
     * 
     */
    delete<T extends WoodTypeDeleteArgs>(args: SelectSubset<T, WoodTypeDeleteArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WoodType.
     * @param {WoodTypeUpdateArgs} args - Arguments to update one WoodType.
     * @example
     * // Update one WoodType
     * const woodType = await prisma.woodType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WoodTypeUpdateArgs>(args: SelectSubset<T, WoodTypeUpdateArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WoodTypes.
     * @param {WoodTypeDeleteManyArgs} args - Arguments to filter WoodTypes to delete.
     * @example
     * // Delete a few WoodTypes
     * const { count } = await prisma.woodType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WoodTypeDeleteManyArgs>(args?: SelectSubset<T, WoodTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WoodTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WoodTypes
     * const woodType = await prisma.woodType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WoodTypeUpdateManyArgs>(args: SelectSubset<T, WoodTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WoodType.
     * @param {WoodTypeUpsertArgs} args - Arguments to update or create a WoodType.
     * @example
     * // Update or create a WoodType
     * const woodType = await prisma.woodType.upsert({
     *   create: {
     *     // ... data to create a WoodType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WoodType we want to update
     *   }
     * })
     */
    upsert<T extends WoodTypeUpsertArgs>(args: SelectSubset<T, WoodTypeUpsertArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WoodTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodTypeCountArgs} args - Arguments to filter WoodTypes to count.
     * @example
     * // Count the number of WoodTypes
     * const count = await prisma.woodType.count({
     *   where: {
     *     // ... the filter for the WoodTypes we want to count
     *   }
     * })
    **/
    count<T extends WoodTypeCountArgs>(
      args?: Subset<T, WoodTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WoodTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WoodType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WoodTypeAggregateArgs>(args: Subset<T, WoodTypeAggregateArgs>): Prisma.PrismaPromise<GetWoodTypeAggregateType<T>>

    /**
     * Group by WoodType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WoodTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WoodTypeGroupByArgs['orderBy'] }
        : { orderBy?: WoodTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WoodTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWoodTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WoodType model
   */
  readonly fields: WoodTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WoodType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WoodTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    calculations<T extends WoodType$calculationsArgs<ExtArgs> = {}>(args?: Subset<T, WoodType$calculationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "findMany"> | Null>
    receipts<T extends WoodType$receiptsArgs<ExtArgs> = {}>(args?: Subset<T, WoodType$receiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "findMany"> | Null>
    operations<T extends WoodType$operationsArgs<ExtArgs> = {}>(args?: Subset<T, WoodType$operationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findMany"> | Null>
    dryingProcesses<T extends WoodType$dryingProcessesArgs<ExtArgs> = {}>(args?: Subset<T, WoodType$dryingProcessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WoodType model
   */ 
  interface WoodTypeFieldRefs {
    readonly id: FieldRef<"WoodType", 'String'>
    readonly name: FieldRef<"WoodType", 'String'>
    readonly description: FieldRef<"WoodType", 'String'>
    readonly density: FieldRef<"WoodType", 'Float'>
    readonly grade: FieldRef<"WoodType", 'String'>
    readonly origin: FieldRef<"WoodType", 'String'>
    readonly createdAt: FieldRef<"WoodType", 'DateTime'>
    readonly updatedAt: FieldRef<"WoodType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WoodType findUnique
   */
  export type WoodTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which WoodType to fetch.
     */
    where: WoodTypeWhereUniqueInput
  }

  /**
   * WoodType findUniqueOrThrow
   */
  export type WoodTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which WoodType to fetch.
     */
    where: WoodTypeWhereUniqueInput
  }

  /**
   * WoodType findFirst
   */
  export type WoodTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which WoodType to fetch.
     */
    where?: WoodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodTypes to fetch.
     */
    orderBy?: WoodTypeOrderByWithRelationInput | WoodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WoodTypes.
     */
    cursor?: WoodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WoodTypes.
     */
    distinct?: WoodTypeScalarFieldEnum | WoodTypeScalarFieldEnum[]
  }

  /**
   * WoodType findFirstOrThrow
   */
  export type WoodTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which WoodType to fetch.
     */
    where?: WoodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodTypes to fetch.
     */
    orderBy?: WoodTypeOrderByWithRelationInput | WoodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WoodTypes.
     */
    cursor?: WoodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WoodTypes.
     */
    distinct?: WoodTypeScalarFieldEnum | WoodTypeScalarFieldEnum[]
  }

  /**
   * WoodType findMany
   */
  export type WoodTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which WoodTypes to fetch.
     */
    where?: WoodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodTypes to fetch.
     */
    orderBy?: WoodTypeOrderByWithRelationInput | WoodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WoodTypes.
     */
    cursor?: WoodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodTypes.
     */
    skip?: number
    distinct?: WoodTypeScalarFieldEnum | WoodTypeScalarFieldEnum[]
  }

  /**
   * WoodType create
   */
  export type WoodTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a WoodType.
     */
    data: XOR<WoodTypeCreateInput, WoodTypeUncheckedCreateInput>
  }

  /**
   * WoodType createMany
   */
  export type WoodTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WoodTypes.
     */
    data: WoodTypeCreateManyInput | WoodTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WoodType createManyAndReturn
   */
  export type WoodTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WoodTypes.
     */
    data: WoodTypeCreateManyInput | WoodTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WoodType update
   */
  export type WoodTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a WoodType.
     */
    data: XOR<WoodTypeUpdateInput, WoodTypeUncheckedUpdateInput>
    /**
     * Choose, which WoodType to update.
     */
    where: WoodTypeWhereUniqueInput
  }

  /**
   * WoodType updateMany
   */
  export type WoodTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WoodTypes.
     */
    data: XOR<WoodTypeUpdateManyMutationInput, WoodTypeUncheckedUpdateManyInput>
    /**
     * Filter which WoodTypes to update
     */
    where?: WoodTypeWhereInput
  }

  /**
   * WoodType upsert
   */
  export type WoodTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the WoodType to update in case it exists.
     */
    where: WoodTypeWhereUniqueInput
    /**
     * In case the WoodType found by the `where` argument doesn't exist, create a new WoodType with this data.
     */
    create: XOR<WoodTypeCreateInput, WoodTypeUncheckedCreateInput>
    /**
     * In case the WoodType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WoodTypeUpdateInput, WoodTypeUncheckedUpdateInput>
  }

  /**
   * WoodType delete
   */
  export type WoodTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
    /**
     * Filter which WoodType to delete.
     */
    where: WoodTypeWhereUniqueInput
  }

  /**
   * WoodType deleteMany
   */
  export type WoodTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WoodTypes to delete
     */
    where?: WoodTypeWhereInput
  }

  /**
   * WoodType.calculations
   */
  export type WoodType$calculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    where?: WoodCalculationWhereInput
    orderBy?: WoodCalculationOrderByWithRelationInput | WoodCalculationOrderByWithRelationInput[]
    cursor?: WoodCalculationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WoodCalculationScalarFieldEnum | WoodCalculationScalarFieldEnum[]
  }

  /**
   * WoodType.receipts
   */
  export type WoodType$receiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    where?: WoodReceiptWhereInput
    orderBy?: WoodReceiptOrderByWithRelationInput | WoodReceiptOrderByWithRelationInput[]
    cursor?: WoodReceiptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WoodReceiptScalarFieldEnum | WoodReceiptScalarFieldEnum[]
  }

  /**
   * WoodType.operations
   */
  export type WoodType$operationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    where?: OperationWhereInput
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    cursor?: OperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * WoodType.dryingProcesses
   */
  export type WoodType$dryingProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    where?: DryingProcessWhereInput
    orderBy?: DryingProcessOrderByWithRelationInput | DryingProcessOrderByWithRelationInput[]
    cursor?: DryingProcessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DryingProcessScalarFieldEnum | DryingProcessScalarFieldEnum[]
  }

  /**
   * WoodType without action
   */
  export type WoodTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodType
     */
    select?: WoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodTypeInclude<ExtArgs> | null
  }


  /**
   * Model WoodCalculation
   */

  export type AggregateWoodCalculation = {
    _count: WoodCalculationCountAggregateOutputType | null
    _avg: WoodCalculationAvgAggregateOutputType | null
    _sum: WoodCalculationSumAggregateOutputType | null
    _min: WoodCalculationMinAggregateOutputType | null
    _max: WoodCalculationMaxAggregateOutputType | null
  }

  export type WoodCalculationAvgAggregateOutputType = {
    thickness: number | null
    width: number | null
    length: number | null
    pricePerPlank: number | null
    volumeM3: number | null
    planksPerM3: number | null
    pricePerM3: number | null
  }

  export type WoodCalculationSumAggregateOutputType = {
    thickness: number | null
    width: number | null
    length: number | null
    pricePerPlank: number | null
    volumeM3: number | null
    planksPerM3: number | null
    pricePerM3: number | null
  }

  export type WoodCalculationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    woodTypeId: string | null
    thickness: number | null
    width: number | null
    length: number | null
    pricePerPlank: number | null
    volumeM3: number | null
    planksPerM3: number | null
    pricePerM3: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WoodCalculationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    woodTypeId: string | null
    thickness: number | null
    width: number | null
    length: number | null
    pricePerPlank: number | null
    volumeM3: number | null
    planksPerM3: number | null
    pricePerM3: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WoodCalculationCountAggregateOutputType = {
    id: number
    userId: number
    woodTypeId: number
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WoodCalculationAvgAggregateInputType = {
    thickness?: true
    width?: true
    length?: true
    pricePerPlank?: true
    volumeM3?: true
    planksPerM3?: true
    pricePerM3?: true
  }

  export type WoodCalculationSumAggregateInputType = {
    thickness?: true
    width?: true
    length?: true
    pricePerPlank?: true
    volumeM3?: true
    planksPerM3?: true
    pricePerM3?: true
  }

  export type WoodCalculationMinAggregateInputType = {
    id?: true
    userId?: true
    woodTypeId?: true
    thickness?: true
    width?: true
    length?: true
    pricePerPlank?: true
    volumeM3?: true
    planksPerM3?: true
    pricePerM3?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WoodCalculationMaxAggregateInputType = {
    id?: true
    userId?: true
    woodTypeId?: true
    thickness?: true
    width?: true
    length?: true
    pricePerPlank?: true
    volumeM3?: true
    planksPerM3?: true
    pricePerM3?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WoodCalculationCountAggregateInputType = {
    id?: true
    userId?: true
    woodTypeId?: true
    thickness?: true
    width?: true
    length?: true
    pricePerPlank?: true
    volumeM3?: true
    planksPerM3?: true
    pricePerM3?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WoodCalculationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WoodCalculation to aggregate.
     */
    where?: WoodCalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodCalculations to fetch.
     */
    orderBy?: WoodCalculationOrderByWithRelationInput | WoodCalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WoodCalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodCalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodCalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WoodCalculations
    **/
    _count?: true | WoodCalculationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WoodCalculationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WoodCalculationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WoodCalculationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WoodCalculationMaxAggregateInputType
  }

  export type GetWoodCalculationAggregateType<T extends WoodCalculationAggregateArgs> = {
        [P in keyof T & keyof AggregateWoodCalculation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWoodCalculation[P]>
      : GetScalarType<T[P], AggregateWoodCalculation[P]>
  }




  export type WoodCalculationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WoodCalculationWhereInput
    orderBy?: WoodCalculationOrderByWithAggregationInput | WoodCalculationOrderByWithAggregationInput[]
    by: WoodCalculationScalarFieldEnum[] | WoodCalculationScalarFieldEnum
    having?: WoodCalculationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WoodCalculationCountAggregateInputType | true
    _avg?: WoodCalculationAvgAggregateInputType
    _sum?: WoodCalculationSumAggregateInputType
    _min?: WoodCalculationMinAggregateInputType
    _max?: WoodCalculationMaxAggregateInputType
  }

  export type WoodCalculationGroupByOutputType = {
    id: string
    userId: string
    woodTypeId: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: WoodCalculationCountAggregateOutputType | null
    _avg: WoodCalculationAvgAggregateOutputType | null
    _sum: WoodCalculationSumAggregateOutputType | null
    _min: WoodCalculationMinAggregateOutputType | null
    _max: WoodCalculationMaxAggregateOutputType | null
  }

  type GetWoodCalculationGroupByPayload<T extends WoodCalculationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WoodCalculationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WoodCalculationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WoodCalculationGroupByOutputType[P]>
            : GetScalarType<T[P], WoodCalculationGroupByOutputType[P]>
        }
      >
    >


  export type WoodCalculationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    woodTypeId?: boolean
    thickness?: boolean
    width?: boolean
    length?: boolean
    pricePerPlank?: boolean
    volumeM3?: boolean
    planksPerM3?: boolean
    pricePerM3?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["woodCalculation"]>

  export type WoodCalculationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    woodTypeId?: boolean
    thickness?: boolean
    width?: boolean
    length?: boolean
    pricePerPlank?: boolean
    volumeM3?: boolean
    planksPerM3?: boolean
    pricePerM3?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["woodCalculation"]>

  export type WoodCalculationSelectScalar = {
    id?: boolean
    userId?: boolean
    woodTypeId?: boolean
    thickness?: boolean
    width?: boolean
    length?: boolean
    pricePerPlank?: boolean
    volumeM3?: boolean
    planksPerM3?: boolean
    pricePerM3?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WoodCalculationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }
  export type WoodCalculationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }

  export type $WoodCalculationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WoodCalculation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      woodType: Prisma.$WoodTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      woodTypeId: string
      thickness: number
      width: number
      length: number
      pricePerPlank: number
      volumeM3: number
      planksPerM3: number
      pricePerM3: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["woodCalculation"]>
    composites: {}
  }

  type WoodCalculationGetPayload<S extends boolean | null | undefined | WoodCalculationDefaultArgs> = $Result.GetResult<Prisma.$WoodCalculationPayload, S>

  type WoodCalculationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WoodCalculationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WoodCalculationCountAggregateInputType | true
    }

  export interface WoodCalculationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WoodCalculation'], meta: { name: 'WoodCalculation' } }
    /**
     * Find zero or one WoodCalculation that matches the filter.
     * @param {WoodCalculationFindUniqueArgs} args - Arguments to find a WoodCalculation
     * @example
     * // Get one WoodCalculation
     * const woodCalculation = await prisma.woodCalculation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WoodCalculationFindUniqueArgs>(args: SelectSubset<T, WoodCalculationFindUniqueArgs<ExtArgs>>): Prisma__WoodCalculationClient<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WoodCalculation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WoodCalculationFindUniqueOrThrowArgs} args - Arguments to find a WoodCalculation
     * @example
     * // Get one WoodCalculation
     * const woodCalculation = await prisma.woodCalculation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WoodCalculationFindUniqueOrThrowArgs>(args: SelectSubset<T, WoodCalculationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WoodCalculationClient<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WoodCalculation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodCalculationFindFirstArgs} args - Arguments to find a WoodCalculation
     * @example
     * // Get one WoodCalculation
     * const woodCalculation = await prisma.woodCalculation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WoodCalculationFindFirstArgs>(args?: SelectSubset<T, WoodCalculationFindFirstArgs<ExtArgs>>): Prisma__WoodCalculationClient<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WoodCalculation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodCalculationFindFirstOrThrowArgs} args - Arguments to find a WoodCalculation
     * @example
     * // Get one WoodCalculation
     * const woodCalculation = await prisma.woodCalculation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WoodCalculationFindFirstOrThrowArgs>(args?: SelectSubset<T, WoodCalculationFindFirstOrThrowArgs<ExtArgs>>): Prisma__WoodCalculationClient<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WoodCalculations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodCalculationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WoodCalculations
     * const woodCalculations = await prisma.woodCalculation.findMany()
     * 
     * // Get first 10 WoodCalculations
     * const woodCalculations = await prisma.woodCalculation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const woodCalculationWithIdOnly = await prisma.woodCalculation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WoodCalculationFindManyArgs>(args?: SelectSubset<T, WoodCalculationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WoodCalculation.
     * @param {WoodCalculationCreateArgs} args - Arguments to create a WoodCalculation.
     * @example
     * // Create one WoodCalculation
     * const WoodCalculation = await prisma.woodCalculation.create({
     *   data: {
     *     // ... data to create a WoodCalculation
     *   }
     * })
     * 
     */
    create<T extends WoodCalculationCreateArgs>(args: SelectSubset<T, WoodCalculationCreateArgs<ExtArgs>>): Prisma__WoodCalculationClient<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WoodCalculations.
     * @param {WoodCalculationCreateManyArgs} args - Arguments to create many WoodCalculations.
     * @example
     * // Create many WoodCalculations
     * const woodCalculation = await prisma.woodCalculation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WoodCalculationCreateManyArgs>(args?: SelectSubset<T, WoodCalculationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WoodCalculations and returns the data saved in the database.
     * @param {WoodCalculationCreateManyAndReturnArgs} args - Arguments to create many WoodCalculations.
     * @example
     * // Create many WoodCalculations
     * const woodCalculation = await prisma.woodCalculation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WoodCalculations and only return the `id`
     * const woodCalculationWithIdOnly = await prisma.woodCalculation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WoodCalculationCreateManyAndReturnArgs>(args?: SelectSubset<T, WoodCalculationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WoodCalculation.
     * @param {WoodCalculationDeleteArgs} args - Arguments to delete one WoodCalculation.
     * @example
     * // Delete one WoodCalculation
     * const WoodCalculation = await prisma.woodCalculation.delete({
     *   where: {
     *     // ... filter to delete one WoodCalculation
     *   }
     * })
     * 
     */
    delete<T extends WoodCalculationDeleteArgs>(args: SelectSubset<T, WoodCalculationDeleteArgs<ExtArgs>>): Prisma__WoodCalculationClient<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WoodCalculation.
     * @param {WoodCalculationUpdateArgs} args - Arguments to update one WoodCalculation.
     * @example
     * // Update one WoodCalculation
     * const woodCalculation = await prisma.woodCalculation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WoodCalculationUpdateArgs>(args: SelectSubset<T, WoodCalculationUpdateArgs<ExtArgs>>): Prisma__WoodCalculationClient<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WoodCalculations.
     * @param {WoodCalculationDeleteManyArgs} args - Arguments to filter WoodCalculations to delete.
     * @example
     * // Delete a few WoodCalculations
     * const { count } = await prisma.woodCalculation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WoodCalculationDeleteManyArgs>(args?: SelectSubset<T, WoodCalculationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WoodCalculations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodCalculationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WoodCalculations
     * const woodCalculation = await prisma.woodCalculation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WoodCalculationUpdateManyArgs>(args: SelectSubset<T, WoodCalculationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WoodCalculation.
     * @param {WoodCalculationUpsertArgs} args - Arguments to update or create a WoodCalculation.
     * @example
     * // Update or create a WoodCalculation
     * const woodCalculation = await prisma.woodCalculation.upsert({
     *   create: {
     *     // ... data to create a WoodCalculation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WoodCalculation we want to update
     *   }
     * })
     */
    upsert<T extends WoodCalculationUpsertArgs>(args: SelectSubset<T, WoodCalculationUpsertArgs<ExtArgs>>): Prisma__WoodCalculationClient<$Result.GetResult<Prisma.$WoodCalculationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WoodCalculations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodCalculationCountArgs} args - Arguments to filter WoodCalculations to count.
     * @example
     * // Count the number of WoodCalculations
     * const count = await prisma.woodCalculation.count({
     *   where: {
     *     // ... the filter for the WoodCalculations we want to count
     *   }
     * })
    **/
    count<T extends WoodCalculationCountArgs>(
      args?: Subset<T, WoodCalculationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WoodCalculationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WoodCalculation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodCalculationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WoodCalculationAggregateArgs>(args: Subset<T, WoodCalculationAggregateArgs>): Prisma.PrismaPromise<GetWoodCalculationAggregateType<T>>

    /**
     * Group by WoodCalculation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodCalculationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WoodCalculationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WoodCalculationGroupByArgs['orderBy'] }
        : { orderBy?: WoodCalculationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WoodCalculationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWoodCalculationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WoodCalculation model
   */
  readonly fields: WoodCalculationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WoodCalculation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WoodCalculationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    woodType<T extends WoodTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WoodTypeDefaultArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WoodCalculation model
   */ 
  interface WoodCalculationFieldRefs {
    readonly id: FieldRef<"WoodCalculation", 'String'>
    readonly userId: FieldRef<"WoodCalculation", 'String'>
    readonly woodTypeId: FieldRef<"WoodCalculation", 'String'>
    readonly thickness: FieldRef<"WoodCalculation", 'Float'>
    readonly width: FieldRef<"WoodCalculation", 'Float'>
    readonly length: FieldRef<"WoodCalculation", 'Float'>
    readonly pricePerPlank: FieldRef<"WoodCalculation", 'Float'>
    readonly volumeM3: FieldRef<"WoodCalculation", 'Float'>
    readonly planksPerM3: FieldRef<"WoodCalculation", 'Float'>
    readonly pricePerM3: FieldRef<"WoodCalculation", 'Float'>
    readonly notes: FieldRef<"WoodCalculation", 'String'>
    readonly createdAt: FieldRef<"WoodCalculation", 'DateTime'>
    readonly updatedAt: FieldRef<"WoodCalculation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WoodCalculation findUnique
   */
  export type WoodCalculationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * Filter, which WoodCalculation to fetch.
     */
    where: WoodCalculationWhereUniqueInput
  }

  /**
   * WoodCalculation findUniqueOrThrow
   */
  export type WoodCalculationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * Filter, which WoodCalculation to fetch.
     */
    where: WoodCalculationWhereUniqueInput
  }

  /**
   * WoodCalculation findFirst
   */
  export type WoodCalculationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * Filter, which WoodCalculation to fetch.
     */
    where?: WoodCalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodCalculations to fetch.
     */
    orderBy?: WoodCalculationOrderByWithRelationInput | WoodCalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WoodCalculations.
     */
    cursor?: WoodCalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodCalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodCalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WoodCalculations.
     */
    distinct?: WoodCalculationScalarFieldEnum | WoodCalculationScalarFieldEnum[]
  }

  /**
   * WoodCalculation findFirstOrThrow
   */
  export type WoodCalculationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * Filter, which WoodCalculation to fetch.
     */
    where?: WoodCalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodCalculations to fetch.
     */
    orderBy?: WoodCalculationOrderByWithRelationInput | WoodCalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WoodCalculations.
     */
    cursor?: WoodCalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodCalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodCalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WoodCalculations.
     */
    distinct?: WoodCalculationScalarFieldEnum | WoodCalculationScalarFieldEnum[]
  }

  /**
   * WoodCalculation findMany
   */
  export type WoodCalculationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * Filter, which WoodCalculations to fetch.
     */
    where?: WoodCalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodCalculations to fetch.
     */
    orderBy?: WoodCalculationOrderByWithRelationInput | WoodCalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WoodCalculations.
     */
    cursor?: WoodCalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodCalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodCalculations.
     */
    skip?: number
    distinct?: WoodCalculationScalarFieldEnum | WoodCalculationScalarFieldEnum[]
  }

  /**
   * WoodCalculation create
   */
  export type WoodCalculationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * The data needed to create a WoodCalculation.
     */
    data: XOR<WoodCalculationCreateInput, WoodCalculationUncheckedCreateInput>
  }

  /**
   * WoodCalculation createMany
   */
  export type WoodCalculationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WoodCalculations.
     */
    data: WoodCalculationCreateManyInput | WoodCalculationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WoodCalculation createManyAndReturn
   */
  export type WoodCalculationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WoodCalculations.
     */
    data: WoodCalculationCreateManyInput | WoodCalculationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WoodCalculation update
   */
  export type WoodCalculationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * The data needed to update a WoodCalculation.
     */
    data: XOR<WoodCalculationUpdateInput, WoodCalculationUncheckedUpdateInput>
    /**
     * Choose, which WoodCalculation to update.
     */
    where: WoodCalculationWhereUniqueInput
  }

  /**
   * WoodCalculation updateMany
   */
  export type WoodCalculationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WoodCalculations.
     */
    data: XOR<WoodCalculationUpdateManyMutationInput, WoodCalculationUncheckedUpdateManyInput>
    /**
     * Filter which WoodCalculations to update
     */
    where?: WoodCalculationWhereInput
  }

  /**
   * WoodCalculation upsert
   */
  export type WoodCalculationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * The filter to search for the WoodCalculation to update in case it exists.
     */
    where: WoodCalculationWhereUniqueInput
    /**
     * In case the WoodCalculation found by the `where` argument doesn't exist, create a new WoodCalculation with this data.
     */
    create: XOR<WoodCalculationCreateInput, WoodCalculationUncheckedCreateInput>
    /**
     * In case the WoodCalculation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WoodCalculationUpdateInput, WoodCalculationUncheckedUpdateInput>
  }

  /**
   * WoodCalculation delete
   */
  export type WoodCalculationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
    /**
     * Filter which WoodCalculation to delete.
     */
    where: WoodCalculationWhereUniqueInput
  }

  /**
   * WoodCalculation deleteMany
   */
  export type WoodCalculationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WoodCalculations to delete
     */
    where?: WoodCalculationWhereInput
  }

  /**
   * WoodCalculation without action
   */
  export type WoodCalculationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodCalculation
     */
    select?: WoodCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodCalculationInclude<ExtArgs> | null
  }


  /**
   * Model WoodReceipt
   */

  export type AggregateWoodReceipt = {
    _count: WoodReceiptCountAggregateOutputType | null
    _avg: WoodReceiptAvgAggregateOutputType | null
    _sum: WoodReceiptSumAggregateOutputType | null
    _min: WoodReceiptMinAggregateOutputType | null
    _max: WoodReceiptMaxAggregateOutputType | null
  }

  export type WoodReceiptAvgAggregateOutputType = {
    estimatedAmount: number | null
    estimatedVolumeM3: number | null
    estimatedPieces: number | null
    actualVolumeM3: number | null
    actualPieces: number | null
  }

  export type WoodReceiptSumAggregateOutputType = {
    estimatedAmount: number | null
    estimatedVolumeM3: number | null
    estimatedPieces: number | null
    actualVolumeM3: number | null
    actualPieces: number | null
  }

  export type WoodReceiptMinAggregateOutputType = {
    id: string | null
    woodTypeId: string | null
    supplier: string | null
    receiptDate: Date | null
    lotNumber: string | null
    purchaseOrder: string | null
    status: string | null
    woodFormat: string | null
    notes: string | null
    estimatedAmount: number | null
    estimatedVolumeM3: number | null
    estimatedPieces: number | null
    actualVolumeM3: number | null
    actualPieces: number | null
    receiptConfirmedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WoodReceiptMaxAggregateOutputType = {
    id: string | null
    woodTypeId: string | null
    supplier: string | null
    receiptDate: Date | null
    lotNumber: string | null
    purchaseOrder: string | null
    status: string | null
    woodFormat: string | null
    notes: string | null
    estimatedAmount: number | null
    estimatedVolumeM3: number | null
    estimatedPieces: number | null
    actualVolumeM3: number | null
    actualPieces: number | null
    receiptConfirmedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WoodReceiptCountAggregateOutputType = {
    id: number
    woodTypeId: number
    supplier: number
    receiptDate: number
    lotNumber: number
    purchaseOrder: number
    status: number
    woodFormat: number
    notes: number
    estimatedAmount: number
    estimatedVolumeM3: number
    estimatedPieces: number
    actualVolumeM3: number
    actualPieces: number
    receiptConfirmedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WoodReceiptAvgAggregateInputType = {
    estimatedAmount?: true
    estimatedVolumeM3?: true
    estimatedPieces?: true
    actualVolumeM3?: true
    actualPieces?: true
  }

  export type WoodReceiptSumAggregateInputType = {
    estimatedAmount?: true
    estimatedVolumeM3?: true
    estimatedPieces?: true
    actualVolumeM3?: true
    actualPieces?: true
  }

  export type WoodReceiptMinAggregateInputType = {
    id?: true
    woodTypeId?: true
    supplier?: true
    receiptDate?: true
    lotNumber?: true
    purchaseOrder?: true
    status?: true
    woodFormat?: true
    notes?: true
    estimatedAmount?: true
    estimatedVolumeM3?: true
    estimatedPieces?: true
    actualVolumeM3?: true
    actualPieces?: true
    receiptConfirmedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WoodReceiptMaxAggregateInputType = {
    id?: true
    woodTypeId?: true
    supplier?: true
    receiptDate?: true
    lotNumber?: true
    purchaseOrder?: true
    status?: true
    woodFormat?: true
    notes?: true
    estimatedAmount?: true
    estimatedVolumeM3?: true
    estimatedPieces?: true
    actualVolumeM3?: true
    actualPieces?: true
    receiptConfirmedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WoodReceiptCountAggregateInputType = {
    id?: true
    woodTypeId?: true
    supplier?: true
    receiptDate?: true
    lotNumber?: true
    purchaseOrder?: true
    status?: true
    woodFormat?: true
    notes?: true
    estimatedAmount?: true
    estimatedVolumeM3?: true
    estimatedPieces?: true
    actualVolumeM3?: true
    actualPieces?: true
    receiptConfirmedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WoodReceiptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WoodReceipt to aggregate.
     */
    where?: WoodReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodReceipts to fetch.
     */
    orderBy?: WoodReceiptOrderByWithRelationInput | WoodReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WoodReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WoodReceipts
    **/
    _count?: true | WoodReceiptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WoodReceiptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WoodReceiptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WoodReceiptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WoodReceiptMaxAggregateInputType
  }

  export type GetWoodReceiptAggregateType<T extends WoodReceiptAggregateArgs> = {
        [P in keyof T & keyof AggregateWoodReceipt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWoodReceipt[P]>
      : GetScalarType<T[P], AggregateWoodReceipt[P]>
  }




  export type WoodReceiptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WoodReceiptWhereInput
    orderBy?: WoodReceiptOrderByWithAggregationInput | WoodReceiptOrderByWithAggregationInput[]
    by: WoodReceiptScalarFieldEnum[] | WoodReceiptScalarFieldEnum
    having?: WoodReceiptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WoodReceiptCountAggregateInputType | true
    _avg?: WoodReceiptAvgAggregateInputType
    _sum?: WoodReceiptSumAggregateInputType
    _min?: WoodReceiptMinAggregateInputType
    _max?: WoodReceiptMaxAggregateInputType
  }

  export type WoodReceiptGroupByOutputType = {
    id: string
    woodTypeId: string
    supplier: string
    receiptDate: Date
    lotNumber: string
    purchaseOrder: string | null
    status: string
    woodFormat: string
    notes: string | null
    estimatedAmount: number
    estimatedVolumeM3: number | null
    estimatedPieces: number | null
    actualVolumeM3: number | null
    actualPieces: number | null
    receiptConfirmedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: WoodReceiptCountAggregateOutputType | null
    _avg: WoodReceiptAvgAggregateOutputType | null
    _sum: WoodReceiptSumAggregateOutputType | null
    _min: WoodReceiptMinAggregateOutputType | null
    _max: WoodReceiptMaxAggregateOutputType | null
  }

  type GetWoodReceiptGroupByPayload<T extends WoodReceiptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WoodReceiptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WoodReceiptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WoodReceiptGroupByOutputType[P]>
            : GetScalarType<T[P], WoodReceiptGroupByOutputType[P]>
        }
      >
    >


  export type WoodReceiptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    woodTypeId?: boolean
    supplier?: boolean
    receiptDate?: boolean
    lotNumber?: boolean
    purchaseOrder?: boolean
    status?: boolean
    woodFormat?: boolean
    notes?: boolean
    estimatedAmount?: boolean
    estimatedVolumeM3?: boolean
    estimatedPieces?: boolean
    actualVolumeM3?: boolean
    actualPieces?: boolean
    receiptConfirmedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["woodReceipt"]>

  export type WoodReceiptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    woodTypeId?: boolean
    supplier?: boolean
    receiptDate?: boolean
    lotNumber?: boolean
    purchaseOrder?: boolean
    status?: boolean
    woodFormat?: boolean
    notes?: boolean
    estimatedAmount?: boolean
    estimatedVolumeM3?: boolean
    estimatedPieces?: boolean
    actualVolumeM3?: boolean
    actualPieces?: boolean
    receiptConfirmedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["woodReceipt"]>

  export type WoodReceiptSelectScalar = {
    id?: boolean
    woodTypeId?: boolean
    supplier?: boolean
    receiptDate?: boolean
    lotNumber?: boolean
    purchaseOrder?: boolean
    status?: boolean
    woodFormat?: boolean
    notes?: boolean
    estimatedAmount?: boolean
    estimatedVolumeM3?: boolean
    estimatedPieces?: boolean
    actualVolumeM3?: boolean
    actualPieces?: boolean
    receiptConfirmedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WoodReceiptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }
  export type WoodReceiptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }

  export type $WoodReceiptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WoodReceipt"
    objects: {
      woodType: Prisma.$WoodTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      woodTypeId: string
      supplier: string
      receiptDate: Date
      lotNumber: string
      purchaseOrder: string | null
      status: string
      woodFormat: string
      notes: string | null
      estimatedAmount: number
      estimatedVolumeM3: number | null
      estimatedPieces: number | null
      actualVolumeM3: number | null
      actualPieces: number | null
      receiptConfirmedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["woodReceipt"]>
    composites: {}
  }

  type WoodReceiptGetPayload<S extends boolean | null | undefined | WoodReceiptDefaultArgs> = $Result.GetResult<Prisma.$WoodReceiptPayload, S>

  type WoodReceiptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WoodReceiptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WoodReceiptCountAggregateInputType | true
    }

  export interface WoodReceiptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WoodReceipt'], meta: { name: 'WoodReceipt' } }
    /**
     * Find zero or one WoodReceipt that matches the filter.
     * @param {WoodReceiptFindUniqueArgs} args - Arguments to find a WoodReceipt
     * @example
     * // Get one WoodReceipt
     * const woodReceipt = await prisma.woodReceipt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WoodReceiptFindUniqueArgs>(args: SelectSubset<T, WoodReceiptFindUniqueArgs<ExtArgs>>): Prisma__WoodReceiptClient<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WoodReceipt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WoodReceiptFindUniqueOrThrowArgs} args - Arguments to find a WoodReceipt
     * @example
     * // Get one WoodReceipt
     * const woodReceipt = await prisma.woodReceipt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WoodReceiptFindUniqueOrThrowArgs>(args: SelectSubset<T, WoodReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WoodReceiptClient<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WoodReceipt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodReceiptFindFirstArgs} args - Arguments to find a WoodReceipt
     * @example
     * // Get one WoodReceipt
     * const woodReceipt = await prisma.woodReceipt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WoodReceiptFindFirstArgs>(args?: SelectSubset<T, WoodReceiptFindFirstArgs<ExtArgs>>): Prisma__WoodReceiptClient<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WoodReceipt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodReceiptFindFirstOrThrowArgs} args - Arguments to find a WoodReceipt
     * @example
     * // Get one WoodReceipt
     * const woodReceipt = await prisma.woodReceipt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WoodReceiptFindFirstOrThrowArgs>(args?: SelectSubset<T, WoodReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma__WoodReceiptClient<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WoodReceipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WoodReceipts
     * const woodReceipts = await prisma.woodReceipt.findMany()
     * 
     * // Get first 10 WoodReceipts
     * const woodReceipts = await prisma.woodReceipt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const woodReceiptWithIdOnly = await prisma.woodReceipt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WoodReceiptFindManyArgs>(args?: SelectSubset<T, WoodReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WoodReceipt.
     * @param {WoodReceiptCreateArgs} args - Arguments to create a WoodReceipt.
     * @example
     * // Create one WoodReceipt
     * const WoodReceipt = await prisma.woodReceipt.create({
     *   data: {
     *     // ... data to create a WoodReceipt
     *   }
     * })
     * 
     */
    create<T extends WoodReceiptCreateArgs>(args: SelectSubset<T, WoodReceiptCreateArgs<ExtArgs>>): Prisma__WoodReceiptClient<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WoodReceipts.
     * @param {WoodReceiptCreateManyArgs} args - Arguments to create many WoodReceipts.
     * @example
     * // Create many WoodReceipts
     * const woodReceipt = await prisma.woodReceipt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WoodReceiptCreateManyArgs>(args?: SelectSubset<T, WoodReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WoodReceipts and returns the data saved in the database.
     * @param {WoodReceiptCreateManyAndReturnArgs} args - Arguments to create many WoodReceipts.
     * @example
     * // Create many WoodReceipts
     * const woodReceipt = await prisma.woodReceipt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WoodReceipts and only return the `id`
     * const woodReceiptWithIdOnly = await prisma.woodReceipt.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WoodReceiptCreateManyAndReturnArgs>(args?: SelectSubset<T, WoodReceiptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WoodReceipt.
     * @param {WoodReceiptDeleteArgs} args - Arguments to delete one WoodReceipt.
     * @example
     * // Delete one WoodReceipt
     * const WoodReceipt = await prisma.woodReceipt.delete({
     *   where: {
     *     // ... filter to delete one WoodReceipt
     *   }
     * })
     * 
     */
    delete<T extends WoodReceiptDeleteArgs>(args: SelectSubset<T, WoodReceiptDeleteArgs<ExtArgs>>): Prisma__WoodReceiptClient<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WoodReceipt.
     * @param {WoodReceiptUpdateArgs} args - Arguments to update one WoodReceipt.
     * @example
     * // Update one WoodReceipt
     * const woodReceipt = await prisma.woodReceipt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WoodReceiptUpdateArgs>(args: SelectSubset<T, WoodReceiptUpdateArgs<ExtArgs>>): Prisma__WoodReceiptClient<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WoodReceipts.
     * @param {WoodReceiptDeleteManyArgs} args - Arguments to filter WoodReceipts to delete.
     * @example
     * // Delete a few WoodReceipts
     * const { count } = await prisma.woodReceipt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WoodReceiptDeleteManyArgs>(args?: SelectSubset<T, WoodReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WoodReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodReceiptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WoodReceipts
     * const woodReceipt = await prisma.woodReceipt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WoodReceiptUpdateManyArgs>(args: SelectSubset<T, WoodReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WoodReceipt.
     * @param {WoodReceiptUpsertArgs} args - Arguments to update or create a WoodReceipt.
     * @example
     * // Update or create a WoodReceipt
     * const woodReceipt = await prisma.woodReceipt.upsert({
     *   create: {
     *     // ... data to create a WoodReceipt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WoodReceipt we want to update
     *   }
     * })
     */
    upsert<T extends WoodReceiptUpsertArgs>(args: SelectSubset<T, WoodReceiptUpsertArgs<ExtArgs>>): Prisma__WoodReceiptClient<$Result.GetResult<Prisma.$WoodReceiptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WoodReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodReceiptCountArgs} args - Arguments to filter WoodReceipts to count.
     * @example
     * // Count the number of WoodReceipts
     * const count = await prisma.woodReceipt.count({
     *   where: {
     *     // ... the filter for the WoodReceipts we want to count
     *   }
     * })
    **/
    count<T extends WoodReceiptCountArgs>(
      args?: Subset<T, WoodReceiptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WoodReceiptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WoodReceipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WoodReceiptAggregateArgs>(args: Subset<T, WoodReceiptAggregateArgs>): Prisma.PrismaPromise<GetWoodReceiptAggregateType<T>>

    /**
     * Group by WoodReceipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WoodReceiptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WoodReceiptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WoodReceiptGroupByArgs['orderBy'] }
        : { orderBy?: WoodReceiptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WoodReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWoodReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WoodReceipt model
   */
  readonly fields: WoodReceiptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WoodReceipt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WoodReceiptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    woodType<T extends WoodTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WoodTypeDefaultArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WoodReceipt model
   */ 
  interface WoodReceiptFieldRefs {
    readonly id: FieldRef<"WoodReceipt", 'String'>
    readonly woodTypeId: FieldRef<"WoodReceipt", 'String'>
    readonly supplier: FieldRef<"WoodReceipt", 'String'>
    readonly receiptDate: FieldRef<"WoodReceipt", 'DateTime'>
    readonly lotNumber: FieldRef<"WoodReceipt", 'String'>
    readonly purchaseOrder: FieldRef<"WoodReceipt", 'String'>
    readonly status: FieldRef<"WoodReceipt", 'String'>
    readonly woodFormat: FieldRef<"WoodReceipt", 'String'>
    readonly notes: FieldRef<"WoodReceipt", 'String'>
    readonly estimatedAmount: FieldRef<"WoodReceipt", 'Float'>
    readonly estimatedVolumeM3: FieldRef<"WoodReceipt", 'Float'>
    readonly estimatedPieces: FieldRef<"WoodReceipt", 'Int'>
    readonly actualVolumeM3: FieldRef<"WoodReceipt", 'Float'>
    readonly actualPieces: FieldRef<"WoodReceipt", 'Int'>
    readonly receiptConfirmedAt: FieldRef<"WoodReceipt", 'DateTime'>
    readonly createdAt: FieldRef<"WoodReceipt", 'DateTime'>
    readonly updatedAt: FieldRef<"WoodReceipt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WoodReceipt findUnique
   */
  export type WoodReceiptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * Filter, which WoodReceipt to fetch.
     */
    where: WoodReceiptWhereUniqueInput
  }

  /**
   * WoodReceipt findUniqueOrThrow
   */
  export type WoodReceiptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * Filter, which WoodReceipt to fetch.
     */
    where: WoodReceiptWhereUniqueInput
  }

  /**
   * WoodReceipt findFirst
   */
  export type WoodReceiptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * Filter, which WoodReceipt to fetch.
     */
    where?: WoodReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodReceipts to fetch.
     */
    orderBy?: WoodReceiptOrderByWithRelationInput | WoodReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WoodReceipts.
     */
    cursor?: WoodReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WoodReceipts.
     */
    distinct?: WoodReceiptScalarFieldEnum | WoodReceiptScalarFieldEnum[]
  }

  /**
   * WoodReceipt findFirstOrThrow
   */
  export type WoodReceiptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * Filter, which WoodReceipt to fetch.
     */
    where?: WoodReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodReceipts to fetch.
     */
    orderBy?: WoodReceiptOrderByWithRelationInput | WoodReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WoodReceipts.
     */
    cursor?: WoodReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WoodReceipts.
     */
    distinct?: WoodReceiptScalarFieldEnum | WoodReceiptScalarFieldEnum[]
  }

  /**
   * WoodReceipt findMany
   */
  export type WoodReceiptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * Filter, which WoodReceipts to fetch.
     */
    where?: WoodReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WoodReceipts to fetch.
     */
    orderBy?: WoodReceiptOrderByWithRelationInput | WoodReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WoodReceipts.
     */
    cursor?: WoodReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WoodReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WoodReceipts.
     */
    skip?: number
    distinct?: WoodReceiptScalarFieldEnum | WoodReceiptScalarFieldEnum[]
  }

  /**
   * WoodReceipt create
   */
  export type WoodReceiptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * The data needed to create a WoodReceipt.
     */
    data: XOR<WoodReceiptCreateInput, WoodReceiptUncheckedCreateInput>
  }

  /**
   * WoodReceipt createMany
   */
  export type WoodReceiptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WoodReceipts.
     */
    data: WoodReceiptCreateManyInput | WoodReceiptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WoodReceipt createManyAndReturn
   */
  export type WoodReceiptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WoodReceipts.
     */
    data: WoodReceiptCreateManyInput | WoodReceiptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WoodReceipt update
   */
  export type WoodReceiptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * The data needed to update a WoodReceipt.
     */
    data: XOR<WoodReceiptUpdateInput, WoodReceiptUncheckedUpdateInput>
    /**
     * Choose, which WoodReceipt to update.
     */
    where: WoodReceiptWhereUniqueInput
  }

  /**
   * WoodReceipt updateMany
   */
  export type WoodReceiptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WoodReceipts.
     */
    data: XOR<WoodReceiptUpdateManyMutationInput, WoodReceiptUncheckedUpdateManyInput>
    /**
     * Filter which WoodReceipts to update
     */
    where?: WoodReceiptWhereInput
  }

  /**
   * WoodReceipt upsert
   */
  export type WoodReceiptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * The filter to search for the WoodReceipt to update in case it exists.
     */
    where: WoodReceiptWhereUniqueInput
    /**
     * In case the WoodReceipt found by the `where` argument doesn't exist, create a new WoodReceipt with this data.
     */
    create: XOR<WoodReceiptCreateInput, WoodReceiptUncheckedCreateInput>
    /**
     * In case the WoodReceipt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WoodReceiptUpdateInput, WoodReceiptUncheckedUpdateInput>
  }

  /**
   * WoodReceipt delete
   */
  export type WoodReceiptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
    /**
     * Filter which WoodReceipt to delete.
     */
    where: WoodReceiptWhereUniqueInput
  }

  /**
   * WoodReceipt deleteMany
   */
  export type WoodReceiptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WoodReceipts to delete
     */
    where?: WoodReceiptWhereInput
  }

  /**
   * WoodReceipt without action
   */
  export type WoodReceiptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WoodReceipt
     */
    select?: WoodReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WoodReceiptInclude<ExtArgs> | null
  }


  /**
   * Model Operation
   */

  export type AggregateOperation = {
    _count: OperationCountAggregateOutputType | null
    _avg: OperationAvgAggregateOutputType | null
    _sum: OperationSumAggregateOutputType | null
    _min: OperationMinAggregateOutputType | null
    _max: OperationMaxAggregateOutputType | null
  }

  export type OperationAvgAggregateOutputType = {
    wastePercentage: number | null
  }

  export type OperationSumAggregateOutputType = {
    wastePercentage: number | null
  }

  export type OperationMinAggregateOutputType = {
    id: string | null
    serialNumber: string | null
    woodTypeId: string | null
    lotNumber: string | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    wastePercentage: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OperationMaxAggregateOutputType = {
    id: string | null
    serialNumber: string | null
    woodTypeId: string | null
    lotNumber: string | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    wastePercentage: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OperationCountAggregateOutputType = {
    id: number
    serialNumber: number
    woodTypeId: number
    lotNumber: number
    startTime: number
    endTime: number
    sleeperSizes: number
    plankSizes: number
    status: number
    wastePercentage: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OperationAvgAggregateInputType = {
    wastePercentage?: true
  }

  export type OperationSumAggregateInputType = {
    wastePercentage?: true
  }

  export type OperationMinAggregateInputType = {
    id?: true
    serialNumber?: true
    woodTypeId?: true
    lotNumber?: true
    startTime?: true
    endTime?: true
    status?: true
    wastePercentage?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OperationMaxAggregateInputType = {
    id?: true
    serialNumber?: true
    woodTypeId?: true
    lotNumber?: true
    startTime?: true
    endTime?: true
    status?: true
    wastePercentage?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OperationCountAggregateInputType = {
    id?: true
    serialNumber?: true
    woodTypeId?: true
    lotNumber?: true
    startTime?: true
    endTime?: true
    sleeperSizes?: true
    plankSizes?: true
    status?: true
    wastePercentage?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OperationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operation to aggregate.
     */
    where?: OperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operations to fetch.
     */
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Operations
    **/
    _count?: true | OperationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OperationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OperationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperationMaxAggregateInputType
  }

  export type GetOperationAggregateType<T extends OperationAggregateArgs> = {
        [P in keyof T & keyof AggregateOperation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperation[P]>
      : GetScalarType<T[P], AggregateOperation[P]>
  }




  export type OperationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationWhereInput
    orderBy?: OperationOrderByWithAggregationInput | OperationOrderByWithAggregationInput[]
    by: OperationScalarFieldEnum[] | OperationScalarFieldEnum
    having?: OperationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperationCountAggregateInputType | true
    _avg?: OperationAvgAggregateInputType
    _sum?: OperationSumAggregateInputType
    _min?: OperationMinAggregateInputType
    _max?: OperationMaxAggregateInputType
  }

  export type OperationGroupByOutputType = {
    id: string
    serialNumber: string
    woodTypeId: string
    lotNumber: string
    startTime: Date | null
    endTime: Date | null
    sleeperSizes: JsonValue
    plankSizes: JsonValue
    status: string
    wastePercentage: number | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: OperationCountAggregateOutputType | null
    _avg: OperationAvgAggregateOutputType | null
    _sum: OperationSumAggregateOutputType | null
    _min: OperationMinAggregateOutputType | null
    _max: OperationMaxAggregateOutputType | null
  }

  type GetOperationGroupByPayload<T extends OperationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperationGroupByOutputType[P]>
            : GetScalarType<T[P], OperationGroupByOutputType[P]>
        }
      >
    >


  export type OperationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serialNumber?: boolean
    woodTypeId?: boolean
    lotNumber?: boolean
    startTime?: boolean
    endTime?: boolean
    sleeperSizes?: boolean
    plankSizes?: boolean
    status?: boolean
    wastePercentage?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operation"]>

  export type OperationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serialNumber?: boolean
    woodTypeId?: boolean
    lotNumber?: boolean
    startTime?: boolean
    endTime?: boolean
    sleeperSizes?: boolean
    plankSizes?: boolean
    status?: boolean
    wastePercentage?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operation"]>

  export type OperationSelectScalar = {
    id?: boolean
    serialNumber?: boolean
    woodTypeId?: boolean
    lotNumber?: boolean
    startTime?: boolean
    endTime?: boolean
    sleeperSizes?: boolean
    plankSizes?: boolean
    status?: boolean
    wastePercentage?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OperationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }
  export type OperationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }

  export type $OperationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Operation"
    objects: {
      woodType: Prisma.$WoodTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      serialNumber: string
      woodTypeId: string
      lotNumber: string
      startTime: Date | null
      endTime: Date | null
      sleeperSizes: Prisma.JsonValue
      plankSizes: Prisma.JsonValue
      status: string
      wastePercentage: number | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["operation"]>
    composites: {}
  }

  type OperationGetPayload<S extends boolean | null | undefined | OperationDefaultArgs> = $Result.GetResult<Prisma.$OperationPayload, S>

  type OperationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OperationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OperationCountAggregateInputType | true
    }

  export interface OperationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operation'], meta: { name: 'Operation' } }
    /**
     * Find zero or one Operation that matches the filter.
     * @param {OperationFindUniqueArgs} args - Arguments to find a Operation
     * @example
     * // Get one Operation
     * const operation = await prisma.operation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperationFindUniqueArgs>(args: SelectSubset<T, OperationFindUniqueArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Operation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OperationFindUniqueOrThrowArgs} args - Arguments to find a Operation
     * @example
     * // Get one Operation
     * const operation = await prisma.operation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperationFindUniqueOrThrowArgs>(args: SelectSubset<T, OperationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Operation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationFindFirstArgs} args - Arguments to find a Operation
     * @example
     * // Get one Operation
     * const operation = await prisma.operation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperationFindFirstArgs>(args?: SelectSubset<T, OperationFindFirstArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Operation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationFindFirstOrThrowArgs} args - Arguments to find a Operation
     * @example
     * // Get one Operation
     * const operation = await prisma.operation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperationFindFirstOrThrowArgs>(args?: SelectSubset<T, OperationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Operations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Operations
     * const operations = await prisma.operation.findMany()
     * 
     * // Get first 10 Operations
     * const operations = await prisma.operation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operationWithIdOnly = await prisma.operation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperationFindManyArgs>(args?: SelectSubset<T, OperationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Operation.
     * @param {OperationCreateArgs} args - Arguments to create a Operation.
     * @example
     * // Create one Operation
     * const Operation = await prisma.operation.create({
     *   data: {
     *     // ... data to create a Operation
     *   }
     * })
     * 
     */
    create<T extends OperationCreateArgs>(args: SelectSubset<T, OperationCreateArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Operations.
     * @param {OperationCreateManyArgs} args - Arguments to create many Operations.
     * @example
     * // Create many Operations
     * const operation = await prisma.operation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperationCreateManyArgs>(args?: SelectSubset<T, OperationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Operations and returns the data saved in the database.
     * @param {OperationCreateManyAndReturnArgs} args - Arguments to create many Operations.
     * @example
     * // Create many Operations
     * const operation = await prisma.operation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Operations and only return the `id`
     * const operationWithIdOnly = await prisma.operation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperationCreateManyAndReturnArgs>(args?: SelectSubset<T, OperationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Operation.
     * @param {OperationDeleteArgs} args - Arguments to delete one Operation.
     * @example
     * // Delete one Operation
     * const Operation = await prisma.operation.delete({
     *   where: {
     *     // ... filter to delete one Operation
     *   }
     * })
     * 
     */
    delete<T extends OperationDeleteArgs>(args: SelectSubset<T, OperationDeleteArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Operation.
     * @param {OperationUpdateArgs} args - Arguments to update one Operation.
     * @example
     * // Update one Operation
     * const operation = await prisma.operation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperationUpdateArgs>(args: SelectSubset<T, OperationUpdateArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Operations.
     * @param {OperationDeleteManyArgs} args - Arguments to filter Operations to delete.
     * @example
     * // Delete a few Operations
     * const { count } = await prisma.operation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperationDeleteManyArgs>(args?: SelectSubset<T, OperationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Operations
     * const operation = await prisma.operation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperationUpdateManyArgs>(args: SelectSubset<T, OperationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Operation.
     * @param {OperationUpsertArgs} args - Arguments to update or create a Operation.
     * @example
     * // Update or create a Operation
     * const operation = await prisma.operation.upsert({
     *   create: {
     *     // ... data to create a Operation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Operation we want to update
     *   }
     * })
     */
    upsert<T extends OperationUpsertArgs>(args: SelectSubset<T, OperationUpsertArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Operations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationCountArgs} args - Arguments to filter Operations to count.
     * @example
     * // Count the number of Operations
     * const count = await prisma.operation.count({
     *   where: {
     *     // ... the filter for the Operations we want to count
     *   }
     * })
    **/
    count<T extends OperationCountArgs>(
      args?: Subset<T, OperationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Operation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperationAggregateArgs>(args: Subset<T, OperationAggregateArgs>): Prisma.PrismaPromise<GetOperationAggregateType<T>>

    /**
     * Group by Operation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperationGroupByArgs['orderBy'] }
        : { orderBy?: OperationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Operation model
   */
  readonly fields: OperationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Operation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    woodType<T extends WoodTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WoodTypeDefaultArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Operation model
   */ 
  interface OperationFieldRefs {
    readonly id: FieldRef<"Operation", 'String'>
    readonly serialNumber: FieldRef<"Operation", 'String'>
    readonly woodTypeId: FieldRef<"Operation", 'String'>
    readonly lotNumber: FieldRef<"Operation", 'String'>
    readonly startTime: FieldRef<"Operation", 'DateTime'>
    readonly endTime: FieldRef<"Operation", 'DateTime'>
    readonly sleeperSizes: FieldRef<"Operation", 'Json'>
    readonly plankSizes: FieldRef<"Operation", 'Json'>
    readonly status: FieldRef<"Operation", 'String'>
    readonly wastePercentage: FieldRef<"Operation", 'Float'>
    readonly notes: FieldRef<"Operation", 'String'>
    readonly createdAt: FieldRef<"Operation", 'DateTime'>
    readonly updatedAt: FieldRef<"Operation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Operation findUnique
   */
  export type OperationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operation to fetch.
     */
    where: OperationWhereUniqueInput
  }

  /**
   * Operation findUniqueOrThrow
   */
  export type OperationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operation to fetch.
     */
    where: OperationWhereUniqueInput
  }

  /**
   * Operation findFirst
   */
  export type OperationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operation to fetch.
     */
    where?: OperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operations to fetch.
     */
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operations.
     */
    cursor?: OperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operations.
     */
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * Operation findFirstOrThrow
   */
  export type OperationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operation to fetch.
     */
    where?: OperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operations to fetch.
     */
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operations.
     */
    cursor?: OperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operations.
     */
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * Operation findMany
   */
  export type OperationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operations to fetch.
     */
    where?: OperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operations to fetch.
     */
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Operations.
     */
    cursor?: OperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operations.
     */
    skip?: number
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * Operation create
   */
  export type OperationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * The data needed to create a Operation.
     */
    data: XOR<OperationCreateInput, OperationUncheckedCreateInput>
  }

  /**
   * Operation createMany
   */
  export type OperationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Operations.
     */
    data: OperationCreateManyInput | OperationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operation createManyAndReturn
   */
  export type OperationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Operations.
     */
    data: OperationCreateManyInput | OperationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Operation update
   */
  export type OperationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * The data needed to update a Operation.
     */
    data: XOR<OperationUpdateInput, OperationUncheckedUpdateInput>
    /**
     * Choose, which Operation to update.
     */
    where: OperationWhereUniqueInput
  }

  /**
   * Operation updateMany
   */
  export type OperationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Operations.
     */
    data: XOR<OperationUpdateManyMutationInput, OperationUncheckedUpdateManyInput>
    /**
     * Filter which Operations to update
     */
    where?: OperationWhereInput
  }

  /**
   * Operation upsert
   */
  export type OperationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * The filter to search for the Operation to update in case it exists.
     */
    where: OperationWhereUniqueInput
    /**
     * In case the Operation found by the `where` argument doesn't exist, create a new Operation with this data.
     */
    create: XOR<OperationCreateInput, OperationUncheckedCreateInput>
    /**
     * In case the Operation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperationUpdateInput, OperationUncheckedUpdateInput>
  }

  /**
   * Operation delete
   */
  export type OperationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter which Operation to delete.
     */
    where: OperationWhereUniqueInput
  }

  /**
   * Operation deleteMany
   */
  export type OperationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operations to delete
     */
    where?: OperationWhereInput
  }

  /**
   * Operation without action
   */
  export type OperationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
  }


  /**
   * Model DryingProcess
   */

  export type AggregateDryingProcess = {
    _count: DryingProcessCountAggregateOutputType | null
    _avg: DryingProcessAvgAggregateOutputType | null
    _sum: DryingProcessSumAggregateOutputType | null
    _min: DryingProcessMinAggregateOutputType | null
    _max: DryingProcessMaxAggregateOutputType | null
  }

  export type DryingProcessAvgAggregateOutputType = {
    thickness: number | null
    pieceCount: number | null
    startingHumidity: number | null
    startingElectricityUnits: number | null
    totalCost: number | null
  }

  export type DryingProcessSumAggregateOutputType = {
    thickness: number | null
    pieceCount: number | null
    startingHumidity: number | null
    startingElectricityUnits: number | null
    totalCost: number | null
  }

  export type DryingProcessMinAggregateOutputType = {
    id: string | null
    batchNumber: string | null
    woodTypeId: string | null
    thickness: number | null
    thicknessUnit: string | null
    pieceCount: number | null
    startingHumidity: number | null
    startingElectricityUnits: number | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    totalCost: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DryingProcessMaxAggregateOutputType = {
    id: string | null
    batchNumber: string | null
    woodTypeId: string | null
    thickness: number | null
    thicknessUnit: string | null
    pieceCount: number | null
    startingHumidity: number | null
    startingElectricityUnits: number | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    totalCost: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DryingProcessCountAggregateOutputType = {
    id: number
    batchNumber: number
    woodTypeId: number
    thickness: number
    thicknessUnit: number
    pieceCount: number
    startingHumidity: number
    startingElectricityUnits: number
    startTime: number
    endTime: number
    status: number
    totalCost: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DryingProcessAvgAggregateInputType = {
    thickness?: true
    pieceCount?: true
    startingHumidity?: true
    startingElectricityUnits?: true
    totalCost?: true
  }

  export type DryingProcessSumAggregateInputType = {
    thickness?: true
    pieceCount?: true
    startingHumidity?: true
    startingElectricityUnits?: true
    totalCost?: true
  }

  export type DryingProcessMinAggregateInputType = {
    id?: true
    batchNumber?: true
    woodTypeId?: true
    thickness?: true
    thicknessUnit?: true
    pieceCount?: true
    startingHumidity?: true
    startingElectricityUnits?: true
    startTime?: true
    endTime?: true
    status?: true
    totalCost?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DryingProcessMaxAggregateInputType = {
    id?: true
    batchNumber?: true
    woodTypeId?: true
    thickness?: true
    thicknessUnit?: true
    pieceCount?: true
    startingHumidity?: true
    startingElectricityUnits?: true
    startTime?: true
    endTime?: true
    status?: true
    totalCost?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DryingProcessCountAggregateInputType = {
    id?: true
    batchNumber?: true
    woodTypeId?: true
    thickness?: true
    thicknessUnit?: true
    pieceCount?: true
    startingHumidity?: true
    startingElectricityUnits?: true
    startTime?: true
    endTime?: true
    status?: true
    totalCost?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DryingProcessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DryingProcess to aggregate.
     */
    where?: DryingProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DryingProcesses to fetch.
     */
    orderBy?: DryingProcessOrderByWithRelationInput | DryingProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DryingProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DryingProcesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DryingProcesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DryingProcesses
    **/
    _count?: true | DryingProcessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DryingProcessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DryingProcessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DryingProcessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DryingProcessMaxAggregateInputType
  }

  export type GetDryingProcessAggregateType<T extends DryingProcessAggregateArgs> = {
        [P in keyof T & keyof AggregateDryingProcess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDryingProcess[P]>
      : GetScalarType<T[P], AggregateDryingProcess[P]>
  }




  export type DryingProcessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DryingProcessWhereInput
    orderBy?: DryingProcessOrderByWithAggregationInput | DryingProcessOrderByWithAggregationInput[]
    by: DryingProcessScalarFieldEnum[] | DryingProcessScalarFieldEnum
    having?: DryingProcessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DryingProcessCountAggregateInputType | true
    _avg?: DryingProcessAvgAggregateInputType
    _sum?: DryingProcessSumAggregateInputType
    _min?: DryingProcessMinAggregateInputType
    _max?: DryingProcessMaxAggregateInputType
  }

  export type DryingProcessGroupByOutputType = {
    id: string
    batchNumber: string
    woodTypeId: string
    thickness: number
    thicknessUnit: string
    pieceCount: number
    startingHumidity: number | null
    startingElectricityUnits: number | null
    startTime: Date
    endTime: Date | null
    status: string
    totalCost: number | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: DryingProcessCountAggregateOutputType | null
    _avg: DryingProcessAvgAggregateOutputType | null
    _sum: DryingProcessSumAggregateOutputType | null
    _min: DryingProcessMinAggregateOutputType | null
    _max: DryingProcessMaxAggregateOutputType | null
  }

  type GetDryingProcessGroupByPayload<T extends DryingProcessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DryingProcessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DryingProcessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DryingProcessGroupByOutputType[P]>
            : GetScalarType<T[P], DryingProcessGroupByOutputType[P]>
        }
      >
    >


  export type DryingProcessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchNumber?: boolean
    woodTypeId?: boolean
    thickness?: boolean
    thicknessUnit?: boolean
    pieceCount?: boolean
    startingHumidity?: boolean
    startingElectricityUnits?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    totalCost?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
    readings?: boolean | DryingProcess$readingsArgs<ExtArgs>
    _count?: boolean | DryingProcessCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dryingProcess"]>

  export type DryingProcessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchNumber?: boolean
    woodTypeId?: boolean
    thickness?: boolean
    thicknessUnit?: boolean
    pieceCount?: boolean
    startingHumidity?: boolean
    startingElectricityUnits?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    totalCost?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dryingProcess"]>

  export type DryingProcessSelectScalar = {
    id?: boolean
    batchNumber?: boolean
    woodTypeId?: boolean
    thickness?: boolean
    thicknessUnit?: boolean
    pieceCount?: boolean
    startingHumidity?: boolean
    startingElectricityUnits?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    totalCost?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DryingProcessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
    readings?: boolean | DryingProcess$readingsArgs<ExtArgs>
    _count?: boolean | DryingProcessCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DryingProcessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    woodType?: boolean | WoodTypeDefaultArgs<ExtArgs>
  }

  export type $DryingProcessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DryingProcess"
    objects: {
      woodType: Prisma.$WoodTypePayload<ExtArgs>
      readings: Prisma.$DryingReadingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      batchNumber: string
      woodTypeId: string
      thickness: number
      thicknessUnit: string
      pieceCount: number
      startingHumidity: number | null
      startingElectricityUnits: number | null
      startTime: Date
      endTime: Date | null
      status: string
      totalCost: number | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dryingProcess"]>
    composites: {}
  }

  type DryingProcessGetPayload<S extends boolean | null | undefined | DryingProcessDefaultArgs> = $Result.GetResult<Prisma.$DryingProcessPayload, S>

  type DryingProcessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DryingProcessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DryingProcessCountAggregateInputType | true
    }

  export interface DryingProcessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DryingProcess'], meta: { name: 'DryingProcess' } }
    /**
     * Find zero or one DryingProcess that matches the filter.
     * @param {DryingProcessFindUniqueArgs} args - Arguments to find a DryingProcess
     * @example
     * // Get one DryingProcess
     * const dryingProcess = await prisma.dryingProcess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DryingProcessFindUniqueArgs>(args: SelectSubset<T, DryingProcessFindUniqueArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DryingProcess that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DryingProcessFindUniqueOrThrowArgs} args - Arguments to find a DryingProcess
     * @example
     * // Get one DryingProcess
     * const dryingProcess = await prisma.dryingProcess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DryingProcessFindUniqueOrThrowArgs>(args: SelectSubset<T, DryingProcessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DryingProcess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingProcessFindFirstArgs} args - Arguments to find a DryingProcess
     * @example
     * // Get one DryingProcess
     * const dryingProcess = await prisma.dryingProcess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DryingProcessFindFirstArgs>(args?: SelectSubset<T, DryingProcessFindFirstArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DryingProcess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingProcessFindFirstOrThrowArgs} args - Arguments to find a DryingProcess
     * @example
     * // Get one DryingProcess
     * const dryingProcess = await prisma.dryingProcess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DryingProcessFindFirstOrThrowArgs>(args?: SelectSubset<T, DryingProcessFindFirstOrThrowArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DryingProcesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingProcessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DryingProcesses
     * const dryingProcesses = await prisma.dryingProcess.findMany()
     * 
     * // Get first 10 DryingProcesses
     * const dryingProcesses = await prisma.dryingProcess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dryingProcessWithIdOnly = await prisma.dryingProcess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DryingProcessFindManyArgs>(args?: SelectSubset<T, DryingProcessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DryingProcess.
     * @param {DryingProcessCreateArgs} args - Arguments to create a DryingProcess.
     * @example
     * // Create one DryingProcess
     * const DryingProcess = await prisma.dryingProcess.create({
     *   data: {
     *     // ... data to create a DryingProcess
     *   }
     * })
     * 
     */
    create<T extends DryingProcessCreateArgs>(args: SelectSubset<T, DryingProcessCreateArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DryingProcesses.
     * @param {DryingProcessCreateManyArgs} args - Arguments to create many DryingProcesses.
     * @example
     * // Create many DryingProcesses
     * const dryingProcess = await prisma.dryingProcess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DryingProcessCreateManyArgs>(args?: SelectSubset<T, DryingProcessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DryingProcesses and returns the data saved in the database.
     * @param {DryingProcessCreateManyAndReturnArgs} args - Arguments to create many DryingProcesses.
     * @example
     * // Create many DryingProcesses
     * const dryingProcess = await prisma.dryingProcess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DryingProcesses and only return the `id`
     * const dryingProcessWithIdOnly = await prisma.dryingProcess.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DryingProcessCreateManyAndReturnArgs>(args?: SelectSubset<T, DryingProcessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DryingProcess.
     * @param {DryingProcessDeleteArgs} args - Arguments to delete one DryingProcess.
     * @example
     * // Delete one DryingProcess
     * const DryingProcess = await prisma.dryingProcess.delete({
     *   where: {
     *     // ... filter to delete one DryingProcess
     *   }
     * })
     * 
     */
    delete<T extends DryingProcessDeleteArgs>(args: SelectSubset<T, DryingProcessDeleteArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DryingProcess.
     * @param {DryingProcessUpdateArgs} args - Arguments to update one DryingProcess.
     * @example
     * // Update one DryingProcess
     * const dryingProcess = await prisma.dryingProcess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DryingProcessUpdateArgs>(args: SelectSubset<T, DryingProcessUpdateArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DryingProcesses.
     * @param {DryingProcessDeleteManyArgs} args - Arguments to filter DryingProcesses to delete.
     * @example
     * // Delete a few DryingProcesses
     * const { count } = await prisma.dryingProcess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DryingProcessDeleteManyArgs>(args?: SelectSubset<T, DryingProcessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DryingProcesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingProcessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DryingProcesses
     * const dryingProcess = await prisma.dryingProcess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DryingProcessUpdateManyArgs>(args: SelectSubset<T, DryingProcessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DryingProcess.
     * @param {DryingProcessUpsertArgs} args - Arguments to update or create a DryingProcess.
     * @example
     * // Update or create a DryingProcess
     * const dryingProcess = await prisma.dryingProcess.upsert({
     *   create: {
     *     // ... data to create a DryingProcess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DryingProcess we want to update
     *   }
     * })
     */
    upsert<T extends DryingProcessUpsertArgs>(args: SelectSubset<T, DryingProcessUpsertArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DryingProcesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingProcessCountArgs} args - Arguments to filter DryingProcesses to count.
     * @example
     * // Count the number of DryingProcesses
     * const count = await prisma.dryingProcess.count({
     *   where: {
     *     // ... the filter for the DryingProcesses we want to count
     *   }
     * })
    **/
    count<T extends DryingProcessCountArgs>(
      args?: Subset<T, DryingProcessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DryingProcessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DryingProcess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingProcessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DryingProcessAggregateArgs>(args: Subset<T, DryingProcessAggregateArgs>): Prisma.PrismaPromise<GetDryingProcessAggregateType<T>>

    /**
     * Group by DryingProcess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingProcessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DryingProcessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DryingProcessGroupByArgs['orderBy'] }
        : { orderBy?: DryingProcessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DryingProcessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDryingProcessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DryingProcess model
   */
  readonly fields: DryingProcessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DryingProcess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DryingProcessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    woodType<T extends WoodTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WoodTypeDefaultArgs<ExtArgs>>): Prisma__WoodTypeClient<$Result.GetResult<Prisma.$WoodTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    readings<T extends DryingProcess$readingsArgs<ExtArgs> = {}>(args?: Subset<T, DryingProcess$readingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DryingProcess model
   */ 
  interface DryingProcessFieldRefs {
    readonly id: FieldRef<"DryingProcess", 'String'>
    readonly batchNumber: FieldRef<"DryingProcess", 'String'>
    readonly woodTypeId: FieldRef<"DryingProcess", 'String'>
    readonly thickness: FieldRef<"DryingProcess", 'Float'>
    readonly thicknessUnit: FieldRef<"DryingProcess", 'String'>
    readonly pieceCount: FieldRef<"DryingProcess", 'Int'>
    readonly startingHumidity: FieldRef<"DryingProcess", 'Float'>
    readonly startingElectricityUnits: FieldRef<"DryingProcess", 'Float'>
    readonly startTime: FieldRef<"DryingProcess", 'DateTime'>
    readonly endTime: FieldRef<"DryingProcess", 'DateTime'>
    readonly status: FieldRef<"DryingProcess", 'String'>
    readonly totalCost: FieldRef<"DryingProcess", 'Float'>
    readonly notes: FieldRef<"DryingProcess", 'String'>
    readonly createdAt: FieldRef<"DryingProcess", 'DateTime'>
    readonly updatedAt: FieldRef<"DryingProcess", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DryingProcess findUnique
   */
  export type DryingProcessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * Filter, which DryingProcess to fetch.
     */
    where: DryingProcessWhereUniqueInput
  }

  /**
   * DryingProcess findUniqueOrThrow
   */
  export type DryingProcessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * Filter, which DryingProcess to fetch.
     */
    where: DryingProcessWhereUniqueInput
  }

  /**
   * DryingProcess findFirst
   */
  export type DryingProcessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * Filter, which DryingProcess to fetch.
     */
    where?: DryingProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DryingProcesses to fetch.
     */
    orderBy?: DryingProcessOrderByWithRelationInput | DryingProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DryingProcesses.
     */
    cursor?: DryingProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DryingProcesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DryingProcesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DryingProcesses.
     */
    distinct?: DryingProcessScalarFieldEnum | DryingProcessScalarFieldEnum[]
  }

  /**
   * DryingProcess findFirstOrThrow
   */
  export type DryingProcessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * Filter, which DryingProcess to fetch.
     */
    where?: DryingProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DryingProcesses to fetch.
     */
    orderBy?: DryingProcessOrderByWithRelationInput | DryingProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DryingProcesses.
     */
    cursor?: DryingProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DryingProcesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DryingProcesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DryingProcesses.
     */
    distinct?: DryingProcessScalarFieldEnum | DryingProcessScalarFieldEnum[]
  }

  /**
   * DryingProcess findMany
   */
  export type DryingProcessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * Filter, which DryingProcesses to fetch.
     */
    where?: DryingProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DryingProcesses to fetch.
     */
    orderBy?: DryingProcessOrderByWithRelationInput | DryingProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DryingProcesses.
     */
    cursor?: DryingProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DryingProcesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DryingProcesses.
     */
    skip?: number
    distinct?: DryingProcessScalarFieldEnum | DryingProcessScalarFieldEnum[]
  }

  /**
   * DryingProcess create
   */
  export type DryingProcessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * The data needed to create a DryingProcess.
     */
    data: XOR<DryingProcessCreateInput, DryingProcessUncheckedCreateInput>
  }

  /**
   * DryingProcess createMany
   */
  export type DryingProcessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DryingProcesses.
     */
    data: DryingProcessCreateManyInput | DryingProcessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DryingProcess createManyAndReturn
   */
  export type DryingProcessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DryingProcesses.
     */
    data: DryingProcessCreateManyInput | DryingProcessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DryingProcess update
   */
  export type DryingProcessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * The data needed to update a DryingProcess.
     */
    data: XOR<DryingProcessUpdateInput, DryingProcessUncheckedUpdateInput>
    /**
     * Choose, which DryingProcess to update.
     */
    where: DryingProcessWhereUniqueInput
  }

  /**
   * DryingProcess updateMany
   */
  export type DryingProcessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DryingProcesses.
     */
    data: XOR<DryingProcessUpdateManyMutationInput, DryingProcessUncheckedUpdateManyInput>
    /**
     * Filter which DryingProcesses to update
     */
    where?: DryingProcessWhereInput
  }

  /**
   * DryingProcess upsert
   */
  export type DryingProcessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * The filter to search for the DryingProcess to update in case it exists.
     */
    where: DryingProcessWhereUniqueInput
    /**
     * In case the DryingProcess found by the `where` argument doesn't exist, create a new DryingProcess with this data.
     */
    create: XOR<DryingProcessCreateInput, DryingProcessUncheckedCreateInput>
    /**
     * In case the DryingProcess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DryingProcessUpdateInput, DryingProcessUncheckedUpdateInput>
  }

  /**
   * DryingProcess delete
   */
  export type DryingProcessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
    /**
     * Filter which DryingProcess to delete.
     */
    where: DryingProcessWhereUniqueInput
  }

  /**
   * DryingProcess deleteMany
   */
  export type DryingProcessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DryingProcesses to delete
     */
    where?: DryingProcessWhereInput
  }

  /**
   * DryingProcess.readings
   */
  export type DryingProcess$readingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    where?: DryingReadingWhereInput
    orderBy?: DryingReadingOrderByWithRelationInput | DryingReadingOrderByWithRelationInput[]
    cursor?: DryingReadingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DryingReadingScalarFieldEnum | DryingReadingScalarFieldEnum[]
  }

  /**
   * DryingProcess without action
   */
  export type DryingProcessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingProcess
     */
    select?: DryingProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingProcessInclude<ExtArgs> | null
  }


  /**
   * Model DryingReading
   */

  export type AggregateDryingReading = {
    _count: DryingReadingCountAggregateOutputType | null
    _avg: DryingReadingAvgAggregateOutputType | null
    _sum: DryingReadingSumAggregateOutputType | null
    _min: DryingReadingMinAggregateOutputType | null
    _max: DryingReadingMaxAggregateOutputType | null
  }

  export type DryingReadingAvgAggregateOutputType = {
    electricityMeter: number | null
    humidity: number | null
  }

  export type DryingReadingSumAggregateOutputType = {
    electricityMeter: number | null
    humidity: number | null
  }

  export type DryingReadingMinAggregateOutputType = {
    id: string | null
    dryingProcessId: string | null
    readingTime: Date | null
    electricityMeter: number | null
    humidity: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DryingReadingMaxAggregateOutputType = {
    id: string | null
    dryingProcessId: string | null
    readingTime: Date | null
    electricityMeter: number | null
    humidity: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DryingReadingCountAggregateOutputType = {
    id: number
    dryingProcessId: number
    readingTime: number
    electricityMeter: number
    humidity: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DryingReadingAvgAggregateInputType = {
    electricityMeter?: true
    humidity?: true
  }

  export type DryingReadingSumAggregateInputType = {
    electricityMeter?: true
    humidity?: true
  }

  export type DryingReadingMinAggregateInputType = {
    id?: true
    dryingProcessId?: true
    readingTime?: true
    electricityMeter?: true
    humidity?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DryingReadingMaxAggregateInputType = {
    id?: true
    dryingProcessId?: true
    readingTime?: true
    electricityMeter?: true
    humidity?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DryingReadingCountAggregateInputType = {
    id?: true
    dryingProcessId?: true
    readingTime?: true
    electricityMeter?: true
    humidity?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DryingReadingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DryingReading to aggregate.
     */
    where?: DryingReadingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DryingReadings to fetch.
     */
    orderBy?: DryingReadingOrderByWithRelationInput | DryingReadingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DryingReadingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DryingReadings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DryingReadings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DryingReadings
    **/
    _count?: true | DryingReadingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DryingReadingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DryingReadingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DryingReadingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DryingReadingMaxAggregateInputType
  }

  export type GetDryingReadingAggregateType<T extends DryingReadingAggregateArgs> = {
        [P in keyof T & keyof AggregateDryingReading]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDryingReading[P]>
      : GetScalarType<T[P], AggregateDryingReading[P]>
  }




  export type DryingReadingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DryingReadingWhereInput
    orderBy?: DryingReadingOrderByWithAggregationInput | DryingReadingOrderByWithAggregationInput[]
    by: DryingReadingScalarFieldEnum[] | DryingReadingScalarFieldEnum
    having?: DryingReadingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DryingReadingCountAggregateInputType | true
    _avg?: DryingReadingAvgAggregateInputType
    _sum?: DryingReadingSumAggregateInputType
    _min?: DryingReadingMinAggregateInputType
    _max?: DryingReadingMaxAggregateInputType
  }

  export type DryingReadingGroupByOutputType = {
    id: string
    dryingProcessId: string
    readingTime: Date
    electricityMeter: number
    humidity: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: DryingReadingCountAggregateOutputType | null
    _avg: DryingReadingAvgAggregateOutputType | null
    _sum: DryingReadingSumAggregateOutputType | null
    _min: DryingReadingMinAggregateOutputType | null
    _max: DryingReadingMaxAggregateOutputType | null
  }

  type GetDryingReadingGroupByPayload<T extends DryingReadingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DryingReadingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DryingReadingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DryingReadingGroupByOutputType[P]>
            : GetScalarType<T[P], DryingReadingGroupByOutputType[P]>
        }
      >
    >


  export type DryingReadingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dryingProcessId?: boolean
    readingTime?: boolean
    electricityMeter?: boolean
    humidity?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dryingProcess?: boolean | DryingProcessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dryingReading"]>

  export type DryingReadingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dryingProcessId?: boolean
    readingTime?: boolean
    electricityMeter?: boolean
    humidity?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dryingProcess?: boolean | DryingProcessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dryingReading"]>

  export type DryingReadingSelectScalar = {
    id?: boolean
    dryingProcessId?: boolean
    readingTime?: boolean
    electricityMeter?: boolean
    humidity?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DryingReadingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dryingProcess?: boolean | DryingProcessDefaultArgs<ExtArgs>
  }
  export type DryingReadingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dryingProcess?: boolean | DryingProcessDefaultArgs<ExtArgs>
  }

  export type $DryingReadingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DryingReading"
    objects: {
      dryingProcess: Prisma.$DryingProcessPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dryingProcessId: string
      readingTime: Date
      electricityMeter: number
      humidity: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dryingReading"]>
    composites: {}
  }

  type DryingReadingGetPayload<S extends boolean | null | undefined | DryingReadingDefaultArgs> = $Result.GetResult<Prisma.$DryingReadingPayload, S>

  type DryingReadingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DryingReadingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DryingReadingCountAggregateInputType | true
    }

  export interface DryingReadingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DryingReading'], meta: { name: 'DryingReading' } }
    /**
     * Find zero or one DryingReading that matches the filter.
     * @param {DryingReadingFindUniqueArgs} args - Arguments to find a DryingReading
     * @example
     * // Get one DryingReading
     * const dryingReading = await prisma.dryingReading.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DryingReadingFindUniqueArgs>(args: SelectSubset<T, DryingReadingFindUniqueArgs<ExtArgs>>): Prisma__DryingReadingClient<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DryingReading that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DryingReadingFindUniqueOrThrowArgs} args - Arguments to find a DryingReading
     * @example
     * // Get one DryingReading
     * const dryingReading = await prisma.dryingReading.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DryingReadingFindUniqueOrThrowArgs>(args: SelectSubset<T, DryingReadingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DryingReadingClient<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DryingReading that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingReadingFindFirstArgs} args - Arguments to find a DryingReading
     * @example
     * // Get one DryingReading
     * const dryingReading = await prisma.dryingReading.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DryingReadingFindFirstArgs>(args?: SelectSubset<T, DryingReadingFindFirstArgs<ExtArgs>>): Prisma__DryingReadingClient<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DryingReading that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingReadingFindFirstOrThrowArgs} args - Arguments to find a DryingReading
     * @example
     * // Get one DryingReading
     * const dryingReading = await prisma.dryingReading.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DryingReadingFindFirstOrThrowArgs>(args?: SelectSubset<T, DryingReadingFindFirstOrThrowArgs<ExtArgs>>): Prisma__DryingReadingClient<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DryingReadings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingReadingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DryingReadings
     * const dryingReadings = await prisma.dryingReading.findMany()
     * 
     * // Get first 10 DryingReadings
     * const dryingReadings = await prisma.dryingReading.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dryingReadingWithIdOnly = await prisma.dryingReading.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DryingReadingFindManyArgs>(args?: SelectSubset<T, DryingReadingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DryingReading.
     * @param {DryingReadingCreateArgs} args - Arguments to create a DryingReading.
     * @example
     * // Create one DryingReading
     * const DryingReading = await prisma.dryingReading.create({
     *   data: {
     *     // ... data to create a DryingReading
     *   }
     * })
     * 
     */
    create<T extends DryingReadingCreateArgs>(args: SelectSubset<T, DryingReadingCreateArgs<ExtArgs>>): Prisma__DryingReadingClient<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DryingReadings.
     * @param {DryingReadingCreateManyArgs} args - Arguments to create many DryingReadings.
     * @example
     * // Create many DryingReadings
     * const dryingReading = await prisma.dryingReading.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DryingReadingCreateManyArgs>(args?: SelectSubset<T, DryingReadingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DryingReadings and returns the data saved in the database.
     * @param {DryingReadingCreateManyAndReturnArgs} args - Arguments to create many DryingReadings.
     * @example
     * // Create many DryingReadings
     * const dryingReading = await prisma.dryingReading.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DryingReadings and only return the `id`
     * const dryingReadingWithIdOnly = await prisma.dryingReading.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DryingReadingCreateManyAndReturnArgs>(args?: SelectSubset<T, DryingReadingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DryingReading.
     * @param {DryingReadingDeleteArgs} args - Arguments to delete one DryingReading.
     * @example
     * // Delete one DryingReading
     * const DryingReading = await prisma.dryingReading.delete({
     *   where: {
     *     // ... filter to delete one DryingReading
     *   }
     * })
     * 
     */
    delete<T extends DryingReadingDeleteArgs>(args: SelectSubset<T, DryingReadingDeleteArgs<ExtArgs>>): Prisma__DryingReadingClient<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DryingReading.
     * @param {DryingReadingUpdateArgs} args - Arguments to update one DryingReading.
     * @example
     * // Update one DryingReading
     * const dryingReading = await prisma.dryingReading.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DryingReadingUpdateArgs>(args: SelectSubset<T, DryingReadingUpdateArgs<ExtArgs>>): Prisma__DryingReadingClient<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DryingReadings.
     * @param {DryingReadingDeleteManyArgs} args - Arguments to filter DryingReadings to delete.
     * @example
     * // Delete a few DryingReadings
     * const { count } = await prisma.dryingReading.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DryingReadingDeleteManyArgs>(args?: SelectSubset<T, DryingReadingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DryingReadings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingReadingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DryingReadings
     * const dryingReading = await prisma.dryingReading.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DryingReadingUpdateManyArgs>(args: SelectSubset<T, DryingReadingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DryingReading.
     * @param {DryingReadingUpsertArgs} args - Arguments to update or create a DryingReading.
     * @example
     * // Update or create a DryingReading
     * const dryingReading = await prisma.dryingReading.upsert({
     *   create: {
     *     // ... data to create a DryingReading
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DryingReading we want to update
     *   }
     * })
     */
    upsert<T extends DryingReadingUpsertArgs>(args: SelectSubset<T, DryingReadingUpsertArgs<ExtArgs>>): Prisma__DryingReadingClient<$Result.GetResult<Prisma.$DryingReadingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DryingReadings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingReadingCountArgs} args - Arguments to filter DryingReadings to count.
     * @example
     * // Count the number of DryingReadings
     * const count = await prisma.dryingReading.count({
     *   where: {
     *     // ... the filter for the DryingReadings we want to count
     *   }
     * })
    **/
    count<T extends DryingReadingCountArgs>(
      args?: Subset<T, DryingReadingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DryingReadingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DryingReading.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingReadingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DryingReadingAggregateArgs>(args: Subset<T, DryingReadingAggregateArgs>): Prisma.PrismaPromise<GetDryingReadingAggregateType<T>>

    /**
     * Group by DryingReading.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DryingReadingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DryingReadingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DryingReadingGroupByArgs['orderBy'] }
        : { orderBy?: DryingReadingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DryingReadingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDryingReadingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DryingReading model
   */
  readonly fields: DryingReadingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DryingReading.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DryingReadingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dryingProcess<T extends DryingProcessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DryingProcessDefaultArgs<ExtArgs>>): Prisma__DryingProcessClient<$Result.GetResult<Prisma.$DryingProcessPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DryingReading model
   */ 
  interface DryingReadingFieldRefs {
    readonly id: FieldRef<"DryingReading", 'String'>
    readonly dryingProcessId: FieldRef<"DryingReading", 'String'>
    readonly readingTime: FieldRef<"DryingReading", 'DateTime'>
    readonly electricityMeter: FieldRef<"DryingReading", 'Float'>
    readonly humidity: FieldRef<"DryingReading", 'Float'>
    readonly notes: FieldRef<"DryingReading", 'String'>
    readonly createdAt: FieldRef<"DryingReading", 'DateTime'>
    readonly updatedAt: FieldRef<"DryingReading", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DryingReading findUnique
   */
  export type DryingReadingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * Filter, which DryingReading to fetch.
     */
    where: DryingReadingWhereUniqueInput
  }

  /**
   * DryingReading findUniqueOrThrow
   */
  export type DryingReadingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * Filter, which DryingReading to fetch.
     */
    where: DryingReadingWhereUniqueInput
  }

  /**
   * DryingReading findFirst
   */
  export type DryingReadingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * Filter, which DryingReading to fetch.
     */
    where?: DryingReadingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DryingReadings to fetch.
     */
    orderBy?: DryingReadingOrderByWithRelationInput | DryingReadingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DryingReadings.
     */
    cursor?: DryingReadingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DryingReadings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DryingReadings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DryingReadings.
     */
    distinct?: DryingReadingScalarFieldEnum | DryingReadingScalarFieldEnum[]
  }

  /**
   * DryingReading findFirstOrThrow
   */
  export type DryingReadingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * Filter, which DryingReading to fetch.
     */
    where?: DryingReadingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DryingReadings to fetch.
     */
    orderBy?: DryingReadingOrderByWithRelationInput | DryingReadingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DryingReadings.
     */
    cursor?: DryingReadingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DryingReadings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DryingReadings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DryingReadings.
     */
    distinct?: DryingReadingScalarFieldEnum | DryingReadingScalarFieldEnum[]
  }

  /**
   * DryingReading findMany
   */
  export type DryingReadingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * Filter, which DryingReadings to fetch.
     */
    where?: DryingReadingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DryingReadings to fetch.
     */
    orderBy?: DryingReadingOrderByWithRelationInput | DryingReadingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DryingReadings.
     */
    cursor?: DryingReadingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DryingReadings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DryingReadings.
     */
    skip?: number
    distinct?: DryingReadingScalarFieldEnum | DryingReadingScalarFieldEnum[]
  }

  /**
   * DryingReading create
   */
  export type DryingReadingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * The data needed to create a DryingReading.
     */
    data: XOR<DryingReadingCreateInput, DryingReadingUncheckedCreateInput>
  }

  /**
   * DryingReading createMany
   */
  export type DryingReadingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DryingReadings.
     */
    data: DryingReadingCreateManyInput | DryingReadingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DryingReading createManyAndReturn
   */
  export type DryingReadingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DryingReadings.
     */
    data: DryingReadingCreateManyInput | DryingReadingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DryingReading update
   */
  export type DryingReadingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * The data needed to update a DryingReading.
     */
    data: XOR<DryingReadingUpdateInput, DryingReadingUncheckedUpdateInput>
    /**
     * Choose, which DryingReading to update.
     */
    where: DryingReadingWhereUniqueInput
  }

  /**
   * DryingReading updateMany
   */
  export type DryingReadingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DryingReadings.
     */
    data: XOR<DryingReadingUpdateManyMutationInput, DryingReadingUncheckedUpdateManyInput>
    /**
     * Filter which DryingReadings to update
     */
    where?: DryingReadingWhereInput
  }

  /**
   * DryingReading upsert
   */
  export type DryingReadingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * The filter to search for the DryingReading to update in case it exists.
     */
    where: DryingReadingWhereUniqueInput
    /**
     * In case the DryingReading found by the `where` argument doesn't exist, create a new DryingReading with this data.
     */
    create: XOR<DryingReadingCreateInput, DryingReadingUncheckedCreateInput>
    /**
     * In case the DryingReading was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DryingReadingUpdateInput, DryingReadingUncheckedUpdateInput>
  }

  /**
   * DryingReading delete
   */
  export type DryingReadingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
    /**
     * Filter which DryingReading to delete.
     */
    where: DryingReadingWhereUniqueInput
  }

  /**
   * DryingReading deleteMany
   */
  export type DryingReadingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DryingReadings to delete
     */
    where?: DryingReadingWhereInput
  }

  /**
   * DryingReading without action
   */
  export type DryingReadingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DryingReading
     */
    select?: DryingReadingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DryingReadingInclude<ExtArgs> | null
  }


  /**
   * Model ReceiptDraft
   */

  export type AggregateReceiptDraft = {
    _count: ReceiptDraftCountAggregateOutputType | null
    _min: ReceiptDraftMinAggregateOutputType | null
    _max: ReceiptDraftMaxAggregateOutputType | null
  }

  export type ReceiptDraftMinAggregateOutputType = {
    id: string | null
    receiptId: string | null
    updatedAt: Date | null
    updatedBy: string | null
    createdAt: Date | null
  }

  export type ReceiptDraftMaxAggregateOutputType = {
    id: string | null
    receiptId: string | null
    updatedAt: Date | null
    updatedBy: string | null
    createdAt: Date | null
  }

  export type ReceiptDraftCountAggregateOutputType = {
    id: number
    receiptId: number
    measurements: number
    updatedAt: number
    updatedBy: number
    createdAt: number
    _all: number
  }


  export type ReceiptDraftMinAggregateInputType = {
    id?: true
    receiptId?: true
    updatedAt?: true
    updatedBy?: true
    createdAt?: true
  }

  export type ReceiptDraftMaxAggregateInputType = {
    id?: true
    receiptId?: true
    updatedAt?: true
    updatedBy?: true
    createdAt?: true
  }

  export type ReceiptDraftCountAggregateInputType = {
    id?: true
    receiptId?: true
    measurements?: true
    updatedAt?: true
    updatedBy?: true
    createdAt?: true
    _all?: true
  }

  export type ReceiptDraftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptDraft to aggregate.
     */
    where?: ReceiptDraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptDrafts to fetch.
     */
    orderBy?: ReceiptDraftOrderByWithRelationInput | ReceiptDraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptDraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptDrafts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptDrafts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptDrafts
    **/
    _count?: true | ReceiptDraftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptDraftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptDraftMaxAggregateInputType
  }

  export type GetReceiptDraftAggregateType<T extends ReceiptDraftAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptDraft]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptDraft[P]>
      : GetScalarType<T[P], AggregateReceiptDraft[P]>
  }




  export type ReceiptDraftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptDraftWhereInput
    orderBy?: ReceiptDraftOrderByWithAggregationInput | ReceiptDraftOrderByWithAggregationInput[]
    by: ReceiptDraftScalarFieldEnum[] | ReceiptDraftScalarFieldEnum
    having?: ReceiptDraftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptDraftCountAggregateInputType | true
    _min?: ReceiptDraftMinAggregateInputType
    _max?: ReceiptDraftMaxAggregateInputType
  }

  export type ReceiptDraftGroupByOutputType = {
    id: string
    receiptId: string
    measurements: JsonValue
    updatedAt: Date
    updatedBy: string
    createdAt: Date
    _count: ReceiptDraftCountAggregateOutputType | null
    _min: ReceiptDraftMinAggregateOutputType | null
    _max: ReceiptDraftMaxAggregateOutputType | null
  }

  type GetReceiptDraftGroupByPayload<T extends ReceiptDraftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptDraftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptDraftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptDraftGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptDraftGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptDraftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    measurements?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["receiptDraft"]>

  export type ReceiptDraftSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    measurements?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["receiptDraft"]>

  export type ReceiptDraftSelectScalar = {
    id?: boolean
    receiptId?: boolean
    measurements?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    createdAt?: boolean
  }


  export type $ReceiptDraftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptDraft"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptId: string
      measurements: Prisma.JsonValue
      updatedAt: Date
      updatedBy: string
      createdAt: Date
    }, ExtArgs["result"]["receiptDraft"]>
    composites: {}
  }

  type ReceiptDraftGetPayload<S extends boolean | null | undefined | ReceiptDraftDefaultArgs> = $Result.GetResult<Prisma.$ReceiptDraftPayload, S>

  type ReceiptDraftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReceiptDraftFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReceiptDraftCountAggregateInputType | true
    }

  export interface ReceiptDraftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptDraft'], meta: { name: 'ReceiptDraft' } }
    /**
     * Find zero or one ReceiptDraft that matches the filter.
     * @param {ReceiptDraftFindUniqueArgs} args - Arguments to find a ReceiptDraft
     * @example
     * // Get one ReceiptDraft
     * const receiptDraft = await prisma.receiptDraft.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptDraftFindUniqueArgs>(args: SelectSubset<T, ReceiptDraftFindUniqueArgs<ExtArgs>>): Prisma__ReceiptDraftClient<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReceiptDraft that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReceiptDraftFindUniqueOrThrowArgs} args - Arguments to find a ReceiptDraft
     * @example
     * // Get one ReceiptDraft
     * const receiptDraft = await prisma.receiptDraft.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptDraftFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptDraftFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptDraftClient<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReceiptDraft that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptDraftFindFirstArgs} args - Arguments to find a ReceiptDraft
     * @example
     * // Get one ReceiptDraft
     * const receiptDraft = await prisma.receiptDraft.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptDraftFindFirstArgs>(args?: SelectSubset<T, ReceiptDraftFindFirstArgs<ExtArgs>>): Prisma__ReceiptDraftClient<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReceiptDraft that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptDraftFindFirstOrThrowArgs} args - Arguments to find a ReceiptDraft
     * @example
     * // Get one ReceiptDraft
     * const receiptDraft = await prisma.receiptDraft.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptDraftFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptDraftFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptDraftClient<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReceiptDrafts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptDraftFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptDrafts
     * const receiptDrafts = await prisma.receiptDraft.findMany()
     * 
     * // Get first 10 ReceiptDrafts
     * const receiptDrafts = await prisma.receiptDraft.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptDraftWithIdOnly = await prisma.receiptDraft.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptDraftFindManyArgs>(args?: SelectSubset<T, ReceiptDraftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReceiptDraft.
     * @param {ReceiptDraftCreateArgs} args - Arguments to create a ReceiptDraft.
     * @example
     * // Create one ReceiptDraft
     * const ReceiptDraft = await prisma.receiptDraft.create({
     *   data: {
     *     // ... data to create a ReceiptDraft
     *   }
     * })
     * 
     */
    create<T extends ReceiptDraftCreateArgs>(args: SelectSubset<T, ReceiptDraftCreateArgs<ExtArgs>>): Prisma__ReceiptDraftClient<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReceiptDrafts.
     * @param {ReceiptDraftCreateManyArgs} args - Arguments to create many ReceiptDrafts.
     * @example
     * // Create many ReceiptDrafts
     * const receiptDraft = await prisma.receiptDraft.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptDraftCreateManyArgs>(args?: SelectSubset<T, ReceiptDraftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReceiptDrafts and returns the data saved in the database.
     * @param {ReceiptDraftCreateManyAndReturnArgs} args - Arguments to create many ReceiptDrafts.
     * @example
     * // Create many ReceiptDrafts
     * const receiptDraft = await prisma.receiptDraft.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReceiptDrafts and only return the `id`
     * const receiptDraftWithIdOnly = await prisma.receiptDraft.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptDraftCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptDraftCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ReceiptDraft.
     * @param {ReceiptDraftDeleteArgs} args - Arguments to delete one ReceiptDraft.
     * @example
     * // Delete one ReceiptDraft
     * const ReceiptDraft = await prisma.receiptDraft.delete({
     *   where: {
     *     // ... filter to delete one ReceiptDraft
     *   }
     * })
     * 
     */
    delete<T extends ReceiptDraftDeleteArgs>(args: SelectSubset<T, ReceiptDraftDeleteArgs<ExtArgs>>): Prisma__ReceiptDraftClient<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReceiptDraft.
     * @param {ReceiptDraftUpdateArgs} args - Arguments to update one ReceiptDraft.
     * @example
     * // Update one ReceiptDraft
     * const receiptDraft = await prisma.receiptDraft.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptDraftUpdateArgs>(args: SelectSubset<T, ReceiptDraftUpdateArgs<ExtArgs>>): Prisma__ReceiptDraftClient<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReceiptDrafts.
     * @param {ReceiptDraftDeleteManyArgs} args - Arguments to filter ReceiptDrafts to delete.
     * @example
     * // Delete a few ReceiptDrafts
     * const { count } = await prisma.receiptDraft.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptDraftDeleteManyArgs>(args?: SelectSubset<T, ReceiptDraftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptDrafts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptDraftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptDrafts
     * const receiptDraft = await prisma.receiptDraft.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptDraftUpdateManyArgs>(args: SelectSubset<T, ReceiptDraftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReceiptDraft.
     * @param {ReceiptDraftUpsertArgs} args - Arguments to update or create a ReceiptDraft.
     * @example
     * // Update or create a ReceiptDraft
     * const receiptDraft = await prisma.receiptDraft.upsert({
     *   create: {
     *     // ... data to create a ReceiptDraft
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptDraft we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptDraftUpsertArgs>(args: SelectSubset<T, ReceiptDraftUpsertArgs<ExtArgs>>): Prisma__ReceiptDraftClient<$Result.GetResult<Prisma.$ReceiptDraftPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReceiptDrafts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptDraftCountArgs} args - Arguments to filter ReceiptDrafts to count.
     * @example
     * // Count the number of ReceiptDrafts
     * const count = await prisma.receiptDraft.count({
     *   where: {
     *     // ... the filter for the ReceiptDrafts we want to count
     *   }
     * })
    **/
    count<T extends ReceiptDraftCountArgs>(
      args?: Subset<T, ReceiptDraftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptDraftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptDraft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptDraftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptDraftAggregateArgs>(args: Subset<T, ReceiptDraftAggregateArgs>): Prisma.PrismaPromise<GetReceiptDraftAggregateType<T>>

    /**
     * Group by ReceiptDraft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptDraftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptDraftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptDraftGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptDraftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptDraftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptDraftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptDraft model
   */
  readonly fields: ReceiptDraftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptDraft.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptDraftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptDraft model
   */ 
  interface ReceiptDraftFieldRefs {
    readonly id: FieldRef<"ReceiptDraft", 'String'>
    readonly receiptId: FieldRef<"ReceiptDraft", 'String'>
    readonly measurements: FieldRef<"ReceiptDraft", 'Json'>
    readonly updatedAt: FieldRef<"ReceiptDraft", 'DateTime'>
    readonly updatedBy: FieldRef<"ReceiptDraft", 'String'>
    readonly createdAt: FieldRef<"ReceiptDraft", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptDraft findUnique
   */
  export type ReceiptDraftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * Filter, which ReceiptDraft to fetch.
     */
    where: ReceiptDraftWhereUniqueInput
  }

  /**
   * ReceiptDraft findUniqueOrThrow
   */
  export type ReceiptDraftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * Filter, which ReceiptDraft to fetch.
     */
    where: ReceiptDraftWhereUniqueInput
  }

  /**
   * ReceiptDraft findFirst
   */
  export type ReceiptDraftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * Filter, which ReceiptDraft to fetch.
     */
    where?: ReceiptDraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptDrafts to fetch.
     */
    orderBy?: ReceiptDraftOrderByWithRelationInput | ReceiptDraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptDrafts.
     */
    cursor?: ReceiptDraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptDrafts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptDrafts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptDrafts.
     */
    distinct?: ReceiptDraftScalarFieldEnum | ReceiptDraftScalarFieldEnum[]
  }

  /**
   * ReceiptDraft findFirstOrThrow
   */
  export type ReceiptDraftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * Filter, which ReceiptDraft to fetch.
     */
    where?: ReceiptDraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptDrafts to fetch.
     */
    orderBy?: ReceiptDraftOrderByWithRelationInput | ReceiptDraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptDrafts.
     */
    cursor?: ReceiptDraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptDrafts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptDrafts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptDrafts.
     */
    distinct?: ReceiptDraftScalarFieldEnum | ReceiptDraftScalarFieldEnum[]
  }

  /**
   * ReceiptDraft findMany
   */
  export type ReceiptDraftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * Filter, which ReceiptDrafts to fetch.
     */
    where?: ReceiptDraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptDrafts to fetch.
     */
    orderBy?: ReceiptDraftOrderByWithRelationInput | ReceiptDraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptDrafts.
     */
    cursor?: ReceiptDraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptDrafts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptDrafts.
     */
    skip?: number
    distinct?: ReceiptDraftScalarFieldEnum | ReceiptDraftScalarFieldEnum[]
  }

  /**
   * ReceiptDraft create
   */
  export type ReceiptDraftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * The data needed to create a ReceiptDraft.
     */
    data: XOR<ReceiptDraftCreateInput, ReceiptDraftUncheckedCreateInput>
  }

  /**
   * ReceiptDraft createMany
   */
  export type ReceiptDraftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptDrafts.
     */
    data: ReceiptDraftCreateManyInput | ReceiptDraftCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptDraft createManyAndReturn
   */
  export type ReceiptDraftCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReceiptDrafts.
     */
    data: ReceiptDraftCreateManyInput | ReceiptDraftCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptDraft update
   */
  export type ReceiptDraftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * The data needed to update a ReceiptDraft.
     */
    data: XOR<ReceiptDraftUpdateInput, ReceiptDraftUncheckedUpdateInput>
    /**
     * Choose, which ReceiptDraft to update.
     */
    where: ReceiptDraftWhereUniqueInput
  }

  /**
   * ReceiptDraft updateMany
   */
  export type ReceiptDraftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptDrafts.
     */
    data: XOR<ReceiptDraftUpdateManyMutationInput, ReceiptDraftUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptDrafts to update
     */
    where?: ReceiptDraftWhereInput
  }

  /**
   * ReceiptDraft upsert
   */
  export type ReceiptDraftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * The filter to search for the ReceiptDraft to update in case it exists.
     */
    where: ReceiptDraftWhereUniqueInput
    /**
     * In case the ReceiptDraft found by the `where` argument doesn't exist, create a new ReceiptDraft with this data.
     */
    create: XOR<ReceiptDraftCreateInput, ReceiptDraftUncheckedCreateInput>
    /**
     * In case the ReceiptDraft was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptDraftUpdateInput, ReceiptDraftUncheckedUpdateInput>
  }

  /**
   * ReceiptDraft delete
   */
  export type ReceiptDraftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
    /**
     * Filter which ReceiptDraft to delete.
     */
    where: ReceiptDraftWhereUniqueInput
  }

  /**
   * ReceiptDraft deleteMany
   */
  export type ReceiptDraftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptDrafts to delete
     */
    where?: ReceiptDraftWhereInput
  }

  /**
   * ReceiptDraft without action
   */
  export type ReceiptDraftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptDraft
     */
    select?: ReceiptDraftSelect<ExtArgs> | null
  }


  /**
   * Model ReceiptHistory
   */

  export type AggregateReceiptHistory = {
    _count: ReceiptHistoryCountAggregateOutputType | null
    _min: ReceiptHistoryMinAggregateOutputType | null
    _max: ReceiptHistoryMaxAggregateOutputType | null
  }

  export type ReceiptHistoryMinAggregateOutputType = {
    id: string | null
    receiptId: string | null
    userId: string | null
    userName: string | null
    action: string | null
    details: string | null
    timestamp: Date | null
    createdAt: Date | null
  }

  export type ReceiptHistoryMaxAggregateOutputType = {
    id: string | null
    receiptId: string | null
    userId: string | null
    userName: string | null
    action: string | null
    details: string | null
    timestamp: Date | null
    createdAt: Date | null
  }

  export type ReceiptHistoryCountAggregateOutputType = {
    id: number
    receiptId: number
    userId: number
    userName: number
    action: number
    details: number
    timestamp: number
    createdAt: number
    _all: number
  }


  export type ReceiptHistoryMinAggregateInputType = {
    id?: true
    receiptId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    timestamp?: true
    createdAt?: true
  }

  export type ReceiptHistoryMaxAggregateInputType = {
    id?: true
    receiptId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    timestamp?: true
    createdAt?: true
  }

  export type ReceiptHistoryCountAggregateInputType = {
    id?: true
    receiptId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    timestamp?: true
    createdAt?: true
    _all?: true
  }

  export type ReceiptHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptHistory to aggregate.
     */
    where?: ReceiptHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptHistories to fetch.
     */
    orderBy?: ReceiptHistoryOrderByWithRelationInput | ReceiptHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptHistories
    **/
    _count?: true | ReceiptHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptHistoryMaxAggregateInputType
  }

  export type GetReceiptHistoryAggregateType<T extends ReceiptHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptHistory[P]>
      : GetScalarType<T[P], AggregateReceiptHistory[P]>
  }




  export type ReceiptHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptHistoryWhereInput
    orderBy?: ReceiptHistoryOrderByWithAggregationInput | ReceiptHistoryOrderByWithAggregationInput[]
    by: ReceiptHistoryScalarFieldEnum[] | ReceiptHistoryScalarFieldEnum
    having?: ReceiptHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptHistoryCountAggregateInputType | true
    _min?: ReceiptHistoryMinAggregateInputType
    _max?: ReceiptHistoryMaxAggregateInputType
  }

  export type ReceiptHistoryGroupByOutputType = {
    id: string
    receiptId: string
    userId: string
    userName: string
    action: string
    details: string
    timestamp: Date
    createdAt: Date
    _count: ReceiptHistoryCountAggregateOutputType | null
    _min: ReceiptHistoryMinAggregateOutputType | null
    _max: ReceiptHistoryMaxAggregateOutputType | null
  }

  type GetReceiptHistoryGroupByPayload<T extends ReceiptHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["receiptHistory"]>

  export type ReceiptHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["receiptHistory"]>

  export type ReceiptHistorySelectScalar = {
    id?: boolean
    receiptId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    createdAt?: boolean
  }


  export type $ReceiptHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptHistory"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptId: string
      userId: string
      userName: string
      action: string
      details: string
      timestamp: Date
      createdAt: Date
    }, ExtArgs["result"]["receiptHistory"]>
    composites: {}
  }

  type ReceiptHistoryGetPayload<S extends boolean | null | undefined | ReceiptHistoryDefaultArgs> = $Result.GetResult<Prisma.$ReceiptHistoryPayload, S>

  type ReceiptHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReceiptHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReceiptHistoryCountAggregateInputType | true
    }

  export interface ReceiptHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptHistory'], meta: { name: 'ReceiptHistory' } }
    /**
     * Find zero or one ReceiptHistory that matches the filter.
     * @param {ReceiptHistoryFindUniqueArgs} args - Arguments to find a ReceiptHistory
     * @example
     * // Get one ReceiptHistory
     * const receiptHistory = await prisma.receiptHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptHistoryFindUniqueArgs>(args: SelectSubset<T, ReceiptHistoryFindUniqueArgs<ExtArgs>>): Prisma__ReceiptHistoryClient<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReceiptHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReceiptHistoryFindUniqueOrThrowArgs} args - Arguments to find a ReceiptHistory
     * @example
     * // Get one ReceiptHistory
     * const receiptHistory = await prisma.receiptHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptHistoryClient<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReceiptHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptHistoryFindFirstArgs} args - Arguments to find a ReceiptHistory
     * @example
     * // Get one ReceiptHistory
     * const receiptHistory = await prisma.receiptHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptHistoryFindFirstArgs>(args?: SelectSubset<T, ReceiptHistoryFindFirstArgs<ExtArgs>>): Prisma__ReceiptHistoryClient<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReceiptHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptHistoryFindFirstOrThrowArgs} args - Arguments to find a ReceiptHistory
     * @example
     * // Get one ReceiptHistory
     * const receiptHistory = await prisma.receiptHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptHistoryClient<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReceiptHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptHistories
     * const receiptHistories = await prisma.receiptHistory.findMany()
     * 
     * // Get first 10 ReceiptHistories
     * const receiptHistories = await prisma.receiptHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptHistoryWithIdOnly = await prisma.receiptHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptHistoryFindManyArgs>(args?: SelectSubset<T, ReceiptHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReceiptHistory.
     * @param {ReceiptHistoryCreateArgs} args - Arguments to create a ReceiptHistory.
     * @example
     * // Create one ReceiptHistory
     * const ReceiptHistory = await prisma.receiptHistory.create({
     *   data: {
     *     // ... data to create a ReceiptHistory
     *   }
     * })
     * 
     */
    create<T extends ReceiptHistoryCreateArgs>(args: SelectSubset<T, ReceiptHistoryCreateArgs<ExtArgs>>): Prisma__ReceiptHistoryClient<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReceiptHistories.
     * @param {ReceiptHistoryCreateManyArgs} args - Arguments to create many ReceiptHistories.
     * @example
     * // Create many ReceiptHistories
     * const receiptHistory = await prisma.receiptHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptHistoryCreateManyArgs>(args?: SelectSubset<T, ReceiptHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReceiptHistories and returns the data saved in the database.
     * @param {ReceiptHistoryCreateManyAndReturnArgs} args - Arguments to create many ReceiptHistories.
     * @example
     * // Create many ReceiptHistories
     * const receiptHistory = await prisma.receiptHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReceiptHistories and only return the `id`
     * const receiptHistoryWithIdOnly = await prisma.receiptHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ReceiptHistory.
     * @param {ReceiptHistoryDeleteArgs} args - Arguments to delete one ReceiptHistory.
     * @example
     * // Delete one ReceiptHistory
     * const ReceiptHistory = await prisma.receiptHistory.delete({
     *   where: {
     *     // ... filter to delete one ReceiptHistory
     *   }
     * })
     * 
     */
    delete<T extends ReceiptHistoryDeleteArgs>(args: SelectSubset<T, ReceiptHistoryDeleteArgs<ExtArgs>>): Prisma__ReceiptHistoryClient<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReceiptHistory.
     * @param {ReceiptHistoryUpdateArgs} args - Arguments to update one ReceiptHistory.
     * @example
     * // Update one ReceiptHistory
     * const receiptHistory = await prisma.receiptHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptHistoryUpdateArgs>(args: SelectSubset<T, ReceiptHistoryUpdateArgs<ExtArgs>>): Prisma__ReceiptHistoryClient<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReceiptHistories.
     * @param {ReceiptHistoryDeleteManyArgs} args - Arguments to filter ReceiptHistories to delete.
     * @example
     * // Delete a few ReceiptHistories
     * const { count } = await prisma.receiptHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptHistoryDeleteManyArgs>(args?: SelectSubset<T, ReceiptHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptHistories
     * const receiptHistory = await prisma.receiptHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptHistoryUpdateManyArgs>(args: SelectSubset<T, ReceiptHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReceiptHistory.
     * @param {ReceiptHistoryUpsertArgs} args - Arguments to update or create a ReceiptHistory.
     * @example
     * // Update or create a ReceiptHistory
     * const receiptHistory = await prisma.receiptHistory.upsert({
     *   create: {
     *     // ... data to create a ReceiptHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptHistory we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptHistoryUpsertArgs>(args: SelectSubset<T, ReceiptHistoryUpsertArgs<ExtArgs>>): Prisma__ReceiptHistoryClient<$Result.GetResult<Prisma.$ReceiptHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReceiptHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptHistoryCountArgs} args - Arguments to filter ReceiptHistories to count.
     * @example
     * // Count the number of ReceiptHistories
     * const count = await prisma.receiptHistory.count({
     *   where: {
     *     // ... the filter for the ReceiptHistories we want to count
     *   }
     * })
    **/
    count<T extends ReceiptHistoryCountArgs>(
      args?: Subset<T, ReceiptHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptHistoryAggregateArgs>(args: Subset<T, ReceiptHistoryAggregateArgs>): Prisma.PrismaPromise<GetReceiptHistoryAggregateType<T>>

    /**
     * Group by ReceiptHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptHistory model
   */
  readonly fields: ReceiptHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptHistory model
   */ 
  interface ReceiptHistoryFieldRefs {
    readonly id: FieldRef<"ReceiptHistory", 'String'>
    readonly receiptId: FieldRef<"ReceiptHistory", 'String'>
    readonly userId: FieldRef<"ReceiptHistory", 'String'>
    readonly userName: FieldRef<"ReceiptHistory", 'String'>
    readonly action: FieldRef<"ReceiptHistory", 'String'>
    readonly details: FieldRef<"ReceiptHistory", 'String'>
    readonly timestamp: FieldRef<"ReceiptHistory", 'DateTime'>
    readonly createdAt: FieldRef<"ReceiptHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptHistory findUnique
   */
  export type ReceiptHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * Filter, which ReceiptHistory to fetch.
     */
    where: ReceiptHistoryWhereUniqueInput
  }

  /**
   * ReceiptHistory findUniqueOrThrow
   */
  export type ReceiptHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * Filter, which ReceiptHistory to fetch.
     */
    where: ReceiptHistoryWhereUniqueInput
  }

  /**
   * ReceiptHistory findFirst
   */
  export type ReceiptHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * Filter, which ReceiptHistory to fetch.
     */
    where?: ReceiptHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptHistories to fetch.
     */
    orderBy?: ReceiptHistoryOrderByWithRelationInput | ReceiptHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptHistories.
     */
    cursor?: ReceiptHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptHistories.
     */
    distinct?: ReceiptHistoryScalarFieldEnum | ReceiptHistoryScalarFieldEnum[]
  }

  /**
   * ReceiptHistory findFirstOrThrow
   */
  export type ReceiptHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * Filter, which ReceiptHistory to fetch.
     */
    where?: ReceiptHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptHistories to fetch.
     */
    orderBy?: ReceiptHistoryOrderByWithRelationInput | ReceiptHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptHistories.
     */
    cursor?: ReceiptHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptHistories.
     */
    distinct?: ReceiptHistoryScalarFieldEnum | ReceiptHistoryScalarFieldEnum[]
  }

  /**
   * ReceiptHistory findMany
   */
  export type ReceiptHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * Filter, which ReceiptHistories to fetch.
     */
    where?: ReceiptHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptHistories to fetch.
     */
    orderBy?: ReceiptHistoryOrderByWithRelationInput | ReceiptHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptHistories.
     */
    cursor?: ReceiptHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptHistories.
     */
    skip?: number
    distinct?: ReceiptHistoryScalarFieldEnum | ReceiptHistoryScalarFieldEnum[]
  }

  /**
   * ReceiptHistory create
   */
  export type ReceiptHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * The data needed to create a ReceiptHistory.
     */
    data: XOR<ReceiptHistoryCreateInput, ReceiptHistoryUncheckedCreateInput>
  }

  /**
   * ReceiptHistory createMany
   */
  export type ReceiptHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptHistories.
     */
    data: ReceiptHistoryCreateManyInput | ReceiptHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptHistory createManyAndReturn
   */
  export type ReceiptHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReceiptHistories.
     */
    data: ReceiptHistoryCreateManyInput | ReceiptHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptHistory update
   */
  export type ReceiptHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * The data needed to update a ReceiptHistory.
     */
    data: XOR<ReceiptHistoryUpdateInput, ReceiptHistoryUncheckedUpdateInput>
    /**
     * Choose, which ReceiptHistory to update.
     */
    where: ReceiptHistoryWhereUniqueInput
  }

  /**
   * ReceiptHistory updateMany
   */
  export type ReceiptHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptHistories.
     */
    data: XOR<ReceiptHistoryUpdateManyMutationInput, ReceiptHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptHistories to update
     */
    where?: ReceiptHistoryWhereInput
  }

  /**
   * ReceiptHistory upsert
   */
  export type ReceiptHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * The filter to search for the ReceiptHistory to update in case it exists.
     */
    where: ReceiptHistoryWhereUniqueInput
    /**
     * In case the ReceiptHistory found by the `where` argument doesn't exist, create a new ReceiptHistory with this data.
     */
    create: XOR<ReceiptHistoryCreateInput, ReceiptHistoryUncheckedCreateInput>
    /**
     * In case the ReceiptHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptHistoryUpdateInput, ReceiptHistoryUncheckedUpdateInput>
  }

  /**
   * ReceiptHistory delete
   */
  export type ReceiptHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
    /**
     * Filter which ReceiptHistory to delete.
     */
    where: ReceiptHistoryWhereUniqueInput
  }

  /**
   * ReceiptHistory deleteMany
   */
  export type ReceiptHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptHistories to delete
     */
    where?: ReceiptHistoryWhereInput
  }

  /**
   * ReceiptHistory without action
   */
  export type ReceiptHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptHistory
     */
    select?: ReceiptHistorySelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    ownerId: 'ownerId',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const FactoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FactoryScalarFieldEnum = (typeof FactoryScalarFieldEnum)[keyof typeof FactoryScalarFieldEnum]


  export const DesignScalarFieldEnum: {
    id: 'id',
    name: 'name',
    content: 'content',
    thumbnail: 'thumbnail',
    projectId: 'projectId',
    creatorId: 'creatorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DesignScalarFieldEnum = (typeof DesignScalarFieldEnum)[keyof typeof DesignScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    designId: 'designId',
    authorId: 'authorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const ElectricityRechargeScalarFieldEnum: {
    id: 'id',
    rechargeDate: 'rechargeDate',
    token: 'token',
    kwhAmount: 'kwhAmount',
    totalPaid: 'totalPaid',
    baseCost: 'baseCost',
    vat: 'vat',
    ewuraFee: 'ewuraFee',
    reaFee: 'reaFee',
    debtCollected: 'debtCollected',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ElectricityRechargeScalarFieldEnum = (typeof ElectricityRechargeScalarFieldEnum)[keyof typeof ElectricityRechargeScalarFieldEnum]


  export const WoodTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    density: 'density',
    grade: 'grade',
    origin: 'origin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WoodTypeScalarFieldEnum = (typeof WoodTypeScalarFieldEnum)[keyof typeof WoodTypeScalarFieldEnum]


  export const WoodCalculationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    woodTypeId: 'woodTypeId',
    thickness: 'thickness',
    width: 'width',
    length: 'length',
    pricePerPlank: 'pricePerPlank',
    volumeM3: 'volumeM3',
    planksPerM3: 'planksPerM3',
    pricePerM3: 'pricePerM3',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WoodCalculationScalarFieldEnum = (typeof WoodCalculationScalarFieldEnum)[keyof typeof WoodCalculationScalarFieldEnum]


  export const WoodReceiptScalarFieldEnum: {
    id: 'id',
    woodTypeId: 'woodTypeId',
    supplier: 'supplier',
    receiptDate: 'receiptDate',
    lotNumber: 'lotNumber',
    purchaseOrder: 'purchaseOrder',
    status: 'status',
    woodFormat: 'woodFormat',
    notes: 'notes',
    estimatedAmount: 'estimatedAmount',
    estimatedVolumeM3: 'estimatedVolumeM3',
    estimatedPieces: 'estimatedPieces',
    actualVolumeM3: 'actualVolumeM3',
    actualPieces: 'actualPieces',
    receiptConfirmedAt: 'receiptConfirmedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WoodReceiptScalarFieldEnum = (typeof WoodReceiptScalarFieldEnum)[keyof typeof WoodReceiptScalarFieldEnum]


  export const OperationScalarFieldEnum: {
    id: 'id',
    serialNumber: 'serialNumber',
    woodTypeId: 'woodTypeId',
    lotNumber: 'lotNumber',
    startTime: 'startTime',
    endTime: 'endTime',
    sleeperSizes: 'sleeperSizes',
    plankSizes: 'plankSizes',
    status: 'status',
    wastePercentage: 'wastePercentage',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OperationScalarFieldEnum = (typeof OperationScalarFieldEnum)[keyof typeof OperationScalarFieldEnum]


  export const DryingProcessScalarFieldEnum: {
    id: 'id',
    batchNumber: 'batchNumber',
    woodTypeId: 'woodTypeId',
    thickness: 'thickness',
    thicknessUnit: 'thicknessUnit',
    pieceCount: 'pieceCount',
    startingHumidity: 'startingHumidity',
    startingElectricityUnits: 'startingElectricityUnits',
    startTime: 'startTime',
    endTime: 'endTime',
    status: 'status',
    totalCost: 'totalCost',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DryingProcessScalarFieldEnum = (typeof DryingProcessScalarFieldEnum)[keyof typeof DryingProcessScalarFieldEnum]


  export const DryingReadingScalarFieldEnum: {
    id: 'id',
    dryingProcessId: 'dryingProcessId',
    readingTime: 'readingTime',
    electricityMeter: 'electricityMeter',
    humidity: 'humidity',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DryingReadingScalarFieldEnum = (typeof DryingReadingScalarFieldEnum)[keyof typeof DryingReadingScalarFieldEnum]


  export const ReceiptDraftScalarFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    measurements: 'measurements',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    createdAt: 'createdAt'
  };

  export type ReceiptDraftScalarFieldEnum = (typeof ReceiptDraftScalarFieldEnum)[keyof typeof ReceiptDraftScalarFieldEnum]


  export const ReceiptHistoryScalarFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    userId: 'userId',
    userName: 'userName',
    action: 'action',
    details: 'details',
    timestamp: 'timestamp',
    createdAt: 'createdAt'
  };

  export type ReceiptHistoryScalarFieldEnum = (typeof ReceiptHistoryScalarFieldEnum)[keyof typeof ReceiptHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    projects?: ProjectListRelationFilter
    factories?: FactoryListRelationFilter
    designs?: DesignListRelationFilter
    comments?: CommentListRelationFilter
    calculations?: WoodCalculationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projects?: ProjectOrderByRelationAggregateInput
    factories?: FactoryOrderByRelationAggregateInput
    designs?: DesignOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    calculations?: WoodCalculationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    projects?: ProjectListRelationFilter
    factories?: FactoryListRelationFilter
    designs?: DesignListRelationFilter
    comments?: CommentListRelationFilter
    calculations?: WoodCalculationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    ownerId?: StringFilter<"Project"> | string
    isPublic?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    designs?: DesignListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    designs?: DesignOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    ownerId?: StringFilter<"Project"> | string
    isPublic?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    designs?: DesignListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    ownerId?: StringWithAggregatesFilter<"Project"> | string
    isPublic?: BoolWithAggregatesFilter<"Project"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type FactoryWhereInput = {
    AND?: FactoryWhereInput | FactoryWhereInput[]
    OR?: FactoryWhereInput[]
    NOT?: FactoryWhereInput | FactoryWhereInput[]
    id?: StringFilter<"Factory"> | string
    name?: StringFilter<"Factory"> | string
    userId?: StringFilter<"Factory"> | string
    createdAt?: DateTimeFilter<"Factory"> | Date | string
    updatedAt?: DateTimeFilter<"Factory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FactoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FactoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FactoryWhereInput | FactoryWhereInput[]
    OR?: FactoryWhereInput[]
    NOT?: FactoryWhereInput | FactoryWhereInput[]
    name?: StringFilter<"Factory"> | string
    userId?: StringFilter<"Factory"> | string
    createdAt?: DateTimeFilter<"Factory"> | Date | string
    updatedAt?: DateTimeFilter<"Factory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FactoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FactoryCountOrderByAggregateInput
    _max?: FactoryMaxOrderByAggregateInput
    _min?: FactoryMinOrderByAggregateInput
  }

  export type FactoryScalarWhereWithAggregatesInput = {
    AND?: FactoryScalarWhereWithAggregatesInput | FactoryScalarWhereWithAggregatesInput[]
    OR?: FactoryScalarWhereWithAggregatesInput[]
    NOT?: FactoryScalarWhereWithAggregatesInput | FactoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Factory"> | string
    name?: StringWithAggregatesFilter<"Factory"> | string
    userId?: StringWithAggregatesFilter<"Factory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Factory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Factory"> | Date | string
  }

  export type DesignWhereInput = {
    AND?: DesignWhereInput | DesignWhereInput[]
    OR?: DesignWhereInput[]
    NOT?: DesignWhereInput | DesignWhereInput[]
    id?: StringFilter<"Design"> | string
    name?: StringFilter<"Design"> | string
    content?: JsonFilter<"Design">
    thumbnail?: StringNullableFilter<"Design"> | string | null
    projectId?: StringFilter<"Design"> | string
    creatorId?: StringFilter<"Design"> | string
    createdAt?: DateTimeFilter<"Design"> | Date | string
    updatedAt?: DateTimeFilter<"Design"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
  }

  export type DesignOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    content?: SortOrder
    thumbnail?: SortOrderInput | SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type DesignWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DesignWhereInput | DesignWhereInput[]
    OR?: DesignWhereInput[]
    NOT?: DesignWhereInput | DesignWhereInput[]
    name?: StringFilter<"Design"> | string
    content?: JsonFilter<"Design">
    thumbnail?: StringNullableFilter<"Design"> | string | null
    projectId?: StringFilter<"Design"> | string
    creatorId?: StringFilter<"Design"> | string
    createdAt?: DateTimeFilter<"Design"> | Date | string
    updatedAt?: DateTimeFilter<"Design"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
  }, "id">

  export type DesignOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    content?: SortOrder
    thumbnail?: SortOrderInput | SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DesignCountOrderByAggregateInput
    _max?: DesignMaxOrderByAggregateInput
    _min?: DesignMinOrderByAggregateInput
  }

  export type DesignScalarWhereWithAggregatesInput = {
    AND?: DesignScalarWhereWithAggregatesInput | DesignScalarWhereWithAggregatesInput[]
    OR?: DesignScalarWhereWithAggregatesInput[]
    NOT?: DesignScalarWhereWithAggregatesInput | DesignScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Design"> | string
    name?: StringWithAggregatesFilter<"Design"> | string
    content?: JsonWithAggregatesFilter<"Design">
    thumbnail?: StringNullableWithAggregatesFilter<"Design"> | string | null
    projectId?: StringWithAggregatesFilter<"Design"> | string
    creatorId?: StringWithAggregatesFilter<"Design"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Design"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Design"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    designId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    design?: XOR<DesignRelationFilter, DesignWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    designId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    design?: DesignOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    designId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    design?: XOR<DesignRelationFilter, DesignWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    designId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    designId?: StringWithAggregatesFilter<"Comment"> | string
    authorId?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: StringFilter<"Job"> | string
    name?: StringFilter<"Job"> | string
    status?: StringFilter<"Job"> | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    name?: StringFilter<"Job"> | string
    status?: StringFilter<"Job"> | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Job"> | string
    name?: StringWithAggregatesFilter<"Job"> | string
    status?: StringWithAggregatesFilter<"Job"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    id?: StringFilter<"Setting"> | string
    key?: StringFilter<"Setting"> | string
    value?: StringFilter<"Setting"> | string
    createdAt?: DateTimeFilter<"Setting"> | Date | string
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }

  export type SettingOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    value?: StringFilter<"Setting"> | string
    createdAt?: DateTimeFilter<"Setting"> | Date | string
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }, "id" | "key">

  export type SettingOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SettingCountOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Setting"> | string
    key?: StringWithAggregatesFilter<"Setting"> | string
    value?: StringWithAggregatesFilter<"Setting"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
  }

  export type ElectricityRechargeWhereInput = {
    AND?: ElectricityRechargeWhereInput | ElectricityRechargeWhereInput[]
    OR?: ElectricityRechargeWhereInput[]
    NOT?: ElectricityRechargeWhereInput | ElectricityRechargeWhereInput[]
    id?: StringFilter<"ElectricityRecharge"> | string
    rechargeDate?: DateTimeFilter<"ElectricityRecharge"> | Date | string
    token?: StringFilter<"ElectricityRecharge"> | string
    kwhAmount?: FloatFilter<"ElectricityRecharge"> | number
    totalPaid?: FloatFilter<"ElectricityRecharge"> | number
    baseCost?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    vat?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    ewuraFee?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    reaFee?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    debtCollected?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    notes?: StringNullableFilter<"ElectricityRecharge"> | string | null
    createdAt?: DateTimeFilter<"ElectricityRecharge"> | Date | string
    updatedAt?: DateTimeFilter<"ElectricityRecharge"> | Date | string
  }

  export type ElectricityRechargeOrderByWithRelationInput = {
    id?: SortOrder
    rechargeDate?: SortOrder
    token?: SortOrder
    kwhAmount?: SortOrder
    totalPaid?: SortOrder
    baseCost?: SortOrderInput | SortOrder
    vat?: SortOrderInput | SortOrder
    ewuraFee?: SortOrderInput | SortOrder
    reaFee?: SortOrderInput | SortOrder
    debtCollected?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ElectricityRechargeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ElectricityRechargeWhereInput | ElectricityRechargeWhereInput[]
    OR?: ElectricityRechargeWhereInput[]
    NOT?: ElectricityRechargeWhereInput | ElectricityRechargeWhereInput[]
    rechargeDate?: DateTimeFilter<"ElectricityRecharge"> | Date | string
    token?: StringFilter<"ElectricityRecharge"> | string
    kwhAmount?: FloatFilter<"ElectricityRecharge"> | number
    totalPaid?: FloatFilter<"ElectricityRecharge"> | number
    baseCost?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    vat?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    ewuraFee?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    reaFee?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    debtCollected?: FloatNullableFilter<"ElectricityRecharge"> | number | null
    notes?: StringNullableFilter<"ElectricityRecharge"> | string | null
    createdAt?: DateTimeFilter<"ElectricityRecharge"> | Date | string
    updatedAt?: DateTimeFilter<"ElectricityRecharge"> | Date | string
  }, "id">

  export type ElectricityRechargeOrderByWithAggregationInput = {
    id?: SortOrder
    rechargeDate?: SortOrder
    token?: SortOrder
    kwhAmount?: SortOrder
    totalPaid?: SortOrder
    baseCost?: SortOrderInput | SortOrder
    vat?: SortOrderInput | SortOrder
    ewuraFee?: SortOrderInput | SortOrder
    reaFee?: SortOrderInput | SortOrder
    debtCollected?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ElectricityRechargeCountOrderByAggregateInput
    _avg?: ElectricityRechargeAvgOrderByAggregateInput
    _max?: ElectricityRechargeMaxOrderByAggregateInput
    _min?: ElectricityRechargeMinOrderByAggregateInput
    _sum?: ElectricityRechargeSumOrderByAggregateInput
  }

  export type ElectricityRechargeScalarWhereWithAggregatesInput = {
    AND?: ElectricityRechargeScalarWhereWithAggregatesInput | ElectricityRechargeScalarWhereWithAggregatesInput[]
    OR?: ElectricityRechargeScalarWhereWithAggregatesInput[]
    NOT?: ElectricityRechargeScalarWhereWithAggregatesInput | ElectricityRechargeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ElectricityRecharge"> | string
    rechargeDate?: DateTimeWithAggregatesFilter<"ElectricityRecharge"> | Date | string
    token?: StringWithAggregatesFilter<"ElectricityRecharge"> | string
    kwhAmount?: FloatWithAggregatesFilter<"ElectricityRecharge"> | number
    totalPaid?: FloatWithAggregatesFilter<"ElectricityRecharge"> | number
    baseCost?: FloatNullableWithAggregatesFilter<"ElectricityRecharge"> | number | null
    vat?: FloatNullableWithAggregatesFilter<"ElectricityRecharge"> | number | null
    ewuraFee?: FloatNullableWithAggregatesFilter<"ElectricityRecharge"> | number | null
    reaFee?: FloatNullableWithAggregatesFilter<"ElectricityRecharge"> | number | null
    debtCollected?: FloatNullableWithAggregatesFilter<"ElectricityRecharge"> | number | null
    notes?: StringNullableWithAggregatesFilter<"ElectricityRecharge"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ElectricityRecharge"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ElectricityRecharge"> | Date | string
  }

  export type WoodTypeWhereInput = {
    AND?: WoodTypeWhereInput | WoodTypeWhereInput[]
    OR?: WoodTypeWhereInput[]
    NOT?: WoodTypeWhereInput | WoodTypeWhereInput[]
    id?: StringFilter<"WoodType"> | string
    name?: StringFilter<"WoodType"> | string
    description?: StringNullableFilter<"WoodType"> | string | null
    density?: FloatNullableFilter<"WoodType"> | number | null
    grade?: StringFilter<"WoodType"> | string
    origin?: StringNullableFilter<"WoodType"> | string | null
    createdAt?: DateTimeFilter<"WoodType"> | Date | string
    updatedAt?: DateTimeFilter<"WoodType"> | Date | string
    calculations?: WoodCalculationListRelationFilter
    receipts?: WoodReceiptListRelationFilter
    operations?: OperationListRelationFilter
    dryingProcesses?: DryingProcessListRelationFilter
  }

  export type WoodTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    density?: SortOrderInput | SortOrder
    grade?: SortOrder
    origin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    calculations?: WoodCalculationOrderByRelationAggregateInput
    receipts?: WoodReceiptOrderByRelationAggregateInput
    operations?: OperationOrderByRelationAggregateInput
    dryingProcesses?: DryingProcessOrderByRelationAggregateInput
  }

  export type WoodTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WoodTypeWhereInput | WoodTypeWhereInput[]
    OR?: WoodTypeWhereInput[]
    NOT?: WoodTypeWhereInput | WoodTypeWhereInput[]
    name?: StringFilter<"WoodType"> | string
    description?: StringNullableFilter<"WoodType"> | string | null
    density?: FloatNullableFilter<"WoodType"> | number | null
    grade?: StringFilter<"WoodType"> | string
    origin?: StringNullableFilter<"WoodType"> | string | null
    createdAt?: DateTimeFilter<"WoodType"> | Date | string
    updatedAt?: DateTimeFilter<"WoodType"> | Date | string
    calculations?: WoodCalculationListRelationFilter
    receipts?: WoodReceiptListRelationFilter
    operations?: OperationListRelationFilter
    dryingProcesses?: DryingProcessListRelationFilter
  }, "id">

  export type WoodTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    density?: SortOrderInput | SortOrder
    grade?: SortOrder
    origin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WoodTypeCountOrderByAggregateInput
    _avg?: WoodTypeAvgOrderByAggregateInput
    _max?: WoodTypeMaxOrderByAggregateInput
    _min?: WoodTypeMinOrderByAggregateInput
    _sum?: WoodTypeSumOrderByAggregateInput
  }

  export type WoodTypeScalarWhereWithAggregatesInput = {
    AND?: WoodTypeScalarWhereWithAggregatesInput | WoodTypeScalarWhereWithAggregatesInput[]
    OR?: WoodTypeScalarWhereWithAggregatesInput[]
    NOT?: WoodTypeScalarWhereWithAggregatesInput | WoodTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WoodType"> | string
    name?: StringWithAggregatesFilter<"WoodType"> | string
    description?: StringNullableWithAggregatesFilter<"WoodType"> | string | null
    density?: FloatNullableWithAggregatesFilter<"WoodType"> | number | null
    grade?: StringWithAggregatesFilter<"WoodType"> | string
    origin?: StringNullableWithAggregatesFilter<"WoodType"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WoodType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WoodType"> | Date | string
  }

  export type WoodCalculationWhereInput = {
    AND?: WoodCalculationWhereInput | WoodCalculationWhereInput[]
    OR?: WoodCalculationWhereInput[]
    NOT?: WoodCalculationWhereInput | WoodCalculationWhereInput[]
    id?: StringFilter<"WoodCalculation"> | string
    userId?: StringFilter<"WoodCalculation"> | string
    woodTypeId?: StringFilter<"WoodCalculation"> | string
    thickness?: FloatFilter<"WoodCalculation"> | number
    width?: FloatFilter<"WoodCalculation"> | number
    length?: FloatFilter<"WoodCalculation"> | number
    pricePerPlank?: FloatFilter<"WoodCalculation"> | number
    volumeM3?: FloatFilter<"WoodCalculation"> | number
    planksPerM3?: FloatFilter<"WoodCalculation"> | number
    pricePerM3?: FloatFilter<"WoodCalculation"> | number
    notes?: StringNullableFilter<"WoodCalculation"> | string | null
    createdAt?: DateTimeFilter<"WoodCalculation"> | Date | string
    updatedAt?: DateTimeFilter<"WoodCalculation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    woodType?: XOR<WoodTypeRelationFilter, WoodTypeWhereInput>
  }

  export type WoodCalculationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    width?: SortOrder
    length?: SortOrder
    pricePerPlank?: SortOrder
    volumeM3?: SortOrder
    planksPerM3?: SortOrder
    pricePerM3?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    woodType?: WoodTypeOrderByWithRelationInput
  }

  export type WoodCalculationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WoodCalculationWhereInput | WoodCalculationWhereInput[]
    OR?: WoodCalculationWhereInput[]
    NOT?: WoodCalculationWhereInput | WoodCalculationWhereInput[]
    userId?: StringFilter<"WoodCalculation"> | string
    woodTypeId?: StringFilter<"WoodCalculation"> | string
    thickness?: FloatFilter<"WoodCalculation"> | number
    width?: FloatFilter<"WoodCalculation"> | number
    length?: FloatFilter<"WoodCalculation"> | number
    pricePerPlank?: FloatFilter<"WoodCalculation"> | number
    volumeM3?: FloatFilter<"WoodCalculation"> | number
    planksPerM3?: FloatFilter<"WoodCalculation"> | number
    pricePerM3?: FloatFilter<"WoodCalculation"> | number
    notes?: StringNullableFilter<"WoodCalculation"> | string | null
    createdAt?: DateTimeFilter<"WoodCalculation"> | Date | string
    updatedAt?: DateTimeFilter<"WoodCalculation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    woodType?: XOR<WoodTypeRelationFilter, WoodTypeWhereInput>
  }, "id">

  export type WoodCalculationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    width?: SortOrder
    length?: SortOrder
    pricePerPlank?: SortOrder
    volumeM3?: SortOrder
    planksPerM3?: SortOrder
    pricePerM3?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WoodCalculationCountOrderByAggregateInput
    _avg?: WoodCalculationAvgOrderByAggregateInput
    _max?: WoodCalculationMaxOrderByAggregateInput
    _min?: WoodCalculationMinOrderByAggregateInput
    _sum?: WoodCalculationSumOrderByAggregateInput
  }

  export type WoodCalculationScalarWhereWithAggregatesInput = {
    AND?: WoodCalculationScalarWhereWithAggregatesInput | WoodCalculationScalarWhereWithAggregatesInput[]
    OR?: WoodCalculationScalarWhereWithAggregatesInput[]
    NOT?: WoodCalculationScalarWhereWithAggregatesInput | WoodCalculationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WoodCalculation"> | string
    userId?: StringWithAggregatesFilter<"WoodCalculation"> | string
    woodTypeId?: StringWithAggregatesFilter<"WoodCalculation"> | string
    thickness?: FloatWithAggregatesFilter<"WoodCalculation"> | number
    width?: FloatWithAggregatesFilter<"WoodCalculation"> | number
    length?: FloatWithAggregatesFilter<"WoodCalculation"> | number
    pricePerPlank?: FloatWithAggregatesFilter<"WoodCalculation"> | number
    volumeM3?: FloatWithAggregatesFilter<"WoodCalculation"> | number
    planksPerM3?: FloatWithAggregatesFilter<"WoodCalculation"> | number
    pricePerM3?: FloatWithAggregatesFilter<"WoodCalculation"> | number
    notes?: StringNullableWithAggregatesFilter<"WoodCalculation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WoodCalculation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WoodCalculation"> | Date | string
  }

  export type WoodReceiptWhereInput = {
    AND?: WoodReceiptWhereInput | WoodReceiptWhereInput[]
    OR?: WoodReceiptWhereInput[]
    NOT?: WoodReceiptWhereInput | WoodReceiptWhereInput[]
    id?: StringFilter<"WoodReceipt"> | string
    woodTypeId?: StringFilter<"WoodReceipt"> | string
    supplier?: StringFilter<"WoodReceipt"> | string
    receiptDate?: DateTimeFilter<"WoodReceipt"> | Date | string
    lotNumber?: StringFilter<"WoodReceipt"> | string
    purchaseOrder?: StringNullableFilter<"WoodReceipt"> | string | null
    status?: StringFilter<"WoodReceipt"> | string
    woodFormat?: StringFilter<"WoodReceipt"> | string
    notes?: StringNullableFilter<"WoodReceipt"> | string | null
    estimatedAmount?: FloatFilter<"WoodReceipt"> | number
    estimatedVolumeM3?: FloatNullableFilter<"WoodReceipt"> | number | null
    estimatedPieces?: IntNullableFilter<"WoodReceipt"> | number | null
    actualVolumeM3?: FloatNullableFilter<"WoodReceipt"> | number | null
    actualPieces?: IntNullableFilter<"WoodReceipt"> | number | null
    receiptConfirmedAt?: DateTimeNullableFilter<"WoodReceipt"> | Date | string | null
    createdAt?: DateTimeFilter<"WoodReceipt"> | Date | string
    updatedAt?: DateTimeFilter<"WoodReceipt"> | Date | string
    woodType?: XOR<WoodTypeRelationFilter, WoodTypeWhereInput>
  }

  export type WoodReceiptOrderByWithRelationInput = {
    id?: SortOrder
    woodTypeId?: SortOrder
    supplier?: SortOrder
    receiptDate?: SortOrder
    lotNumber?: SortOrder
    purchaseOrder?: SortOrderInput | SortOrder
    status?: SortOrder
    woodFormat?: SortOrder
    notes?: SortOrderInput | SortOrder
    estimatedAmount?: SortOrder
    estimatedVolumeM3?: SortOrderInput | SortOrder
    estimatedPieces?: SortOrderInput | SortOrder
    actualVolumeM3?: SortOrderInput | SortOrder
    actualPieces?: SortOrderInput | SortOrder
    receiptConfirmedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    woodType?: WoodTypeOrderByWithRelationInput
  }

  export type WoodReceiptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    lotNumber?: string
    AND?: WoodReceiptWhereInput | WoodReceiptWhereInput[]
    OR?: WoodReceiptWhereInput[]
    NOT?: WoodReceiptWhereInput | WoodReceiptWhereInput[]
    woodTypeId?: StringFilter<"WoodReceipt"> | string
    supplier?: StringFilter<"WoodReceipt"> | string
    receiptDate?: DateTimeFilter<"WoodReceipt"> | Date | string
    purchaseOrder?: StringNullableFilter<"WoodReceipt"> | string | null
    status?: StringFilter<"WoodReceipt"> | string
    woodFormat?: StringFilter<"WoodReceipt"> | string
    notes?: StringNullableFilter<"WoodReceipt"> | string | null
    estimatedAmount?: FloatFilter<"WoodReceipt"> | number
    estimatedVolumeM3?: FloatNullableFilter<"WoodReceipt"> | number | null
    estimatedPieces?: IntNullableFilter<"WoodReceipt"> | number | null
    actualVolumeM3?: FloatNullableFilter<"WoodReceipt"> | number | null
    actualPieces?: IntNullableFilter<"WoodReceipt"> | number | null
    receiptConfirmedAt?: DateTimeNullableFilter<"WoodReceipt"> | Date | string | null
    createdAt?: DateTimeFilter<"WoodReceipt"> | Date | string
    updatedAt?: DateTimeFilter<"WoodReceipt"> | Date | string
    woodType?: XOR<WoodTypeRelationFilter, WoodTypeWhereInput>
  }, "id" | "lotNumber">

  export type WoodReceiptOrderByWithAggregationInput = {
    id?: SortOrder
    woodTypeId?: SortOrder
    supplier?: SortOrder
    receiptDate?: SortOrder
    lotNumber?: SortOrder
    purchaseOrder?: SortOrderInput | SortOrder
    status?: SortOrder
    woodFormat?: SortOrder
    notes?: SortOrderInput | SortOrder
    estimatedAmount?: SortOrder
    estimatedVolumeM3?: SortOrderInput | SortOrder
    estimatedPieces?: SortOrderInput | SortOrder
    actualVolumeM3?: SortOrderInput | SortOrder
    actualPieces?: SortOrderInput | SortOrder
    receiptConfirmedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WoodReceiptCountOrderByAggregateInput
    _avg?: WoodReceiptAvgOrderByAggregateInput
    _max?: WoodReceiptMaxOrderByAggregateInput
    _min?: WoodReceiptMinOrderByAggregateInput
    _sum?: WoodReceiptSumOrderByAggregateInput
  }

  export type WoodReceiptScalarWhereWithAggregatesInput = {
    AND?: WoodReceiptScalarWhereWithAggregatesInput | WoodReceiptScalarWhereWithAggregatesInput[]
    OR?: WoodReceiptScalarWhereWithAggregatesInput[]
    NOT?: WoodReceiptScalarWhereWithAggregatesInput | WoodReceiptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WoodReceipt"> | string
    woodTypeId?: StringWithAggregatesFilter<"WoodReceipt"> | string
    supplier?: StringWithAggregatesFilter<"WoodReceipt"> | string
    receiptDate?: DateTimeWithAggregatesFilter<"WoodReceipt"> | Date | string
    lotNumber?: StringWithAggregatesFilter<"WoodReceipt"> | string
    purchaseOrder?: StringNullableWithAggregatesFilter<"WoodReceipt"> | string | null
    status?: StringWithAggregatesFilter<"WoodReceipt"> | string
    woodFormat?: StringWithAggregatesFilter<"WoodReceipt"> | string
    notes?: StringNullableWithAggregatesFilter<"WoodReceipt"> | string | null
    estimatedAmount?: FloatWithAggregatesFilter<"WoodReceipt"> | number
    estimatedVolumeM3?: FloatNullableWithAggregatesFilter<"WoodReceipt"> | number | null
    estimatedPieces?: IntNullableWithAggregatesFilter<"WoodReceipt"> | number | null
    actualVolumeM3?: FloatNullableWithAggregatesFilter<"WoodReceipt"> | number | null
    actualPieces?: IntNullableWithAggregatesFilter<"WoodReceipt"> | number | null
    receiptConfirmedAt?: DateTimeNullableWithAggregatesFilter<"WoodReceipt"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WoodReceipt"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WoodReceipt"> | Date | string
  }

  export type OperationWhereInput = {
    AND?: OperationWhereInput | OperationWhereInput[]
    OR?: OperationWhereInput[]
    NOT?: OperationWhereInput | OperationWhereInput[]
    id?: StringFilter<"Operation"> | string
    serialNumber?: StringFilter<"Operation"> | string
    woodTypeId?: StringFilter<"Operation"> | string
    lotNumber?: StringFilter<"Operation"> | string
    startTime?: DateTimeNullableFilter<"Operation"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Operation"> | Date | string | null
    sleeperSizes?: JsonFilter<"Operation">
    plankSizes?: JsonFilter<"Operation">
    status?: StringFilter<"Operation"> | string
    wastePercentage?: FloatNullableFilter<"Operation"> | number | null
    notes?: StringNullableFilter<"Operation"> | string | null
    createdAt?: DateTimeFilter<"Operation"> | Date | string
    updatedAt?: DateTimeFilter<"Operation"> | Date | string
    woodType?: XOR<WoodTypeRelationFilter, WoodTypeWhereInput>
  }

  export type OperationOrderByWithRelationInput = {
    id?: SortOrder
    serialNumber?: SortOrder
    woodTypeId?: SortOrder
    lotNumber?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    sleeperSizes?: SortOrder
    plankSizes?: SortOrder
    status?: SortOrder
    wastePercentage?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    woodType?: WoodTypeOrderByWithRelationInput
  }

  export type OperationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    serialNumber?: string
    AND?: OperationWhereInput | OperationWhereInput[]
    OR?: OperationWhereInput[]
    NOT?: OperationWhereInput | OperationWhereInput[]
    woodTypeId?: StringFilter<"Operation"> | string
    lotNumber?: StringFilter<"Operation"> | string
    startTime?: DateTimeNullableFilter<"Operation"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Operation"> | Date | string | null
    sleeperSizes?: JsonFilter<"Operation">
    plankSizes?: JsonFilter<"Operation">
    status?: StringFilter<"Operation"> | string
    wastePercentage?: FloatNullableFilter<"Operation"> | number | null
    notes?: StringNullableFilter<"Operation"> | string | null
    createdAt?: DateTimeFilter<"Operation"> | Date | string
    updatedAt?: DateTimeFilter<"Operation"> | Date | string
    woodType?: XOR<WoodTypeRelationFilter, WoodTypeWhereInput>
  }, "id" | "serialNumber">

  export type OperationOrderByWithAggregationInput = {
    id?: SortOrder
    serialNumber?: SortOrder
    woodTypeId?: SortOrder
    lotNumber?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    sleeperSizes?: SortOrder
    plankSizes?: SortOrder
    status?: SortOrder
    wastePercentage?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OperationCountOrderByAggregateInput
    _avg?: OperationAvgOrderByAggregateInput
    _max?: OperationMaxOrderByAggregateInput
    _min?: OperationMinOrderByAggregateInput
    _sum?: OperationSumOrderByAggregateInput
  }

  export type OperationScalarWhereWithAggregatesInput = {
    AND?: OperationScalarWhereWithAggregatesInput | OperationScalarWhereWithAggregatesInput[]
    OR?: OperationScalarWhereWithAggregatesInput[]
    NOT?: OperationScalarWhereWithAggregatesInput | OperationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Operation"> | string
    serialNumber?: StringWithAggregatesFilter<"Operation"> | string
    woodTypeId?: StringWithAggregatesFilter<"Operation"> | string
    lotNumber?: StringWithAggregatesFilter<"Operation"> | string
    startTime?: DateTimeNullableWithAggregatesFilter<"Operation"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"Operation"> | Date | string | null
    sleeperSizes?: JsonWithAggregatesFilter<"Operation">
    plankSizes?: JsonWithAggregatesFilter<"Operation">
    status?: StringWithAggregatesFilter<"Operation"> | string
    wastePercentage?: FloatNullableWithAggregatesFilter<"Operation"> | number | null
    notes?: StringNullableWithAggregatesFilter<"Operation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Operation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Operation"> | Date | string
  }

  export type DryingProcessWhereInput = {
    AND?: DryingProcessWhereInput | DryingProcessWhereInput[]
    OR?: DryingProcessWhereInput[]
    NOT?: DryingProcessWhereInput | DryingProcessWhereInput[]
    id?: StringFilter<"DryingProcess"> | string
    batchNumber?: StringFilter<"DryingProcess"> | string
    woodTypeId?: StringFilter<"DryingProcess"> | string
    thickness?: FloatFilter<"DryingProcess"> | number
    thicknessUnit?: StringFilter<"DryingProcess"> | string
    pieceCount?: IntFilter<"DryingProcess"> | number
    startingHumidity?: FloatNullableFilter<"DryingProcess"> | number | null
    startingElectricityUnits?: FloatNullableFilter<"DryingProcess"> | number | null
    startTime?: DateTimeFilter<"DryingProcess"> | Date | string
    endTime?: DateTimeNullableFilter<"DryingProcess"> | Date | string | null
    status?: StringFilter<"DryingProcess"> | string
    totalCost?: FloatNullableFilter<"DryingProcess"> | number | null
    notes?: StringNullableFilter<"DryingProcess"> | string | null
    createdAt?: DateTimeFilter<"DryingProcess"> | Date | string
    updatedAt?: DateTimeFilter<"DryingProcess"> | Date | string
    woodType?: XOR<WoodTypeRelationFilter, WoodTypeWhereInput>
    readings?: DryingReadingListRelationFilter
  }

  export type DryingProcessOrderByWithRelationInput = {
    id?: SortOrder
    batchNumber?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    thicknessUnit?: SortOrder
    pieceCount?: SortOrder
    startingHumidity?: SortOrderInput | SortOrder
    startingElectricityUnits?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    status?: SortOrder
    totalCost?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    woodType?: WoodTypeOrderByWithRelationInput
    readings?: DryingReadingOrderByRelationAggregateInput
  }

  export type DryingProcessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    batchNumber?: string
    AND?: DryingProcessWhereInput | DryingProcessWhereInput[]
    OR?: DryingProcessWhereInput[]
    NOT?: DryingProcessWhereInput | DryingProcessWhereInput[]
    woodTypeId?: StringFilter<"DryingProcess"> | string
    thickness?: FloatFilter<"DryingProcess"> | number
    thicknessUnit?: StringFilter<"DryingProcess"> | string
    pieceCount?: IntFilter<"DryingProcess"> | number
    startingHumidity?: FloatNullableFilter<"DryingProcess"> | number | null
    startingElectricityUnits?: FloatNullableFilter<"DryingProcess"> | number | null
    startTime?: DateTimeFilter<"DryingProcess"> | Date | string
    endTime?: DateTimeNullableFilter<"DryingProcess"> | Date | string | null
    status?: StringFilter<"DryingProcess"> | string
    totalCost?: FloatNullableFilter<"DryingProcess"> | number | null
    notes?: StringNullableFilter<"DryingProcess"> | string | null
    createdAt?: DateTimeFilter<"DryingProcess"> | Date | string
    updatedAt?: DateTimeFilter<"DryingProcess"> | Date | string
    woodType?: XOR<WoodTypeRelationFilter, WoodTypeWhereInput>
    readings?: DryingReadingListRelationFilter
  }, "id" | "batchNumber">

  export type DryingProcessOrderByWithAggregationInput = {
    id?: SortOrder
    batchNumber?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    thicknessUnit?: SortOrder
    pieceCount?: SortOrder
    startingHumidity?: SortOrderInput | SortOrder
    startingElectricityUnits?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    status?: SortOrder
    totalCost?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DryingProcessCountOrderByAggregateInput
    _avg?: DryingProcessAvgOrderByAggregateInput
    _max?: DryingProcessMaxOrderByAggregateInput
    _min?: DryingProcessMinOrderByAggregateInput
    _sum?: DryingProcessSumOrderByAggregateInput
  }

  export type DryingProcessScalarWhereWithAggregatesInput = {
    AND?: DryingProcessScalarWhereWithAggregatesInput | DryingProcessScalarWhereWithAggregatesInput[]
    OR?: DryingProcessScalarWhereWithAggregatesInput[]
    NOT?: DryingProcessScalarWhereWithAggregatesInput | DryingProcessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DryingProcess"> | string
    batchNumber?: StringWithAggregatesFilter<"DryingProcess"> | string
    woodTypeId?: StringWithAggregatesFilter<"DryingProcess"> | string
    thickness?: FloatWithAggregatesFilter<"DryingProcess"> | number
    thicknessUnit?: StringWithAggregatesFilter<"DryingProcess"> | string
    pieceCount?: IntWithAggregatesFilter<"DryingProcess"> | number
    startingHumidity?: FloatNullableWithAggregatesFilter<"DryingProcess"> | number | null
    startingElectricityUnits?: FloatNullableWithAggregatesFilter<"DryingProcess"> | number | null
    startTime?: DateTimeWithAggregatesFilter<"DryingProcess"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"DryingProcess"> | Date | string | null
    status?: StringWithAggregatesFilter<"DryingProcess"> | string
    totalCost?: FloatNullableWithAggregatesFilter<"DryingProcess"> | number | null
    notes?: StringNullableWithAggregatesFilter<"DryingProcess"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DryingProcess"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DryingProcess"> | Date | string
  }

  export type DryingReadingWhereInput = {
    AND?: DryingReadingWhereInput | DryingReadingWhereInput[]
    OR?: DryingReadingWhereInput[]
    NOT?: DryingReadingWhereInput | DryingReadingWhereInput[]
    id?: StringFilter<"DryingReading"> | string
    dryingProcessId?: StringFilter<"DryingReading"> | string
    readingTime?: DateTimeFilter<"DryingReading"> | Date | string
    electricityMeter?: FloatFilter<"DryingReading"> | number
    humidity?: FloatFilter<"DryingReading"> | number
    notes?: StringNullableFilter<"DryingReading"> | string | null
    createdAt?: DateTimeFilter<"DryingReading"> | Date | string
    updatedAt?: DateTimeFilter<"DryingReading"> | Date | string
    dryingProcess?: XOR<DryingProcessRelationFilter, DryingProcessWhereInput>
  }

  export type DryingReadingOrderByWithRelationInput = {
    id?: SortOrder
    dryingProcessId?: SortOrder
    readingTime?: SortOrder
    electricityMeter?: SortOrder
    humidity?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dryingProcess?: DryingProcessOrderByWithRelationInput
  }

  export type DryingReadingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DryingReadingWhereInput | DryingReadingWhereInput[]
    OR?: DryingReadingWhereInput[]
    NOT?: DryingReadingWhereInput | DryingReadingWhereInput[]
    dryingProcessId?: StringFilter<"DryingReading"> | string
    readingTime?: DateTimeFilter<"DryingReading"> | Date | string
    electricityMeter?: FloatFilter<"DryingReading"> | number
    humidity?: FloatFilter<"DryingReading"> | number
    notes?: StringNullableFilter<"DryingReading"> | string | null
    createdAt?: DateTimeFilter<"DryingReading"> | Date | string
    updatedAt?: DateTimeFilter<"DryingReading"> | Date | string
    dryingProcess?: XOR<DryingProcessRelationFilter, DryingProcessWhereInput>
  }, "id">

  export type DryingReadingOrderByWithAggregationInput = {
    id?: SortOrder
    dryingProcessId?: SortOrder
    readingTime?: SortOrder
    electricityMeter?: SortOrder
    humidity?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DryingReadingCountOrderByAggregateInput
    _avg?: DryingReadingAvgOrderByAggregateInput
    _max?: DryingReadingMaxOrderByAggregateInput
    _min?: DryingReadingMinOrderByAggregateInput
    _sum?: DryingReadingSumOrderByAggregateInput
  }

  export type DryingReadingScalarWhereWithAggregatesInput = {
    AND?: DryingReadingScalarWhereWithAggregatesInput | DryingReadingScalarWhereWithAggregatesInput[]
    OR?: DryingReadingScalarWhereWithAggregatesInput[]
    NOT?: DryingReadingScalarWhereWithAggregatesInput | DryingReadingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DryingReading"> | string
    dryingProcessId?: StringWithAggregatesFilter<"DryingReading"> | string
    readingTime?: DateTimeWithAggregatesFilter<"DryingReading"> | Date | string
    electricityMeter?: FloatWithAggregatesFilter<"DryingReading"> | number
    humidity?: FloatWithAggregatesFilter<"DryingReading"> | number
    notes?: StringNullableWithAggregatesFilter<"DryingReading"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DryingReading"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DryingReading"> | Date | string
  }

  export type ReceiptDraftWhereInput = {
    AND?: ReceiptDraftWhereInput | ReceiptDraftWhereInput[]
    OR?: ReceiptDraftWhereInput[]
    NOT?: ReceiptDraftWhereInput | ReceiptDraftWhereInput[]
    id?: StringFilter<"ReceiptDraft"> | string
    receiptId?: StringFilter<"ReceiptDraft"> | string
    measurements?: JsonFilter<"ReceiptDraft">
    updatedAt?: DateTimeFilter<"ReceiptDraft"> | Date | string
    updatedBy?: StringFilter<"ReceiptDraft"> | string
    createdAt?: DateTimeFilter<"ReceiptDraft"> | Date | string
  }

  export type ReceiptDraftOrderByWithRelationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    measurements?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptDraftWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptDraftWhereInput | ReceiptDraftWhereInput[]
    OR?: ReceiptDraftWhereInput[]
    NOT?: ReceiptDraftWhereInput | ReceiptDraftWhereInput[]
    receiptId?: StringFilter<"ReceiptDraft"> | string
    measurements?: JsonFilter<"ReceiptDraft">
    updatedAt?: DateTimeFilter<"ReceiptDraft"> | Date | string
    updatedBy?: StringFilter<"ReceiptDraft"> | string
    createdAt?: DateTimeFilter<"ReceiptDraft"> | Date | string
  }, "id">

  export type ReceiptDraftOrderByWithAggregationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    measurements?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    _count?: ReceiptDraftCountOrderByAggregateInput
    _max?: ReceiptDraftMaxOrderByAggregateInput
    _min?: ReceiptDraftMinOrderByAggregateInput
  }

  export type ReceiptDraftScalarWhereWithAggregatesInput = {
    AND?: ReceiptDraftScalarWhereWithAggregatesInput | ReceiptDraftScalarWhereWithAggregatesInput[]
    OR?: ReceiptDraftScalarWhereWithAggregatesInput[]
    NOT?: ReceiptDraftScalarWhereWithAggregatesInput | ReceiptDraftScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReceiptDraft"> | string
    receiptId?: StringWithAggregatesFilter<"ReceiptDraft"> | string
    measurements?: JsonWithAggregatesFilter<"ReceiptDraft">
    updatedAt?: DateTimeWithAggregatesFilter<"ReceiptDraft"> | Date | string
    updatedBy?: StringWithAggregatesFilter<"ReceiptDraft"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReceiptDraft"> | Date | string
  }

  export type ReceiptHistoryWhereInput = {
    AND?: ReceiptHistoryWhereInput | ReceiptHistoryWhereInput[]
    OR?: ReceiptHistoryWhereInput[]
    NOT?: ReceiptHistoryWhereInput | ReceiptHistoryWhereInput[]
    id?: StringFilter<"ReceiptHistory"> | string
    receiptId?: StringFilter<"ReceiptHistory"> | string
    userId?: StringFilter<"ReceiptHistory"> | string
    userName?: StringFilter<"ReceiptHistory"> | string
    action?: StringFilter<"ReceiptHistory"> | string
    details?: StringFilter<"ReceiptHistory"> | string
    timestamp?: DateTimeFilter<"ReceiptHistory"> | Date | string
    createdAt?: DateTimeFilter<"ReceiptHistory"> | Date | string
  }

  export type ReceiptHistoryOrderByWithRelationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptHistoryWhereInput | ReceiptHistoryWhereInput[]
    OR?: ReceiptHistoryWhereInput[]
    NOT?: ReceiptHistoryWhereInput | ReceiptHistoryWhereInput[]
    receiptId?: StringFilter<"ReceiptHistory"> | string
    userId?: StringFilter<"ReceiptHistory"> | string
    userName?: StringFilter<"ReceiptHistory"> | string
    action?: StringFilter<"ReceiptHistory"> | string
    details?: StringFilter<"ReceiptHistory"> | string
    timestamp?: DateTimeFilter<"ReceiptHistory"> | Date | string
    createdAt?: DateTimeFilter<"ReceiptHistory"> | Date | string
  }, "id">

  export type ReceiptHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    _count?: ReceiptHistoryCountOrderByAggregateInput
    _max?: ReceiptHistoryMaxOrderByAggregateInput
    _min?: ReceiptHistoryMinOrderByAggregateInput
  }

  export type ReceiptHistoryScalarWhereWithAggregatesInput = {
    AND?: ReceiptHistoryScalarWhereWithAggregatesInput | ReceiptHistoryScalarWhereWithAggregatesInput[]
    OR?: ReceiptHistoryScalarWhereWithAggregatesInput[]
    NOT?: ReceiptHistoryScalarWhereWithAggregatesInput | ReceiptHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReceiptHistory"> | string
    receiptId?: StringWithAggregatesFilter<"ReceiptHistory"> | string
    userId?: StringWithAggregatesFilter<"ReceiptHistory"> | string
    userName?: StringWithAggregatesFilter<"ReceiptHistory"> | string
    action?: StringWithAggregatesFilter<"ReceiptHistory"> | string
    details?: StringWithAggregatesFilter<"ReceiptHistory"> | string
    timestamp?: DateTimeWithAggregatesFilter<"ReceiptHistory"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ReceiptHistory"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutOwnerInput
    factories?: FactoryCreateNestedManyWithoutUserInput
    designs?: DesignCreateNestedManyWithoutCreatorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    calculations?: WoodCalculationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    factories?: FactoryUncheckedCreateNestedManyWithoutUserInput
    designs?: DesignUncheckedCreateNestedManyWithoutCreatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutOwnerNestedInput
    factories?: FactoryUpdateManyWithoutUserNestedInput
    designs?: DesignUpdateManyWithoutCreatorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    calculations?: WoodCalculationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    factories?: FactoryUncheckedUpdateManyWithoutUserNestedInput
    designs?: DesignUncheckedUpdateManyWithoutCreatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    calculations?: WoodCalculationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutProjectsInput
    designs?: DesignCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    ownerId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    designs?: DesignUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutProjectsNestedInput
    designs?: DesignUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    designs?: DesignUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    ownerId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFactoriesInput
  }

  export type FactoryUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FactoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFactoriesNestedInput
  }

  export type FactoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactoryCreateManyInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FactoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DesignCreateInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutDesignsInput
    creator: UserCreateNestedOneWithoutDesignsInput
    comments?: CommentCreateNestedManyWithoutDesignInput
  }

  export type DesignUncheckedCreateInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    projectId: string
    creatorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutDesignInput
  }

  export type DesignUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutDesignsNestedInput
    creator?: UserUpdateOneRequiredWithoutDesignsNestedInput
    comments?: CommentUpdateManyWithoutDesignNestedInput
  }

  export type DesignUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutDesignNestedInput
  }

  export type DesignCreateManyInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    projectId: string
    creatorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DesignUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DesignUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    design: DesignCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    designId: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    design?: DesignUpdateOneRequiredWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    designId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    designId: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    designId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateInput = {
    id?: string
    name: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUncheckedCreateInput = {
    id?: string
    name: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateManyInput = {
    id?: string
    name: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateManyInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityRechargeCreateInput = {
    id?: string
    rechargeDate: Date | string
    token: string
    kwhAmount: number
    totalPaid: number
    baseCost?: number | null
    vat?: number | null
    ewuraFee?: number | null
    reaFee?: number | null
    debtCollected?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ElectricityRechargeUncheckedCreateInput = {
    id?: string
    rechargeDate: Date | string
    token: string
    kwhAmount: number
    totalPaid: number
    baseCost?: number | null
    vat?: number | null
    ewuraFee?: number | null
    reaFee?: number | null
    debtCollected?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ElectricityRechargeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rechargeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    kwhAmount?: FloatFieldUpdateOperationsInput | number
    totalPaid?: FloatFieldUpdateOperationsInput | number
    baseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vat?: NullableFloatFieldUpdateOperationsInput | number | null
    ewuraFee?: NullableFloatFieldUpdateOperationsInput | number | null
    reaFee?: NullableFloatFieldUpdateOperationsInput | number | null
    debtCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityRechargeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rechargeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    kwhAmount?: FloatFieldUpdateOperationsInput | number
    totalPaid?: FloatFieldUpdateOperationsInput | number
    baseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vat?: NullableFloatFieldUpdateOperationsInput | number | null
    ewuraFee?: NullableFloatFieldUpdateOperationsInput | number | null
    reaFee?: NullableFloatFieldUpdateOperationsInput | number | null
    debtCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityRechargeCreateManyInput = {
    id?: string
    rechargeDate: Date | string
    token: string
    kwhAmount: number
    totalPaid: number
    baseCost?: number | null
    vat?: number | null
    ewuraFee?: number | null
    reaFee?: number | null
    debtCollected?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ElectricityRechargeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rechargeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    kwhAmount?: FloatFieldUpdateOperationsInput | number
    totalPaid?: FloatFieldUpdateOperationsInput | number
    baseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vat?: NullableFloatFieldUpdateOperationsInput | number | null
    ewuraFee?: NullableFloatFieldUpdateOperationsInput | number | null
    reaFee?: NullableFloatFieldUpdateOperationsInput | number | null
    debtCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityRechargeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rechargeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    kwhAmount?: FloatFieldUpdateOperationsInput | number
    totalPaid?: FloatFieldUpdateOperationsInput | number
    baseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vat?: NullableFloatFieldUpdateOperationsInput | number | null
    ewuraFee?: NullableFloatFieldUpdateOperationsInput | number | null
    reaFee?: NullableFloatFieldUpdateOperationsInput | number | null
    debtCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodTypeCreateInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calculations?: WoodCalculationCreateNestedManyWithoutWoodTypeInput
    receipts?: WoodReceiptCreateNestedManyWithoutWoodTypeInput
    operations?: OperationCreateNestedManyWithoutWoodTypeInput
    dryingProcesses?: DryingProcessCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutWoodTypeInput
    receipts?: WoodReceiptUncheckedCreateNestedManyWithoutWoodTypeInput
    operations?: OperationUncheckedCreateNestedManyWithoutWoodTypeInput
    dryingProcesses?: DryingProcessUncheckedCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calculations?: WoodCalculationUpdateManyWithoutWoodTypeNestedInput
    receipts?: WoodReceiptUpdateManyWithoutWoodTypeNestedInput
    operations?: OperationUpdateManyWithoutWoodTypeNestedInput
    dryingProcesses?: DryingProcessUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calculations?: WoodCalculationUncheckedUpdateManyWithoutWoodTypeNestedInput
    receipts?: WoodReceiptUncheckedUpdateManyWithoutWoodTypeNestedInput
    operations?: OperationUncheckedUpdateManyWithoutWoodTypeNestedInput
    dryingProcesses?: DryingProcessUncheckedUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodCalculationCreateInput = {
    id?: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCalculationsInput
    woodType: WoodTypeCreateNestedOneWithoutCalculationsInput
  }

  export type WoodCalculationUncheckedCreateInput = {
    id?: string
    userId: string
    woodTypeId: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodCalculationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCalculationsNestedInput
    woodType?: WoodTypeUpdateOneRequiredWithoutCalculationsNestedInput
  }

  export type WoodCalculationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodCalculationCreateManyInput = {
    id?: string
    userId: string
    woodTypeId: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodCalculationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodCalculationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodReceiptCreateInput = {
    id?: string
    supplier: string
    receiptDate: Date | string
    lotNumber: string
    purchaseOrder?: string | null
    status?: string
    woodFormat?: string
    notes?: string | null
    estimatedAmount?: number
    estimatedVolumeM3?: number | null
    estimatedPieces?: number | null
    actualVolumeM3?: number | null
    actualPieces?: number | null
    receiptConfirmedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    woodType: WoodTypeCreateNestedOneWithoutReceiptsInput
  }

  export type WoodReceiptUncheckedCreateInput = {
    id?: string
    woodTypeId: string
    supplier: string
    receiptDate: Date | string
    lotNumber: string
    purchaseOrder?: string | null
    status?: string
    woodFormat?: string
    notes?: string | null
    estimatedAmount?: number
    estimatedVolumeM3?: number | null
    estimatedPieces?: number | null
    actualVolumeM3?: number | null
    actualPieces?: number | null
    receiptConfirmedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodReceiptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier?: StringFieldUpdateOperationsInput | string
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    purchaseOrder?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    woodFormat?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedAmount?: FloatFieldUpdateOperationsInput | number
    estimatedVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedPieces?: NullableIntFieldUpdateOperationsInput | number | null
    actualVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    actualPieces?: NullableIntFieldUpdateOperationsInput | number | null
    receiptConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    woodType?: WoodTypeUpdateOneRequiredWithoutReceiptsNestedInput
  }

  export type WoodReceiptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    supplier?: StringFieldUpdateOperationsInput | string
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    purchaseOrder?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    woodFormat?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedAmount?: FloatFieldUpdateOperationsInput | number
    estimatedVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedPieces?: NullableIntFieldUpdateOperationsInput | number | null
    actualVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    actualPieces?: NullableIntFieldUpdateOperationsInput | number | null
    receiptConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodReceiptCreateManyInput = {
    id?: string
    woodTypeId: string
    supplier: string
    receiptDate: Date | string
    lotNumber: string
    purchaseOrder?: string | null
    status?: string
    woodFormat?: string
    notes?: string | null
    estimatedAmount?: number
    estimatedVolumeM3?: number | null
    estimatedPieces?: number | null
    actualVolumeM3?: number | null
    actualPieces?: number | null
    receiptConfirmedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodReceiptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier?: StringFieldUpdateOperationsInput | string
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    purchaseOrder?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    woodFormat?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedAmount?: FloatFieldUpdateOperationsInput | number
    estimatedVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedPieces?: NullableIntFieldUpdateOperationsInput | number | null
    actualVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    actualPieces?: NullableIntFieldUpdateOperationsInput | number | null
    receiptConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodReceiptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    supplier?: StringFieldUpdateOperationsInput | string
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    purchaseOrder?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    woodFormat?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedAmount?: FloatFieldUpdateOperationsInput | number
    estimatedVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedPieces?: NullableIntFieldUpdateOperationsInput | number | null
    actualVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    actualPieces?: NullableIntFieldUpdateOperationsInput | number | null
    receiptConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationCreateInput = {
    id?: string
    serialNumber: string
    lotNumber: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    sleeperSizes: JsonNullValueInput | InputJsonValue
    plankSizes: JsonNullValueInput | InputJsonValue
    status?: string
    wastePercentage?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    woodType: WoodTypeCreateNestedOneWithoutOperationsInput
  }

  export type OperationUncheckedCreateInput = {
    id?: string
    serialNumber: string
    woodTypeId: string
    lotNumber: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    sleeperSizes: JsonNullValueInput | InputJsonValue
    plankSizes: JsonNullValueInput | InputJsonValue
    status?: string
    wastePercentage?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleeperSizes?: JsonNullValueInput | InputJsonValue
    plankSizes?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    wastePercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    woodType?: WoodTypeUpdateOneRequiredWithoutOperationsNestedInput
  }

  export type OperationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleeperSizes?: JsonNullValueInput | InputJsonValue
    plankSizes?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    wastePercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationCreateManyInput = {
    id?: string
    serialNumber: string
    woodTypeId: string
    lotNumber: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    sleeperSizes: JsonNullValueInput | InputJsonValue
    plankSizes: JsonNullValueInput | InputJsonValue
    status?: string
    wastePercentage?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleeperSizes?: JsonNullValueInput | InputJsonValue
    plankSizes?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    wastePercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleeperSizes?: JsonNullValueInput | InputJsonValue
    plankSizes?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    wastePercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingProcessCreateInput = {
    id?: string
    batchNumber: string
    thickness: number
    thicknessUnit?: string
    pieceCount: number
    startingHumidity?: number | null
    startingElectricityUnits?: number | null
    startTime: Date | string
    endTime?: Date | string | null
    status?: string
    totalCost?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    woodType: WoodTypeCreateNestedOneWithoutDryingProcessesInput
    readings?: DryingReadingCreateNestedManyWithoutDryingProcessInput
  }

  export type DryingProcessUncheckedCreateInput = {
    id?: string
    batchNumber: string
    woodTypeId: string
    thickness: number
    thicknessUnit?: string
    pieceCount: number
    startingHumidity?: number | null
    startingElectricityUnits?: number | null
    startTime: Date | string
    endTime?: Date | string | null
    status?: string
    totalCost?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readings?: DryingReadingUncheckedCreateNestedManyWithoutDryingProcessInput
  }

  export type DryingProcessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    woodType?: WoodTypeUpdateOneRequiredWithoutDryingProcessesNestedInput
    readings?: DryingReadingUpdateManyWithoutDryingProcessNestedInput
  }

  export type DryingProcessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readings?: DryingReadingUncheckedUpdateManyWithoutDryingProcessNestedInput
  }

  export type DryingProcessCreateManyInput = {
    id?: string
    batchNumber: string
    woodTypeId: string
    thickness: number
    thicknessUnit?: string
    pieceCount: number
    startingHumidity?: number | null
    startingElectricityUnits?: number | null
    startTime: Date | string
    endTime?: Date | string | null
    status?: string
    totalCost?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DryingProcessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingProcessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingReadingCreateInput = {
    id?: string
    readingTime?: Date | string
    electricityMeter: number
    humidity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dryingProcess: DryingProcessCreateNestedOneWithoutReadingsInput
  }

  export type DryingReadingUncheckedCreateInput = {
    id?: string
    dryingProcessId: string
    readingTime?: Date | string
    electricityMeter: number
    humidity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DryingReadingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingTime?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityMeter?: FloatFieldUpdateOperationsInput | number
    humidity?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dryingProcess?: DryingProcessUpdateOneRequiredWithoutReadingsNestedInput
  }

  export type DryingReadingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dryingProcessId?: StringFieldUpdateOperationsInput | string
    readingTime?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityMeter?: FloatFieldUpdateOperationsInput | number
    humidity?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingReadingCreateManyInput = {
    id?: string
    dryingProcessId: string
    readingTime?: Date | string
    electricityMeter: number
    humidity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DryingReadingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingTime?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityMeter?: FloatFieldUpdateOperationsInput | number
    humidity?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingReadingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dryingProcessId?: StringFieldUpdateOperationsInput | string
    readingTime?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityMeter?: FloatFieldUpdateOperationsInput | number
    humidity?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptDraftCreateInput = {
    id?: string
    receiptId: string
    measurements: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
    updatedBy: string
    createdAt?: Date | string
  }

  export type ReceiptDraftUncheckedCreateInput = {
    id?: string
    receiptId: string
    measurements: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
    updatedBy: string
    createdAt?: Date | string
  }

  export type ReceiptDraftUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    measurements?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptDraftUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    measurements?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptDraftCreateManyInput = {
    id?: string
    receiptId: string
    measurements: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
    updatedBy: string
    createdAt?: Date | string
  }

  export type ReceiptDraftUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    measurements?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptDraftUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    measurements?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptHistoryCreateInput = {
    id?: string
    receiptId: string
    userId: string
    userName: string
    action: string
    details: string
    timestamp?: Date | string
    createdAt?: Date | string
  }

  export type ReceiptHistoryUncheckedCreateInput = {
    id?: string
    receiptId: string
    userId: string
    userName: string
    action: string
    details: string
    timestamp?: Date | string
    createdAt?: Date | string
  }

  export type ReceiptHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptHistoryCreateManyInput = {
    id?: string
    receiptId: string
    userId: string
    userName: string
    action: string
    details: string
    timestamp?: Date | string
    createdAt?: Date | string
  }

  export type ReceiptHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type FactoryListRelationFilter = {
    every?: FactoryWhereInput
    some?: FactoryWhereInput
    none?: FactoryWhereInput
  }

  export type DesignListRelationFilter = {
    every?: DesignWhereInput
    some?: DesignWhereInput
    none?: DesignWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type WoodCalculationListRelationFilter = {
    every?: WoodCalculationWhereInput
    some?: WoodCalculationWhereInput
    none?: WoodCalculationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FactoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DesignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WoodCalculationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FactoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FactoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FactoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type DesignCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    content?: SortOrder
    thumbnail?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DesignMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    thumbnail?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DesignMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    thumbnail?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DesignRelationFilter = {
    is?: DesignWhereInput
    isNot?: DesignWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    designId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    designId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    designId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ElectricityRechargeCountOrderByAggregateInput = {
    id?: SortOrder
    rechargeDate?: SortOrder
    token?: SortOrder
    kwhAmount?: SortOrder
    totalPaid?: SortOrder
    baseCost?: SortOrder
    vat?: SortOrder
    ewuraFee?: SortOrder
    reaFee?: SortOrder
    debtCollected?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ElectricityRechargeAvgOrderByAggregateInput = {
    kwhAmount?: SortOrder
    totalPaid?: SortOrder
    baseCost?: SortOrder
    vat?: SortOrder
    ewuraFee?: SortOrder
    reaFee?: SortOrder
    debtCollected?: SortOrder
  }

  export type ElectricityRechargeMaxOrderByAggregateInput = {
    id?: SortOrder
    rechargeDate?: SortOrder
    token?: SortOrder
    kwhAmount?: SortOrder
    totalPaid?: SortOrder
    baseCost?: SortOrder
    vat?: SortOrder
    ewuraFee?: SortOrder
    reaFee?: SortOrder
    debtCollected?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ElectricityRechargeMinOrderByAggregateInput = {
    id?: SortOrder
    rechargeDate?: SortOrder
    token?: SortOrder
    kwhAmount?: SortOrder
    totalPaid?: SortOrder
    baseCost?: SortOrder
    vat?: SortOrder
    ewuraFee?: SortOrder
    reaFee?: SortOrder
    debtCollected?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ElectricityRechargeSumOrderByAggregateInput = {
    kwhAmount?: SortOrder
    totalPaid?: SortOrder
    baseCost?: SortOrder
    vat?: SortOrder
    ewuraFee?: SortOrder
    reaFee?: SortOrder
    debtCollected?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type WoodReceiptListRelationFilter = {
    every?: WoodReceiptWhereInput
    some?: WoodReceiptWhereInput
    none?: WoodReceiptWhereInput
  }

  export type OperationListRelationFilter = {
    every?: OperationWhereInput
    some?: OperationWhereInput
    none?: OperationWhereInput
  }

  export type DryingProcessListRelationFilter = {
    every?: DryingProcessWhereInput
    some?: DryingProcessWhereInput
    none?: DryingProcessWhereInput
  }

  export type WoodReceiptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DryingProcessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WoodTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    density?: SortOrder
    grade?: SortOrder
    origin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodTypeAvgOrderByAggregateInput = {
    density?: SortOrder
  }

  export type WoodTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    density?: SortOrder
    grade?: SortOrder
    origin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    density?: SortOrder
    grade?: SortOrder
    origin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodTypeSumOrderByAggregateInput = {
    density?: SortOrder
  }

  export type WoodTypeRelationFilter = {
    is?: WoodTypeWhereInput
    isNot?: WoodTypeWhereInput
  }

  export type WoodCalculationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    width?: SortOrder
    length?: SortOrder
    pricePerPlank?: SortOrder
    volumeM3?: SortOrder
    planksPerM3?: SortOrder
    pricePerM3?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodCalculationAvgOrderByAggregateInput = {
    thickness?: SortOrder
    width?: SortOrder
    length?: SortOrder
    pricePerPlank?: SortOrder
    volumeM3?: SortOrder
    planksPerM3?: SortOrder
    pricePerM3?: SortOrder
  }

  export type WoodCalculationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    width?: SortOrder
    length?: SortOrder
    pricePerPlank?: SortOrder
    volumeM3?: SortOrder
    planksPerM3?: SortOrder
    pricePerM3?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodCalculationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    width?: SortOrder
    length?: SortOrder
    pricePerPlank?: SortOrder
    volumeM3?: SortOrder
    planksPerM3?: SortOrder
    pricePerM3?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodCalculationSumOrderByAggregateInput = {
    thickness?: SortOrder
    width?: SortOrder
    length?: SortOrder
    pricePerPlank?: SortOrder
    volumeM3?: SortOrder
    planksPerM3?: SortOrder
    pricePerM3?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type WoodReceiptCountOrderByAggregateInput = {
    id?: SortOrder
    woodTypeId?: SortOrder
    supplier?: SortOrder
    receiptDate?: SortOrder
    lotNumber?: SortOrder
    purchaseOrder?: SortOrder
    status?: SortOrder
    woodFormat?: SortOrder
    notes?: SortOrder
    estimatedAmount?: SortOrder
    estimatedVolumeM3?: SortOrder
    estimatedPieces?: SortOrder
    actualVolumeM3?: SortOrder
    actualPieces?: SortOrder
    receiptConfirmedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodReceiptAvgOrderByAggregateInput = {
    estimatedAmount?: SortOrder
    estimatedVolumeM3?: SortOrder
    estimatedPieces?: SortOrder
    actualVolumeM3?: SortOrder
    actualPieces?: SortOrder
  }

  export type WoodReceiptMaxOrderByAggregateInput = {
    id?: SortOrder
    woodTypeId?: SortOrder
    supplier?: SortOrder
    receiptDate?: SortOrder
    lotNumber?: SortOrder
    purchaseOrder?: SortOrder
    status?: SortOrder
    woodFormat?: SortOrder
    notes?: SortOrder
    estimatedAmount?: SortOrder
    estimatedVolumeM3?: SortOrder
    estimatedPieces?: SortOrder
    actualVolumeM3?: SortOrder
    actualPieces?: SortOrder
    receiptConfirmedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodReceiptMinOrderByAggregateInput = {
    id?: SortOrder
    woodTypeId?: SortOrder
    supplier?: SortOrder
    receiptDate?: SortOrder
    lotNumber?: SortOrder
    purchaseOrder?: SortOrder
    status?: SortOrder
    woodFormat?: SortOrder
    notes?: SortOrder
    estimatedAmount?: SortOrder
    estimatedVolumeM3?: SortOrder
    estimatedPieces?: SortOrder
    actualVolumeM3?: SortOrder
    actualPieces?: SortOrder
    receiptConfirmedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WoodReceiptSumOrderByAggregateInput = {
    estimatedAmount?: SortOrder
    estimatedVolumeM3?: SortOrder
    estimatedPieces?: SortOrder
    actualVolumeM3?: SortOrder
    actualPieces?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OperationCountOrderByAggregateInput = {
    id?: SortOrder
    serialNumber?: SortOrder
    woodTypeId?: SortOrder
    lotNumber?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sleeperSizes?: SortOrder
    plankSizes?: SortOrder
    status?: SortOrder
    wastePercentage?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperationAvgOrderByAggregateInput = {
    wastePercentage?: SortOrder
  }

  export type OperationMaxOrderByAggregateInput = {
    id?: SortOrder
    serialNumber?: SortOrder
    woodTypeId?: SortOrder
    lotNumber?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    wastePercentage?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperationMinOrderByAggregateInput = {
    id?: SortOrder
    serialNumber?: SortOrder
    woodTypeId?: SortOrder
    lotNumber?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    wastePercentage?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperationSumOrderByAggregateInput = {
    wastePercentage?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DryingReadingListRelationFilter = {
    every?: DryingReadingWhereInput
    some?: DryingReadingWhereInput
    none?: DryingReadingWhereInput
  }

  export type DryingReadingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DryingProcessCountOrderByAggregateInput = {
    id?: SortOrder
    batchNumber?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    thicknessUnit?: SortOrder
    pieceCount?: SortOrder
    startingHumidity?: SortOrder
    startingElectricityUnits?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    totalCost?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DryingProcessAvgOrderByAggregateInput = {
    thickness?: SortOrder
    pieceCount?: SortOrder
    startingHumidity?: SortOrder
    startingElectricityUnits?: SortOrder
    totalCost?: SortOrder
  }

  export type DryingProcessMaxOrderByAggregateInput = {
    id?: SortOrder
    batchNumber?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    thicknessUnit?: SortOrder
    pieceCount?: SortOrder
    startingHumidity?: SortOrder
    startingElectricityUnits?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    totalCost?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DryingProcessMinOrderByAggregateInput = {
    id?: SortOrder
    batchNumber?: SortOrder
    woodTypeId?: SortOrder
    thickness?: SortOrder
    thicknessUnit?: SortOrder
    pieceCount?: SortOrder
    startingHumidity?: SortOrder
    startingElectricityUnits?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    totalCost?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DryingProcessSumOrderByAggregateInput = {
    thickness?: SortOrder
    pieceCount?: SortOrder
    startingHumidity?: SortOrder
    startingElectricityUnits?: SortOrder
    totalCost?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DryingProcessRelationFilter = {
    is?: DryingProcessWhereInput
    isNot?: DryingProcessWhereInput
  }

  export type DryingReadingCountOrderByAggregateInput = {
    id?: SortOrder
    dryingProcessId?: SortOrder
    readingTime?: SortOrder
    electricityMeter?: SortOrder
    humidity?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DryingReadingAvgOrderByAggregateInput = {
    electricityMeter?: SortOrder
    humidity?: SortOrder
  }

  export type DryingReadingMaxOrderByAggregateInput = {
    id?: SortOrder
    dryingProcessId?: SortOrder
    readingTime?: SortOrder
    electricityMeter?: SortOrder
    humidity?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DryingReadingMinOrderByAggregateInput = {
    id?: SortOrder
    dryingProcessId?: SortOrder
    readingTime?: SortOrder
    electricityMeter?: SortOrder
    humidity?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DryingReadingSumOrderByAggregateInput = {
    electricityMeter?: SortOrder
    humidity?: SortOrder
  }

  export type ReceiptDraftCountOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    measurements?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptDraftMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptDraftMinOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput> | ProjectCreateWithoutOwnerInput[] | ProjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOwnerInput | ProjectCreateOrConnectWithoutOwnerInput[]
    createMany?: ProjectCreateManyOwnerInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type FactoryCreateNestedManyWithoutUserInput = {
    create?: XOR<FactoryCreateWithoutUserInput, FactoryUncheckedCreateWithoutUserInput> | FactoryCreateWithoutUserInput[] | FactoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FactoryCreateOrConnectWithoutUserInput | FactoryCreateOrConnectWithoutUserInput[]
    createMany?: FactoryCreateManyUserInputEnvelope
    connect?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
  }

  export type DesignCreateNestedManyWithoutCreatorInput = {
    create?: XOR<DesignCreateWithoutCreatorInput, DesignUncheckedCreateWithoutCreatorInput> | DesignCreateWithoutCreatorInput[] | DesignUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: DesignCreateOrConnectWithoutCreatorInput | DesignCreateOrConnectWithoutCreatorInput[]
    createMany?: DesignCreateManyCreatorInputEnvelope
    connect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type WoodCalculationCreateNestedManyWithoutUserInput = {
    create?: XOR<WoodCalculationCreateWithoutUserInput, WoodCalculationUncheckedCreateWithoutUserInput> | WoodCalculationCreateWithoutUserInput[] | WoodCalculationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WoodCalculationCreateOrConnectWithoutUserInput | WoodCalculationCreateOrConnectWithoutUserInput[]
    createMany?: WoodCalculationCreateManyUserInputEnvelope
    connect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput> | ProjectCreateWithoutOwnerInput[] | ProjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOwnerInput | ProjectCreateOrConnectWithoutOwnerInput[]
    createMany?: ProjectCreateManyOwnerInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type FactoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FactoryCreateWithoutUserInput, FactoryUncheckedCreateWithoutUserInput> | FactoryCreateWithoutUserInput[] | FactoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FactoryCreateOrConnectWithoutUserInput | FactoryCreateOrConnectWithoutUserInput[]
    createMany?: FactoryCreateManyUserInputEnvelope
    connect?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
  }

  export type DesignUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<DesignCreateWithoutCreatorInput, DesignUncheckedCreateWithoutCreatorInput> | DesignCreateWithoutCreatorInput[] | DesignUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: DesignCreateOrConnectWithoutCreatorInput | DesignCreateOrConnectWithoutCreatorInput[]
    createMany?: DesignCreateManyCreatorInputEnvelope
    connect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type WoodCalculationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WoodCalculationCreateWithoutUserInput, WoodCalculationUncheckedCreateWithoutUserInput> | WoodCalculationCreateWithoutUserInput[] | WoodCalculationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WoodCalculationCreateOrConnectWithoutUserInput | WoodCalculationCreateOrConnectWithoutUserInput[]
    createMany?: WoodCalculationCreateManyUserInputEnvelope
    connect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProjectUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput> | ProjectCreateWithoutOwnerInput[] | ProjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOwnerInput | ProjectCreateOrConnectWithoutOwnerInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOwnerInput | ProjectUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProjectCreateManyOwnerInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOwnerInput | ProjectUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOwnerInput | ProjectUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type FactoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<FactoryCreateWithoutUserInput, FactoryUncheckedCreateWithoutUserInput> | FactoryCreateWithoutUserInput[] | FactoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FactoryCreateOrConnectWithoutUserInput | FactoryCreateOrConnectWithoutUserInput[]
    upsert?: FactoryUpsertWithWhereUniqueWithoutUserInput | FactoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FactoryCreateManyUserInputEnvelope
    set?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
    disconnect?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
    delete?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
    connect?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
    update?: FactoryUpdateWithWhereUniqueWithoutUserInput | FactoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FactoryUpdateManyWithWhereWithoutUserInput | FactoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FactoryScalarWhereInput | FactoryScalarWhereInput[]
  }

  export type DesignUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<DesignCreateWithoutCreatorInput, DesignUncheckedCreateWithoutCreatorInput> | DesignCreateWithoutCreatorInput[] | DesignUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: DesignCreateOrConnectWithoutCreatorInput | DesignCreateOrConnectWithoutCreatorInput[]
    upsert?: DesignUpsertWithWhereUniqueWithoutCreatorInput | DesignUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: DesignCreateManyCreatorInputEnvelope
    set?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    disconnect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    delete?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    connect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    update?: DesignUpdateWithWhereUniqueWithoutCreatorInput | DesignUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: DesignUpdateManyWithWhereWithoutCreatorInput | DesignUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: DesignScalarWhereInput | DesignScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type WoodCalculationUpdateManyWithoutUserNestedInput = {
    create?: XOR<WoodCalculationCreateWithoutUserInput, WoodCalculationUncheckedCreateWithoutUserInput> | WoodCalculationCreateWithoutUserInput[] | WoodCalculationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WoodCalculationCreateOrConnectWithoutUserInput | WoodCalculationCreateOrConnectWithoutUserInput[]
    upsert?: WoodCalculationUpsertWithWhereUniqueWithoutUserInput | WoodCalculationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WoodCalculationCreateManyUserInputEnvelope
    set?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    disconnect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    delete?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    connect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    update?: WoodCalculationUpdateWithWhereUniqueWithoutUserInput | WoodCalculationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WoodCalculationUpdateManyWithWhereWithoutUserInput | WoodCalculationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WoodCalculationScalarWhereInput | WoodCalculationScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput> | ProjectCreateWithoutOwnerInput[] | ProjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOwnerInput | ProjectCreateOrConnectWithoutOwnerInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOwnerInput | ProjectUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProjectCreateManyOwnerInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOwnerInput | ProjectUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOwnerInput | ProjectUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type FactoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FactoryCreateWithoutUserInput, FactoryUncheckedCreateWithoutUserInput> | FactoryCreateWithoutUserInput[] | FactoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FactoryCreateOrConnectWithoutUserInput | FactoryCreateOrConnectWithoutUserInput[]
    upsert?: FactoryUpsertWithWhereUniqueWithoutUserInput | FactoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FactoryCreateManyUserInputEnvelope
    set?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
    disconnect?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
    delete?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
    connect?: FactoryWhereUniqueInput | FactoryWhereUniqueInput[]
    update?: FactoryUpdateWithWhereUniqueWithoutUserInput | FactoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FactoryUpdateManyWithWhereWithoutUserInput | FactoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FactoryScalarWhereInput | FactoryScalarWhereInput[]
  }

  export type DesignUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<DesignCreateWithoutCreatorInput, DesignUncheckedCreateWithoutCreatorInput> | DesignCreateWithoutCreatorInput[] | DesignUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: DesignCreateOrConnectWithoutCreatorInput | DesignCreateOrConnectWithoutCreatorInput[]
    upsert?: DesignUpsertWithWhereUniqueWithoutCreatorInput | DesignUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: DesignCreateManyCreatorInputEnvelope
    set?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    disconnect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    delete?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    connect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    update?: DesignUpdateWithWhereUniqueWithoutCreatorInput | DesignUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: DesignUpdateManyWithWhereWithoutCreatorInput | DesignUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: DesignScalarWhereInput | DesignScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type WoodCalculationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WoodCalculationCreateWithoutUserInput, WoodCalculationUncheckedCreateWithoutUserInput> | WoodCalculationCreateWithoutUserInput[] | WoodCalculationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WoodCalculationCreateOrConnectWithoutUserInput | WoodCalculationCreateOrConnectWithoutUserInput[]
    upsert?: WoodCalculationUpsertWithWhereUniqueWithoutUserInput | WoodCalculationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WoodCalculationCreateManyUserInputEnvelope
    set?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    disconnect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    delete?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    connect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    update?: WoodCalculationUpdateWithWhereUniqueWithoutUserInput | WoodCalculationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WoodCalculationUpdateManyWithWhereWithoutUserInput | WoodCalculationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WoodCalculationScalarWhereInput | WoodCalculationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type DesignCreateNestedManyWithoutProjectInput = {
    create?: XOR<DesignCreateWithoutProjectInput, DesignUncheckedCreateWithoutProjectInput> | DesignCreateWithoutProjectInput[] | DesignUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DesignCreateOrConnectWithoutProjectInput | DesignCreateOrConnectWithoutProjectInput[]
    createMany?: DesignCreateManyProjectInputEnvelope
    connect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
  }

  export type DesignUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<DesignCreateWithoutProjectInput, DesignUncheckedCreateWithoutProjectInput> | DesignCreateWithoutProjectInput[] | DesignUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DesignCreateOrConnectWithoutProjectInput | DesignCreateOrConnectWithoutProjectInput[]
    createMany?: DesignCreateManyProjectInputEnvelope
    connect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsInput, UserUpdateWithoutProjectsInput>, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type DesignUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DesignCreateWithoutProjectInput, DesignUncheckedCreateWithoutProjectInput> | DesignCreateWithoutProjectInput[] | DesignUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DesignCreateOrConnectWithoutProjectInput | DesignCreateOrConnectWithoutProjectInput[]
    upsert?: DesignUpsertWithWhereUniqueWithoutProjectInput | DesignUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DesignCreateManyProjectInputEnvelope
    set?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    disconnect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    delete?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    connect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    update?: DesignUpdateWithWhereUniqueWithoutProjectInput | DesignUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DesignUpdateManyWithWhereWithoutProjectInput | DesignUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DesignScalarWhereInput | DesignScalarWhereInput[]
  }

  export type DesignUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DesignCreateWithoutProjectInput, DesignUncheckedCreateWithoutProjectInput> | DesignCreateWithoutProjectInput[] | DesignUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DesignCreateOrConnectWithoutProjectInput | DesignCreateOrConnectWithoutProjectInput[]
    upsert?: DesignUpsertWithWhereUniqueWithoutProjectInput | DesignUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DesignCreateManyProjectInputEnvelope
    set?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    disconnect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    delete?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    connect?: DesignWhereUniqueInput | DesignWhereUniqueInput[]
    update?: DesignUpdateWithWhereUniqueWithoutProjectInput | DesignUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DesignUpdateManyWithWhereWithoutProjectInput | DesignUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DesignScalarWhereInput | DesignScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFactoriesInput = {
    create?: XOR<UserCreateWithoutFactoriesInput, UserUncheckedCreateWithoutFactoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFactoriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFactoriesNestedInput = {
    create?: XOR<UserCreateWithoutFactoriesInput, UserUncheckedCreateWithoutFactoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFactoriesInput
    upsert?: UserUpsertWithoutFactoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFactoriesInput, UserUpdateWithoutFactoriesInput>, UserUncheckedUpdateWithoutFactoriesInput>
  }

  export type ProjectCreateNestedOneWithoutDesignsInput = {
    create?: XOR<ProjectCreateWithoutDesignsInput, ProjectUncheckedCreateWithoutDesignsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDesignsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDesignsInput = {
    create?: XOR<UserCreateWithoutDesignsInput, UserUncheckedCreateWithoutDesignsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDesignsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutDesignInput = {
    create?: XOR<CommentCreateWithoutDesignInput, CommentUncheckedCreateWithoutDesignInput> | CommentCreateWithoutDesignInput[] | CommentUncheckedCreateWithoutDesignInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutDesignInput | CommentCreateOrConnectWithoutDesignInput[]
    createMany?: CommentCreateManyDesignInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutDesignInput = {
    create?: XOR<CommentCreateWithoutDesignInput, CommentUncheckedCreateWithoutDesignInput> | CommentCreateWithoutDesignInput[] | CommentUncheckedCreateWithoutDesignInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutDesignInput | CommentCreateOrConnectWithoutDesignInput[]
    createMany?: CommentCreateManyDesignInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutDesignsNestedInput = {
    create?: XOR<ProjectCreateWithoutDesignsInput, ProjectUncheckedCreateWithoutDesignsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDesignsInput
    upsert?: ProjectUpsertWithoutDesignsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDesignsInput, ProjectUpdateWithoutDesignsInput>, ProjectUncheckedUpdateWithoutDesignsInput>
  }

  export type UserUpdateOneRequiredWithoutDesignsNestedInput = {
    create?: XOR<UserCreateWithoutDesignsInput, UserUncheckedCreateWithoutDesignsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDesignsInput
    upsert?: UserUpsertWithoutDesignsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDesignsInput, UserUpdateWithoutDesignsInput>, UserUncheckedUpdateWithoutDesignsInput>
  }

  export type CommentUpdateManyWithoutDesignNestedInput = {
    create?: XOR<CommentCreateWithoutDesignInput, CommentUncheckedCreateWithoutDesignInput> | CommentCreateWithoutDesignInput[] | CommentUncheckedCreateWithoutDesignInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutDesignInput | CommentCreateOrConnectWithoutDesignInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutDesignInput | CommentUpsertWithWhereUniqueWithoutDesignInput[]
    createMany?: CommentCreateManyDesignInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutDesignInput | CommentUpdateWithWhereUniqueWithoutDesignInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutDesignInput | CommentUpdateManyWithWhereWithoutDesignInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutDesignNestedInput = {
    create?: XOR<CommentCreateWithoutDesignInput, CommentUncheckedCreateWithoutDesignInput> | CommentCreateWithoutDesignInput[] | CommentUncheckedCreateWithoutDesignInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutDesignInput | CommentCreateOrConnectWithoutDesignInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutDesignInput | CommentUpsertWithWhereUniqueWithoutDesignInput[]
    createMany?: CommentCreateManyDesignInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutDesignInput | CommentUpdateWithWhereUniqueWithoutDesignInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutDesignInput | CommentUpdateManyWithWhereWithoutDesignInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DesignCreateNestedOneWithoutCommentsInput = {
    create?: XOR<DesignCreateWithoutCommentsInput, DesignUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DesignCreateOrConnectWithoutCommentsInput
    connect?: DesignWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type DesignUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<DesignCreateWithoutCommentsInput, DesignUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DesignCreateOrConnectWithoutCommentsInput
    upsert?: DesignUpsertWithoutCommentsInput
    connect?: DesignWhereUniqueInput
    update?: XOR<XOR<DesignUpdateToOneWithWhereWithoutCommentsInput, DesignUpdateWithoutCommentsInput>, DesignUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WoodCalculationCreateNestedManyWithoutWoodTypeInput = {
    create?: XOR<WoodCalculationCreateWithoutWoodTypeInput, WoodCalculationUncheckedCreateWithoutWoodTypeInput> | WoodCalculationCreateWithoutWoodTypeInput[] | WoodCalculationUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: WoodCalculationCreateOrConnectWithoutWoodTypeInput | WoodCalculationCreateOrConnectWithoutWoodTypeInput[]
    createMany?: WoodCalculationCreateManyWoodTypeInputEnvelope
    connect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
  }

  export type WoodReceiptCreateNestedManyWithoutWoodTypeInput = {
    create?: XOR<WoodReceiptCreateWithoutWoodTypeInput, WoodReceiptUncheckedCreateWithoutWoodTypeInput> | WoodReceiptCreateWithoutWoodTypeInput[] | WoodReceiptUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: WoodReceiptCreateOrConnectWithoutWoodTypeInput | WoodReceiptCreateOrConnectWithoutWoodTypeInput[]
    createMany?: WoodReceiptCreateManyWoodTypeInputEnvelope
    connect?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
  }

  export type OperationCreateNestedManyWithoutWoodTypeInput = {
    create?: XOR<OperationCreateWithoutWoodTypeInput, OperationUncheckedCreateWithoutWoodTypeInput> | OperationCreateWithoutWoodTypeInput[] | OperationUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutWoodTypeInput | OperationCreateOrConnectWithoutWoodTypeInput[]
    createMany?: OperationCreateManyWoodTypeInputEnvelope
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
  }

  export type DryingProcessCreateNestedManyWithoutWoodTypeInput = {
    create?: XOR<DryingProcessCreateWithoutWoodTypeInput, DryingProcessUncheckedCreateWithoutWoodTypeInput> | DryingProcessCreateWithoutWoodTypeInput[] | DryingProcessUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: DryingProcessCreateOrConnectWithoutWoodTypeInput | DryingProcessCreateOrConnectWithoutWoodTypeInput[]
    createMany?: DryingProcessCreateManyWoodTypeInputEnvelope
    connect?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
  }

  export type WoodCalculationUncheckedCreateNestedManyWithoutWoodTypeInput = {
    create?: XOR<WoodCalculationCreateWithoutWoodTypeInput, WoodCalculationUncheckedCreateWithoutWoodTypeInput> | WoodCalculationCreateWithoutWoodTypeInput[] | WoodCalculationUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: WoodCalculationCreateOrConnectWithoutWoodTypeInput | WoodCalculationCreateOrConnectWithoutWoodTypeInput[]
    createMany?: WoodCalculationCreateManyWoodTypeInputEnvelope
    connect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
  }

  export type WoodReceiptUncheckedCreateNestedManyWithoutWoodTypeInput = {
    create?: XOR<WoodReceiptCreateWithoutWoodTypeInput, WoodReceiptUncheckedCreateWithoutWoodTypeInput> | WoodReceiptCreateWithoutWoodTypeInput[] | WoodReceiptUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: WoodReceiptCreateOrConnectWithoutWoodTypeInput | WoodReceiptCreateOrConnectWithoutWoodTypeInput[]
    createMany?: WoodReceiptCreateManyWoodTypeInputEnvelope
    connect?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
  }

  export type OperationUncheckedCreateNestedManyWithoutWoodTypeInput = {
    create?: XOR<OperationCreateWithoutWoodTypeInput, OperationUncheckedCreateWithoutWoodTypeInput> | OperationCreateWithoutWoodTypeInput[] | OperationUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutWoodTypeInput | OperationCreateOrConnectWithoutWoodTypeInput[]
    createMany?: OperationCreateManyWoodTypeInputEnvelope
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
  }

  export type DryingProcessUncheckedCreateNestedManyWithoutWoodTypeInput = {
    create?: XOR<DryingProcessCreateWithoutWoodTypeInput, DryingProcessUncheckedCreateWithoutWoodTypeInput> | DryingProcessCreateWithoutWoodTypeInput[] | DryingProcessUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: DryingProcessCreateOrConnectWithoutWoodTypeInput | DryingProcessCreateOrConnectWithoutWoodTypeInput[]
    createMany?: DryingProcessCreateManyWoodTypeInputEnvelope
    connect?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
  }

  export type WoodCalculationUpdateManyWithoutWoodTypeNestedInput = {
    create?: XOR<WoodCalculationCreateWithoutWoodTypeInput, WoodCalculationUncheckedCreateWithoutWoodTypeInput> | WoodCalculationCreateWithoutWoodTypeInput[] | WoodCalculationUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: WoodCalculationCreateOrConnectWithoutWoodTypeInput | WoodCalculationCreateOrConnectWithoutWoodTypeInput[]
    upsert?: WoodCalculationUpsertWithWhereUniqueWithoutWoodTypeInput | WoodCalculationUpsertWithWhereUniqueWithoutWoodTypeInput[]
    createMany?: WoodCalculationCreateManyWoodTypeInputEnvelope
    set?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    disconnect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    delete?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    connect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    update?: WoodCalculationUpdateWithWhereUniqueWithoutWoodTypeInput | WoodCalculationUpdateWithWhereUniqueWithoutWoodTypeInput[]
    updateMany?: WoodCalculationUpdateManyWithWhereWithoutWoodTypeInput | WoodCalculationUpdateManyWithWhereWithoutWoodTypeInput[]
    deleteMany?: WoodCalculationScalarWhereInput | WoodCalculationScalarWhereInput[]
  }

  export type WoodReceiptUpdateManyWithoutWoodTypeNestedInput = {
    create?: XOR<WoodReceiptCreateWithoutWoodTypeInput, WoodReceiptUncheckedCreateWithoutWoodTypeInput> | WoodReceiptCreateWithoutWoodTypeInput[] | WoodReceiptUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: WoodReceiptCreateOrConnectWithoutWoodTypeInput | WoodReceiptCreateOrConnectWithoutWoodTypeInput[]
    upsert?: WoodReceiptUpsertWithWhereUniqueWithoutWoodTypeInput | WoodReceiptUpsertWithWhereUniqueWithoutWoodTypeInput[]
    createMany?: WoodReceiptCreateManyWoodTypeInputEnvelope
    set?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
    disconnect?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
    delete?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
    connect?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
    update?: WoodReceiptUpdateWithWhereUniqueWithoutWoodTypeInput | WoodReceiptUpdateWithWhereUniqueWithoutWoodTypeInput[]
    updateMany?: WoodReceiptUpdateManyWithWhereWithoutWoodTypeInput | WoodReceiptUpdateManyWithWhereWithoutWoodTypeInput[]
    deleteMany?: WoodReceiptScalarWhereInput | WoodReceiptScalarWhereInput[]
  }

  export type OperationUpdateManyWithoutWoodTypeNestedInput = {
    create?: XOR<OperationCreateWithoutWoodTypeInput, OperationUncheckedCreateWithoutWoodTypeInput> | OperationCreateWithoutWoodTypeInput[] | OperationUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutWoodTypeInput | OperationCreateOrConnectWithoutWoodTypeInput[]
    upsert?: OperationUpsertWithWhereUniqueWithoutWoodTypeInput | OperationUpsertWithWhereUniqueWithoutWoodTypeInput[]
    createMany?: OperationCreateManyWoodTypeInputEnvelope
    set?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    disconnect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    delete?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    update?: OperationUpdateWithWhereUniqueWithoutWoodTypeInput | OperationUpdateWithWhereUniqueWithoutWoodTypeInput[]
    updateMany?: OperationUpdateManyWithWhereWithoutWoodTypeInput | OperationUpdateManyWithWhereWithoutWoodTypeInput[]
    deleteMany?: OperationScalarWhereInput | OperationScalarWhereInput[]
  }

  export type DryingProcessUpdateManyWithoutWoodTypeNestedInput = {
    create?: XOR<DryingProcessCreateWithoutWoodTypeInput, DryingProcessUncheckedCreateWithoutWoodTypeInput> | DryingProcessCreateWithoutWoodTypeInput[] | DryingProcessUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: DryingProcessCreateOrConnectWithoutWoodTypeInput | DryingProcessCreateOrConnectWithoutWoodTypeInput[]
    upsert?: DryingProcessUpsertWithWhereUniqueWithoutWoodTypeInput | DryingProcessUpsertWithWhereUniqueWithoutWoodTypeInput[]
    createMany?: DryingProcessCreateManyWoodTypeInputEnvelope
    set?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
    disconnect?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
    delete?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
    connect?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
    update?: DryingProcessUpdateWithWhereUniqueWithoutWoodTypeInput | DryingProcessUpdateWithWhereUniqueWithoutWoodTypeInput[]
    updateMany?: DryingProcessUpdateManyWithWhereWithoutWoodTypeInput | DryingProcessUpdateManyWithWhereWithoutWoodTypeInput[]
    deleteMany?: DryingProcessScalarWhereInput | DryingProcessScalarWhereInput[]
  }

  export type WoodCalculationUncheckedUpdateManyWithoutWoodTypeNestedInput = {
    create?: XOR<WoodCalculationCreateWithoutWoodTypeInput, WoodCalculationUncheckedCreateWithoutWoodTypeInput> | WoodCalculationCreateWithoutWoodTypeInput[] | WoodCalculationUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: WoodCalculationCreateOrConnectWithoutWoodTypeInput | WoodCalculationCreateOrConnectWithoutWoodTypeInput[]
    upsert?: WoodCalculationUpsertWithWhereUniqueWithoutWoodTypeInput | WoodCalculationUpsertWithWhereUniqueWithoutWoodTypeInput[]
    createMany?: WoodCalculationCreateManyWoodTypeInputEnvelope
    set?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    disconnect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    delete?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    connect?: WoodCalculationWhereUniqueInput | WoodCalculationWhereUniqueInput[]
    update?: WoodCalculationUpdateWithWhereUniqueWithoutWoodTypeInput | WoodCalculationUpdateWithWhereUniqueWithoutWoodTypeInput[]
    updateMany?: WoodCalculationUpdateManyWithWhereWithoutWoodTypeInput | WoodCalculationUpdateManyWithWhereWithoutWoodTypeInput[]
    deleteMany?: WoodCalculationScalarWhereInput | WoodCalculationScalarWhereInput[]
  }

  export type WoodReceiptUncheckedUpdateManyWithoutWoodTypeNestedInput = {
    create?: XOR<WoodReceiptCreateWithoutWoodTypeInput, WoodReceiptUncheckedCreateWithoutWoodTypeInput> | WoodReceiptCreateWithoutWoodTypeInput[] | WoodReceiptUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: WoodReceiptCreateOrConnectWithoutWoodTypeInput | WoodReceiptCreateOrConnectWithoutWoodTypeInput[]
    upsert?: WoodReceiptUpsertWithWhereUniqueWithoutWoodTypeInput | WoodReceiptUpsertWithWhereUniqueWithoutWoodTypeInput[]
    createMany?: WoodReceiptCreateManyWoodTypeInputEnvelope
    set?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
    disconnect?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
    delete?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
    connect?: WoodReceiptWhereUniqueInput | WoodReceiptWhereUniqueInput[]
    update?: WoodReceiptUpdateWithWhereUniqueWithoutWoodTypeInput | WoodReceiptUpdateWithWhereUniqueWithoutWoodTypeInput[]
    updateMany?: WoodReceiptUpdateManyWithWhereWithoutWoodTypeInput | WoodReceiptUpdateManyWithWhereWithoutWoodTypeInput[]
    deleteMany?: WoodReceiptScalarWhereInput | WoodReceiptScalarWhereInput[]
  }

  export type OperationUncheckedUpdateManyWithoutWoodTypeNestedInput = {
    create?: XOR<OperationCreateWithoutWoodTypeInput, OperationUncheckedCreateWithoutWoodTypeInput> | OperationCreateWithoutWoodTypeInput[] | OperationUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutWoodTypeInput | OperationCreateOrConnectWithoutWoodTypeInput[]
    upsert?: OperationUpsertWithWhereUniqueWithoutWoodTypeInput | OperationUpsertWithWhereUniqueWithoutWoodTypeInput[]
    createMany?: OperationCreateManyWoodTypeInputEnvelope
    set?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    disconnect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    delete?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    update?: OperationUpdateWithWhereUniqueWithoutWoodTypeInput | OperationUpdateWithWhereUniqueWithoutWoodTypeInput[]
    updateMany?: OperationUpdateManyWithWhereWithoutWoodTypeInput | OperationUpdateManyWithWhereWithoutWoodTypeInput[]
    deleteMany?: OperationScalarWhereInput | OperationScalarWhereInput[]
  }

  export type DryingProcessUncheckedUpdateManyWithoutWoodTypeNestedInput = {
    create?: XOR<DryingProcessCreateWithoutWoodTypeInput, DryingProcessUncheckedCreateWithoutWoodTypeInput> | DryingProcessCreateWithoutWoodTypeInput[] | DryingProcessUncheckedCreateWithoutWoodTypeInput[]
    connectOrCreate?: DryingProcessCreateOrConnectWithoutWoodTypeInput | DryingProcessCreateOrConnectWithoutWoodTypeInput[]
    upsert?: DryingProcessUpsertWithWhereUniqueWithoutWoodTypeInput | DryingProcessUpsertWithWhereUniqueWithoutWoodTypeInput[]
    createMany?: DryingProcessCreateManyWoodTypeInputEnvelope
    set?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
    disconnect?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
    delete?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
    connect?: DryingProcessWhereUniqueInput | DryingProcessWhereUniqueInput[]
    update?: DryingProcessUpdateWithWhereUniqueWithoutWoodTypeInput | DryingProcessUpdateWithWhereUniqueWithoutWoodTypeInput[]
    updateMany?: DryingProcessUpdateManyWithWhereWithoutWoodTypeInput | DryingProcessUpdateManyWithWhereWithoutWoodTypeInput[]
    deleteMany?: DryingProcessScalarWhereInput | DryingProcessScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCalculationsInput = {
    create?: XOR<UserCreateWithoutCalculationsInput, UserUncheckedCreateWithoutCalculationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCalculationsInput
    connect?: UserWhereUniqueInput
  }

  export type WoodTypeCreateNestedOneWithoutCalculationsInput = {
    create?: XOR<WoodTypeCreateWithoutCalculationsInput, WoodTypeUncheckedCreateWithoutCalculationsInput>
    connectOrCreate?: WoodTypeCreateOrConnectWithoutCalculationsInput
    connect?: WoodTypeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCalculationsNestedInput = {
    create?: XOR<UserCreateWithoutCalculationsInput, UserUncheckedCreateWithoutCalculationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCalculationsInput
    upsert?: UserUpsertWithoutCalculationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCalculationsInput, UserUpdateWithoutCalculationsInput>, UserUncheckedUpdateWithoutCalculationsInput>
  }

  export type WoodTypeUpdateOneRequiredWithoutCalculationsNestedInput = {
    create?: XOR<WoodTypeCreateWithoutCalculationsInput, WoodTypeUncheckedCreateWithoutCalculationsInput>
    connectOrCreate?: WoodTypeCreateOrConnectWithoutCalculationsInput
    upsert?: WoodTypeUpsertWithoutCalculationsInput
    connect?: WoodTypeWhereUniqueInput
    update?: XOR<XOR<WoodTypeUpdateToOneWithWhereWithoutCalculationsInput, WoodTypeUpdateWithoutCalculationsInput>, WoodTypeUncheckedUpdateWithoutCalculationsInput>
  }

  export type WoodTypeCreateNestedOneWithoutReceiptsInput = {
    create?: XOR<WoodTypeCreateWithoutReceiptsInput, WoodTypeUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: WoodTypeCreateOrConnectWithoutReceiptsInput
    connect?: WoodTypeWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type WoodTypeUpdateOneRequiredWithoutReceiptsNestedInput = {
    create?: XOR<WoodTypeCreateWithoutReceiptsInput, WoodTypeUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: WoodTypeCreateOrConnectWithoutReceiptsInput
    upsert?: WoodTypeUpsertWithoutReceiptsInput
    connect?: WoodTypeWhereUniqueInput
    update?: XOR<XOR<WoodTypeUpdateToOneWithWhereWithoutReceiptsInput, WoodTypeUpdateWithoutReceiptsInput>, WoodTypeUncheckedUpdateWithoutReceiptsInput>
  }

  export type WoodTypeCreateNestedOneWithoutOperationsInput = {
    create?: XOR<WoodTypeCreateWithoutOperationsInput, WoodTypeUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: WoodTypeCreateOrConnectWithoutOperationsInput
    connect?: WoodTypeWhereUniqueInput
  }

  export type WoodTypeUpdateOneRequiredWithoutOperationsNestedInput = {
    create?: XOR<WoodTypeCreateWithoutOperationsInput, WoodTypeUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: WoodTypeCreateOrConnectWithoutOperationsInput
    upsert?: WoodTypeUpsertWithoutOperationsInput
    connect?: WoodTypeWhereUniqueInput
    update?: XOR<XOR<WoodTypeUpdateToOneWithWhereWithoutOperationsInput, WoodTypeUpdateWithoutOperationsInput>, WoodTypeUncheckedUpdateWithoutOperationsInput>
  }

  export type WoodTypeCreateNestedOneWithoutDryingProcessesInput = {
    create?: XOR<WoodTypeCreateWithoutDryingProcessesInput, WoodTypeUncheckedCreateWithoutDryingProcessesInput>
    connectOrCreate?: WoodTypeCreateOrConnectWithoutDryingProcessesInput
    connect?: WoodTypeWhereUniqueInput
  }

  export type DryingReadingCreateNestedManyWithoutDryingProcessInput = {
    create?: XOR<DryingReadingCreateWithoutDryingProcessInput, DryingReadingUncheckedCreateWithoutDryingProcessInput> | DryingReadingCreateWithoutDryingProcessInput[] | DryingReadingUncheckedCreateWithoutDryingProcessInput[]
    connectOrCreate?: DryingReadingCreateOrConnectWithoutDryingProcessInput | DryingReadingCreateOrConnectWithoutDryingProcessInput[]
    createMany?: DryingReadingCreateManyDryingProcessInputEnvelope
    connect?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
  }

  export type DryingReadingUncheckedCreateNestedManyWithoutDryingProcessInput = {
    create?: XOR<DryingReadingCreateWithoutDryingProcessInput, DryingReadingUncheckedCreateWithoutDryingProcessInput> | DryingReadingCreateWithoutDryingProcessInput[] | DryingReadingUncheckedCreateWithoutDryingProcessInput[]
    connectOrCreate?: DryingReadingCreateOrConnectWithoutDryingProcessInput | DryingReadingCreateOrConnectWithoutDryingProcessInput[]
    createMany?: DryingReadingCreateManyDryingProcessInputEnvelope
    connect?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WoodTypeUpdateOneRequiredWithoutDryingProcessesNestedInput = {
    create?: XOR<WoodTypeCreateWithoutDryingProcessesInput, WoodTypeUncheckedCreateWithoutDryingProcessesInput>
    connectOrCreate?: WoodTypeCreateOrConnectWithoutDryingProcessesInput
    upsert?: WoodTypeUpsertWithoutDryingProcessesInput
    connect?: WoodTypeWhereUniqueInput
    update?: XOR<XOR<WoodTypeUpdateToOneWithWhereWithoutDryingProcessesInput, WoodTypeUpdateWithoutDryingProcessesInput>, WoodTypeUncheckedUpdateWithoutDryingProcessesInput>
  }

  export type DryingReadingUpdateManyWithoutDryingProcessNestedInput = {
    create?: XOR<DryingReadingCreateWithoutDryingProcessInput, DryingReadingUncheckedCreateWithoutDryingProcessInput> | DryingReadingCreateWithoutDryingProcessInput[] | DryingReadingUncheckedCreateWithoutDryingProcessInput[]
    connectOrCreate?: DryingReadingCreateOrConnectWithoutDryingProcessInput | DryingReadingCreateOrConnectWithoutDryingProcessInput[]
    upsert?: DryingReadingUpsertWithWhereUniqueWithoutDryingProcessInput | DryingReadingUpsertWithWhereUniqueWithoutDryingProcessInput[]
    createMany?: DryingReadingCreateManyDryingProcessInputEnvelope
    set?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
    disconnect?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
    delete?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
    connect?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
    update?: DryingReadingUpdateWithWhereUniqueWithoutDryingProcessInput | DryingReadingUpdateWithWhereUniqueWithoutDryingProcessInput[]
    updateMany?: DryingReadingUpdateManyWithWhereWithoutDryingProcessInput | DryingReadingUpdateManyWithWhereWithoutDryingProcessInput[]
    deleteMany?: DryingReadingScalarWhereInput | DryingReadingScalarWhereInput[]
  }

  export type DryingReadingUncheckedUpdateManyWithoutDryingProcessNestedInput = {
    create?: XOR<DryingReadingCreateWithoutDryingProcessInput, DryingReadingUncheckedCreateWithoutDryingProcessInput> | DryingReadingCreateWithoutDryingProcessInput[] | DryingReadingUncheckedCreateWithoutDryingProcessInput[]
    connectOrCreate?: DryingReadingCreateOrConnectWithoutDryingProcessInput | DryingReadingCreateOrConnectWithoutDryingProcessInput[]
    upsert?: DryingReadingUpsertWithWhereUniqueWithoutDryingProcessInput | DryingReadingUpsertWithWhereUniqueWithoutDryingProcessInput[]
    createMany?: DryingReadingCreateManyDryingProcessInputEnvelope
    set?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
    disconnect?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
    delete?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
    connect?: DryingReadingWhereUniqueInput | DryingReadingWhereUniqueInput[]
    update?: DryingReadingUpdateWithWhereUniqueWithoutDryingProcessInput | DryingReadingUpdateWithWhereUniqueWithoutDryingProcessInput[]
    updateMany?: DryingReadingUpdateManyWithWhereWithoutDryingProcessInput | DryingReadingUpdateManyWithWhereWithoutDryingProcessInput[]
    deleteMany?: DryingReadingScalarWhereInput | DryingReadingScalarWhereInput[]
  }

  export type DryingProcessCreateNestedOneWithoutReadingsInput = {
    create?: XOR<DryingProcessCreateWithoutReadingsInput, DryingProcessUncheckedCreateWithoutReadingsInput>
    connectOrCreate?: DryingProcessCreateOrConnectWithoutReadingsInput
    connect?: DryingProcessWhereUniqueInput
  }

  export type DryingProcessUpdateOneRequiredWithoutReadingsNestedInput = {
    create?: XOR<DryingProcessCreateWithoutReadingsInput, DryingProcessUncheckedCreateWithoutReadingsInput>
    connectOrCreate?: DryingProcessCreateOrConnectWithoutReadingsInput
    upsert?: DryingProcessUpsertWithoutReadingsInput
    connect?: DryingProcessWhereUniqueInput
    update?: XOR<XOR<DryingProcessUpdateToOneWithWhereWithoutReadingsInput, DryingProcessUpdateWithoutReadingsInput>, DryingProcessUncheckedUpdateWithoutReadingsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ProjectCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    designs?: DesignCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    designs?: DesignUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput>
  }

  export type ProjectCreateManyOwnerInputEnvelope = {
    data: ProjectCreateManyOwnerInput | ProjectCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type FactoryCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FactoryUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FactoryCreateOrConnectWithoutUserInput = {
    where: FactoryWhereUniqueInput
    create: XOR<FactoryCreateWithoutUserInput, FactoryUncheckedCreateWithoutUserInput>
  }

  export type FactoryCreateManyUserInputEnvelope = {
    data: FactoryCreateManyUserInput | FactoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DesignCreateWithoutCreatorInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutDesignsInput
    comments?: CommentCreateNestedManyWithoutDesignInput
  }

  export type DesignUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutDesignInput
  }

  export type DesignCreateOrConnectWithoutCreatorInput = {
    where: DesignWhereUniqueInput
    create: XOR<DesignCreateWithoutCreatorInput, DesignUncheckedCreateWithoutCreatorInput>
  }

  export type DesignCreateManyCreatorInputEnvelope = {
    data: DesignCreateManyCreatorInput | DesignCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    design: DesignCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    designId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type WoodCalculationCreateWithoutUserInput = {
    id?: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    woodType: WoodTypeCreateNestedOneWithoutCalculationsInput
  }

  export type WoodCalculationUncheckedCreateWithoutUserInput = {
    id?: string
    woodTypeId: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodCalculationCreateOrConnectWithoutUserInput = {
    where: WoodCalculationWhereUniqueInput
    create: XOR<WoodCalculationCreateWithoutUserInput, WoodCalculationUncheckedCreateWithoutUserInput>
  }

  export type WoodCalculationCreateManyUserInputEnvelope = {
    data: WoodCalculationCreateManyUserInput | WoodCalculationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutOwnerInput, ProjectUncheckedUpdateWithoutOwnerInput>
    create: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutOwnerInput, ProjectUncheckedUpdateWithoutOwnerInput>
  }

  export type ProjectUpdateManyWithWhereWithoutOwnerInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    ownerId?: StringFilter<"Project"> | string
    isPublic?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type FactoryUpsertWithWhereUniqueWithoutUserInput = {
    where: FactoryWhereUniqueInput
    update: XOR<FactoryUpdateWithoutUserInput, FactoryUncheckedUpdateWithoutUserInput>
    create: XOR<FactoryCreateWithoutUserInput, FactoryUncheckedCreateWithoutUserInput>
  }

  export type FactoryUpdateWithWhereUniqueWithoutUserInput = {
    where: FactoryWhereUniqueInput
    data: XOR<FactoryUpdateWithoutUserInput, FactoryUncheckedUpdateWithoutUserInput>
  }

  export type FactoryUpdateManyWithWhereWithoutUserInput = {
    where: FactoryScalarWhereInput
    data: XOR<FactoryUpdateManyMutationInput, FactoryUncheckedUpdateManyWithoutUserInput>
  }

  export type FactoryScalarWhereInput = {
    AND?: FactoryScalarWhereInput | FactoryScalarWhereInput[]
    OR?: FactoryScalarWhereInput[]
    NOT?: FactoryScalarWhereInput | FactoryScalarWhereInput[]
    id?: StringFilter<"Factory"> | string
    name?: StringFilter<"Factory"> | string
    userId?: StringFilter<"Factory"> | string
    createdAt?: DateTimeFilter<"Factory"> | Date | string
    updatedAt?: DateTimeFilter<"Factory"> | Date | string
  }

  export type DesignUpsertWithWhereUniqueWithoutCreatorInput = {
    where: DesignWhereUniqueInput
    update: XOR<DesignUpdateWithoutCreatorInput, DesignUncheckedUpdateWithoutCreatorInput>
    create: XOR<DesignCreateWithoutCreatorInput, DesignUncheckedCreateWithoutCreatorInput>
  }

  export type DesignUpdateWithWhereUniqueWithoutCreatorInput = {
    where: DesignWhereUniqueInput
    data: XOR<DesignUpdateWithoutCreatorInput, DesignUncheckedUpdateWithoutCreatorInput>
  }

  export type DesignUpdateManyWithWhereWithoutCreatorInput = {
    where: DesignScalarWhereInput
    data: XOR<DesignUpdateManyMutationInput, DesignUncheckedUpdateManyWithoutCreatorInput>
  }

  export type DesignScalarWhereInput = {
    AND?: DesignScalarWhereInput | DesignScalarWhereInput[]
    OR?: DesignScalarWhereInput[]
    NOT?: DesignScalarWhereInput | DesignScalarWhereInput[]
    id?: StringFilter<"Design"> | string
    name?: StringFilter<"Design"> | string
    content?: JsonFilter<"Design">
    thumbnail?: StringNullableFilter<"Design"> | string | null
    projectId?: StringFilter<"Design"> | string
    creatorId?: StringFilter<"Design"> | string
    createdAt?: DateTimeFilter<"Design"> | Date | string
    updatedAt?: DateTimeFilter<"Design"> | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    designId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type WoodCalculationUpsertWithWhereUniqueWithoutUserInput = {
    where: WoodCalculationWhereUniqueInput
    update: XOR<WoodCalculationUpdateWithoutUserInput, WoodCalculationUncheckedUpdateWithoutUserInput>
    create: XOR<WoodCalculationCreateWithoutUserInput, WoodCalculationUncheckedCreateWithoutUserInput>
  }

  export type WoodCalculationUpdateWithWhereUniqueWithoutUserInput = {
    where: WoodCalculationWhereUniqueInput
    data: XOR<WoodCalculationUpdateWithoutUserInput, WoodCalculationUncheckedUpdateWithoutUserInput>
  }

  export type WoodCalculationUpdateManyWithWhereWithoutUserInput = {
    where: WoodCalculationScalarWhereInput
    data: XOR<WoodCalculationUpdateManyMutationInput, WoodCalculationUncheckedUpdateManyWithoutUserInput>
  }

  export type WoodCalculationScalarWhereInput = {
    AND?: WoodCalculationScalarWhereInput | WoodCalculationScalarWhereInput[]
    OR?: WoodCalculationScalarWhereInput[]
    NOT?: WoodCalculationScalarWhereInput | WoodCalculationScalarWhereInput[]
    id?: StringFilter<"WoodCalculation"> | string
    userId?: StringFilter<"WoodCalculation"> | string
    woodTypeId?: StringFilter<"WoodCalculation"> | string
    thickness?: FloatFilter<"WoodCalculation"> | number
    width?: FloatFilter<"WoodCalculation"> | number
    length?: FloatFilter<"WoodCalculation"> | number
    pricePerPlank?: FloatFilter<"WoodCalculation"> | number
    volumeM3?: FloatFilter<"WoodCalculation"> | number
    planksPerM3?: FloatFilter<"WoodCalculation"> | number
    pricePerM3?: FloatFilter<"WoodCalculation"> | number
    notes?: StringNullableFilter<"WoodCalculation"> | string | null
    createdAt?: DateTimeFilter<"WoodCalculation"> | Date | string
    updatedAt?: DateTimeFilter<"WoodCalculation"> | Date | string
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    factories?: FactoryCreateNestedManyWithoutUserInput
    designs?: DesignCreateNestedManyWithoutCreatorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    calculations?: WoodCalculationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    factories?: FactoryUncheckedCreateNestedManyWithoutUserInput
    designs?: DesignUncheckedCreateNestedManyWithoutCreatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type DesignCreateWithoutProjectInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutDesignsInput
    comments?: CommentCreateNestedManyWithoutDesignInput
  }

  export type DesignUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    creatorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutDesignInput
  }

  export type DesignCreateOrConnectWithoutProjectInput = {
    where: DesignWhereUniqueInput
    create: XOR<DesignCreateWithoutProjectInput, DesignUncheckedCreateWithoutProjectInput>
  }

  export type DesignCreateManyProjectInputEnvelope = {
    data: DesignCreateManyProjectInput | DesignCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    factories?: FactoryUpdateManyWithoutUserNestedInput
    designs?: DesignUpdateManyWithoutCreatorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    calculations?: WoodCalculationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    factories?: FactoryUncheckedUpdateManyWithoutUserNestedInput
    designs?: DesignUncheckedUpdateManyWithoutCreatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    calculations?: WoodCalculationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DesignUpsertWithWhereUniqueWithoutProjectInput = {
    where: DesignWhereUniqueInput
    update: XOR<DesignUpdateWithoutProjectInput, DesignUncheckedUpdateWithoutProjectInput>
    create: XOR<DesignCreateWithoutProjectInput, DesignUncheckedCreateWithoutProjectInput>
  }

  export type DesignUpdateWithWhereUniqueWithoutProjectInput = {
    where: DesignWhereUniqueInput
    data: XOR<DesignUpdateWithoutProjectInput, DesignUncheckedUpdateWithoutProjectInput>
  }

  export type DesignUpdateManyWithWhereWithoutProjectInput = {
    where: DesignScalarWhereInput
    data: XOR<DesignUpdateManyMutationInput, DesignUncheckedUpdateManyWithoutProjectInput>
  }

  export type UserCreateWithoutFactoriesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutOwnerInput
    designs?: DesignCreateNestedManyWithoutCreatorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    calculations?: WoodCalculationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFactoriesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    designs?: DesignUncheckedCreateNestedManyWithoutCreatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFactoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFactoriesInput, UserUncheckedCreateWithoutFactoriesInput>
  }

  export type UserUpsertWithoutFactoriesInput = {
    update: XOR<UserUpdateWithoutFactoriesInput, UserUncheckedUpdateWithoutFactoriesInput>
    create: XOR<UserCreateWithoutFactoriesInput, UserUncheckedCreateWithoutFactoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFactoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFactoriesInput, UserUncheckedUpdateWithoutFactoriesInput>
  }

  export type UserUpdateWithoutFactoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutOwnerNestedInput
    designs?: DesignUpdateManyWithoutCreatorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    calculations?: WoodCalculationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFactoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    designs?: DesignUncheckedUpdateManyWithoutCreatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    calculations?: WoodCalculationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectCreateWithoutDesignsInput = {
    id?: string
    name: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutDesignsInput = {
    id?: string
    name: string
    description?: string | null
    ownerId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateOrConnectWithoutDesignsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDesignsInput, ProjectUncheckedCreateWithoutDesignsInput>
  }

  export type UserCreateWithoutDesignsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutOwnerInput
    factories?: FactoryCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    calculations?: WoodCalculationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDesignsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    factories?: FactoryUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDesignsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDesignsInput, UserUncheckedCreateWithoutDesignsInput>
  }

  export type CommentCreateWithoutDesignInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutDesignInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutDesignInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutDesignInput, CommentUncheckedCreateWithoutDesignInput>
  }

  export type CommentCreateManyDesignInputEnvelope = {
    data: CommentCreateManyDesignInput | CommentCreateManyDesignInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutDesignsInput = {
    update: XOR<ProjectUpdateWithoutDesignsInput, ProjectUncheckedUpdateWithoutDesignsInput>
    create: XOR<ProjectCreateWithoutDesignsInput, ProjectUncheckedCreateWithoutDesignsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDesignsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDesignsInput, ProjectUncheckedUpdateWithoutDesignsInput>
  }

  export type ProjectUpdateWithoutDesignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDesignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutDesignsInput = {
    update: XOR<UserUpdateWithoutDesignsInput, UserUncheckedUpdateWithoutDesignsInput>
    create: XOR<UserCreateWithoutDesignsInput, UserUncheckedCreateWithoutDesignsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDesignsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDesignsInput, UserUncheckedUpdateWithoutDesignsInput>
  }

  export type UserUpdateWithoutDesignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutOwnerNestedInput
    factories?: FactoryUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    calculations?: WoodCalculationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDesignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    factories?: FactoryUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    calculations?: WoodCalculationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutDesignInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutDesignInput, CommentUncheckedUpdateWithoutDesignInput>
    create: XOR<CommentCreateWithoutDesignInput, CommentUncheckedCreateWithoutDesignInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutDesignInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutDesignInput, CommentUncheckedUpdateWithoutDesignInput>
  }

  export type CommentUpdateManyWithWhereWithoutDesignInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutDesignInput>
  }

  export type DesignCreateWithoutCommentsInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutDesignsInput
    creator: UserCreateNestedOneWithoutDesignsInput
  }

  export type DesignUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    projectId: string
    creatorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DesignCreateOrConnectWithoutCommentsInput = {
    where: DesignWhereUniqueInput
    create: XOR<DesignCreateWithoutCommentsInput, DesignUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutOwnerInput
    factories?: FactoryCreateNestedManyWithoutUserInput
    designs?: DesignCreateNestedManyWithoutCreatorInput
    calculations?: WoodCalculationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    factories?: FactoryUncheckedCreateNestedManyWithoutUserInput
    designs?: DesignUncheckedCreateNestedManyWithoutCreatorInput
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type DesignUpsertWithoutCommentsInput = {
    update: XOR<DesignUpdateWithoutCommentsInput, DesignUncheckedUpdateWithoutCommentsInput>
    create: XOR<DesignCreateWithoutCommentsInput, DesignUncheckedCreateWithoutCommentsInput>
    where?: DesignWhereInput
  }

  export type DesignUpdateToOneWithWhereWithoutCommentsInput = {
    where?: DesignWhereInput
    data: XOR<DesignUpdateWithoutCommentsInput, DesignUncheckedUpdateWithoutCommentsInput>
  }

  export type DesignUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutDesignsNestedInput
    creator?: UserUpdateOneRequiredWithoutDesignsNestedInput
  }

  export type DesignUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutOwnerNestedInput
    factories?: FactoryUpdateManyWithoutUserNestedInput
    designs?: DesignUpdateManyWithoutCreatorNestedInput
    calculations?: WoodCalculationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    factories?: FactoryUncheckedUpdateManyWithoutUserNestedInput
    designs?: DesignUncheckedUpdateManyWithoutCreatorNestedInput
    calculations?: WoodCalculationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WoodCalculationCreateWithoutWoodTypeInput = {
    id?: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCalculationsInput
  }

  export type WoodCalculationUncheckedCreateWithoutWoodTypeInput = {
    id?: string
    userId: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodCalculationCreateOrConnectWithoutWoodTypeInput = {
    where: WoodCalculationWhereUniqueInput
    create: XOR<WoodCalculationCreateWithoutWoodTypeInput, WoodCalculationUncheckedCreateWithoutWoodTypeInput>
  }

  export type WoodCalculationCreateManyWoodTypeInputEnvelope = {
    data: WoodCalculationCreateManyWoodTypeInput | WoodCalculationCreateManyWoodTypeInput[]
    skipDuplicates?: boolean
  }

  export type WoodReceiptCreateWithoutWoodTypeInput = {
    id?: string
    supplier: string
    receiptDate: Date | string
    lotNumber: string
    purchaseOrder?: string | null
    status?: string
    woodFormat?: string
    notes?: string | null
    estimatedAmount?: number
    estimatedVolumeM3?: number | null
    estimatedPieces?: number | null
    actualVolumeM3?: number | null
    actualPieces?: number | null
    receiptConfirmedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodReceiptUncheckedCreateWithoutWoodTypeInput = {
    id?: string
    supplier: string
    receiptDate: Date | string
    lotNumber: string
    purchaseOrder?: string | null
    status?: string
    woodFormat?: string
    notes?: string | null
    estimatedAmount?: number
    estimatedVolumeM3?: number | null
    estimatedPieces?: number | null
    actualVolumeM3?: number | null
    actualPieces?: number | null
    receiptConfirmedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodReceiptCreateOrConnectWithoutWoodTypeInput = {
    where: WoodReceiptWhereUniqueInput
    create: XOR<WoodReceiptCreateWithoutWoodTypeInput, WoodReceiptUncheckedCreateWithoutWoodTypeInput>
  }

  export type WoodReceiptCreateManyWoodTypeInputEnvelope = {
    data: WoodReceiptCreateManyWoodTypeInput | WoodReceiptCreateManyWoodTypeInput[]
    skipDuplicates?: boolean
  }

  export type OperationCreateWithoutWoodTypeInput = {
    id?: string
    serialNumber: string
    lotNumber: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    sleeperSizes: JsonNullValueInput | InputJsonValue
    plankSizes: JsonNullValueInput | InputJsonValue
    status?: string
    wastePercentage?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationUncheckedCreateWithoutWoodTypeInput = {
    id?: string
    serialNumber: string
    lotNumber: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    sleeperSizes: JsonNullValueInput | InputJsonValue
    plankSizes: JsonNullValueInput | InputJsonValue
    status?: string
    wastePercentage?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationCreateOrConnectWithoutWoodTypeInput = {
    where: OperationWhereUniqueInput
    create: XOR<OperationCreateWithoutWoodTypeInput, OperationUncheckedCreateWithoutWoodTypeInput>
  }

  export type OperationCreateManyWoodTypeInputEnvelope = {
    data: OperationCreateManyWoodTypeInput | OperationCreateManyWoodTypeInput[]
    skipDuplicates?: boolean
  }

  export type DryingProcessCreateWithoutWoodTypeInput = {
    id?: string
    batchNumber: string
    thickness: number
    thicknessUnit?: string
    pieceCount: number
    startingHumidity?: number | null
    startingElectricityUnits?: number | null
    startTime: Date | string
    endTime?: Date | string | null
    status?: string
    totalCost?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readings?: DryingReadingCreateNestedManyWithoutDryingProcessInput
  }

  export type DryingProcessUncheckedCreateWithoutWoodTypeInput = {
    id?: string
    batchNumber: string
    thickness: number
    thicknessUnit?: string
    pieceCount: number
    startingHumidity?: number | null
    startingElectricityUnits?: number | null
    startTime: Date | string
    endTime?: Date | string | null
    status?: string
    totalCost?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readings?: DryingReadingUncheckedCreateNestedManyWithoutDryingProcessInput
  }

  export type DryingProcessCreateOrConnectWithoutWoodTypeInput = {
    where: DryingProcessWhereUniqueInput
    create: XOR<DryingProcessCreateWithoutWoodTypeInput, DryingProcessUncheckedCreateWithoutWoodTypeInput>
  }

  export type DryingProcessCreateManyWoodTypeInputEnvelope = {
    data: DryingProcessCreateManyWoodTypeInput | DryingProcessCreateManyWoodTypeInput[]
    skipDuplicates?: boolean
  }

  export type WoodCalculationUpsertWithWhereUniqueWithoutWoodTypeInput = {
    where: WoodCalculationWhereUniqueInput
    update: XOR<WoodCalculationUpdateWithoutWoodTypeInput, WoodCalculationUncheckedUpdateWithoutWoodTypeInput>
    create: XOR<WoodCalculationCreateWithoutWoodTypeInput, WoodCalculationUncheckedCreateWithoutWoodTypeInput>
  }

  export type WoodCalculationUpdateWithWhereUniqueWithoutWoodTypeInput = {
    where: WoodCalculationWhereUniqueInput
    data: XOR<WoodCalculationUpdateWithoutWoodTypeInput, WoodCalculationUncheckedUpdateWithoutWoodTypeInput>
  }

  export type WoodCalculationUpdateManyWithWhereWithoutWoodTypeInput = {
    where: WoodCalculationScalarWhereInput
    data: XOR<WoodCalculationUpdateManyMutationInput, WoodCalculationUncheckedUpdateManyWithoutWoodTypeInput>
  }

  export type WoodReceiptUpsertWithWhereUniqueWithoutWoodTypeInput = {
    where: WoodReceiptWhereUniqueInput
    update: XOR<WoodReceiptUpdateWithoutWoodTypeInput, WoodReceiptUncheckedUpdateWithoutWoodTypeInput>
    create: XOR<WoodReceiptCreateWithoutWoodTypeInput, WoodReceiptUncheckedCreateWithoutWoodTypeInput>
  }

  export type WoodReceiptUpdateWithWhereUniqueWithoutWoodTypeInput = {
    where: WoodReceiptWhereUniqueInput
    data: XOR<WoodReceiptUpdateWithoutWoodTypeInput, WoodReceiptUncheckedUpdateWithoutWoodTypeInput>
  }

  export type WoodReceiptUpdateManyWithWhereWithoutWoodTypeInput = {
    where: WoodReceiptScalarWhereInput
    data: XOR<WoodReceiptUpdateManyMutationInput, WoodReceiptUncheckedUpdateManyWithoutWoodTypeInput>
  }

  export type WoodReceiptScalarWhereInput = {
    AND?: WoodReceiptScalarWhereInput | WoodReceiptScalarWhereInput[]
    OR?: WoodReceiptScalarWhereInput[]
    NOT?: WoodReceiptScalarWhereInput | WoodReceiptScalarWhereInput[]
    id?: StringFilter<"WoodReceipt"> | string
    woodTypeId?: StringFilter<"WoodReceipt"> | string
    supplier?: StringFilter<"WoodReceipt"> | string
    receiptDate?: DateTimeFilter<"WoodReceipt"> | Date | string
    lotNumber?: StringFilter<"WoodReceipt"> | string
    purchaseOrder?: StringNullableFilter<"WoodReceipt"> | string | null
    status?: StringFilter<"WoodReceipt"> | string
    woodFormat?: StringFilter<"WoodReceipt"> | string
    notes?: StringNullableFilter<"WoodReceipt"> | string | null
    estimatedAmount?: FloatFilter<"WoodReceipt"> | number
    estimatedVolumeM3?: FloatNullableFilter<"WoodReceipt"> | number | null
    estimatedPieces?: IntNullableFilter<"WoodReceipt"> | number | null
    actualVolumeM3?: FloatNullableFilter<"WoodReceipt"> | number | null
    actualPieces?: IntNullableFilter<"WoodReceipt"> | number | null
    receiptConfirmedAt?: DateTimeNullableFilter<"WoodReceipt"> | Date | string | null
    createdAt?: DateTimeFilter<"WoodReceipt"> | Date | string
    updatedAt?: DateTimeFilter<"WoodReceipt"> | Date | string
  }

  export type OperationUpsertWithWhereUniqueWithoutWoodTypeInput = {
    where: OperationWhereUniqueInput
    update: XOR<OperationUpdateWithoutWoodTypeInput, OperationUncheckedUpdateWithoutWoodTypeInput>
    create: XOR<OperationCreateWithoutWoodTypeInput, OperationUncheckedCreateWithoutWoodTypeInput>
  }

  export type OperationUpdateWithWhereUniqueWithoutWoodTypeInput = {
    where: OperationWhereUniqueInput
    data: XOR<OperationUpdateWithoutWoodTypeInput, OperationUncheckedUpdateWithoutWoodTypeInput>
  }

  export type OperationUpdateManyWithWhereWithoutWoodTypeInput = {
    where: OperationScalarWhereInput
    data: XOR<OperationUpdateManyMutationInput, OperationUncheckedUpdateManyWithoutWoodTypeInput>
  }

  export type OperationScalarWhereInput = {
    AND?: OperationScalarWhereInput | OperationScalarWhereInput[]
    OR?: OperationScalarWhereInput[]
    NOT?: OperationScalarWhereInput | OperationScalarWhereInput[]
    id?: StringFilter<"Operation"> | string
    serialNumber?: StringFilter<"Operation"> | string
    woodTypeId?: StringFilter<"Operation"> | string
    lotNumber?: StringFilter<"Operation"> | string
    startTime?: DateTimeNullableFilter<"Operation"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Operation"> | Date | string | null
    sleeperSizes?: JsonFilter<"Operation">
    plankSizes?: JsonFilter<"Operation">
    status?: StringFilter<"Operation"> | string
    wastePercentage?: FloatNullableFilter<"Operation"> | number | null
    notes?: StringNullableFilter<"Operation"> | string | null
    createdAt?: DateTimeFilter<"Operation"> | Date | string
    updatedAt?: DateTimeFilter<"Operation"> | Date | string
  }

  export type DryingProcessUpsertWithWhereUniqueWithoutWoodTypeInput = {
    where: DryingProcessWhereUniqueInput
    update: XOR<DryingProcessUpdateWithoutWoodTypeInput, DryingProcessUncheckedUpdateWithoutWoodTypeInput>
    create: XOR<DryingProcessCreateWithoutWoodTypeInput, DryingProcessUncheckedCreateWithoutWoodTypeInput>
  }

  export type DryingProcessUpdateWithWhereUniqueWithoutWoodTypeInput = {
    where: DryingProcessWhereUniqueInput
    data: XOR<DryingProcessUpdateWithoutWoodTypeInput, DryingProcessUncheckedUpdateWithoutWoodTypeInput>
  }

  export type DryingProcessUpdateManyWithWhereWithoutWoodTypeInput = {
    where: DryingProcessScalarWhereInput
    data: XOR<DryingProcessUpdateManyMutationInput, DryingProcessUncheckedUpdateManyWithoutWoodTypeInput>
  }

  export type DryingProcessScalarWhereInput = {
    AND?: DryingProcessScalarWhereInput | DryingProcessScalarWhereInput[]
    OR?: DryingProcessScalarWhereInput[]
    NOT?: DryingProcessScalarWhereInput | DryingProcessScalarWhereInput[]
    id?: StringFilter<"DryingProcess"> | string
    batchNumber?: StringFilter<"DryingProcess"> | string
    woodTypeId?: StringFilter<"DryingProcess"> | string
    thickness?: FloatFilter<"DryingProcess"> | number
    thicknessUnit?: StringFilter<"DryingProcess"> | string
    pieceCount?: IntFilter<"DryingProcess"> | number
    startingHumidity?: FloatNullableFilter<"DryingProcess"> | number | null
    startingElectricityUnits?: FloatNullableFilter<"DryingProcess"> | number | null
    startTime?: DateTimeFilter<"DryingProcess"> | Date | string
    endTime?: DateTimeNullableFilter<"DryingProcess"> | Date | string | null
    status?: StringFilter<"DryingProcess"> | string
    totalCost?: FloatNullableFilter<"DryingProcess"> | number | null
    notes?: StringNullableFilter<"DryingProcess"> | string | null
    createdAt?: DateTimeFilter<"DryingProcess"> | Date | string
    updatedAt?: DateTimeFilter<"DryingProcess"> | Date | string
  }

  export type UserCreateWithoutCalculationsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutOwnerInput
    factories?: FactoryCreateNestedManyWithoutUserInput
    designs?: DesignCreateNestedManyWithoutCreatorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutCalculationsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    factories?: FactoryUncheckedCreateNestedManyWithoutUserInput
    designs?: DesignUncheckedCreateNestedManyWithoutCreatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutCalculationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCalculationsInput, UserUncheckedCreateWithoutCalculationsInput>
  }

  export type WoodTypeCreateWithoutCalculationsInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: WoodReceiptCreateNestedManyWithoutWoodTypeInput
    operations?: OperationCreateNestedManyWithoutWoodTypeInput
    dryingProcesses?: DryingProcessCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeUncheckedCreateWithoutCalculationsInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: WoodReceiptUncheckedCreateNestedManyWithoutWoodTypeInput
    operations?: OperationUncheckedCreateNestedManyWithoutWoodTypeInput
    dryingProcesses?: DryingProcessUncheckedCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeCreateOrConnectWithoutCalculationsInput = {
    where: WoodTypeWhereUniqueInput
    create: XOR<WoodTypeCreateWithoutCalculationsInput, WoodTypeUncheckedCreateWithoutCalculationsInput>
  }

  export type UserUpsertWithoutCalculationsInput = {
    update: XOR<UserUpdateWithoutCalculationsInput, UserUncheckedUpdateWithoutCalculationsInput>
    create: XOR<UserCreateWithoutCalculationsInput, UserUncheckedCreateWithoutCalculationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCalculationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCalculationsInput, UserUncheckedUpdateWithoutCalculationsInput>
  }

  export type UserUpdateWithoutCalculationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutOwnerNestedInput
    factories?: FactoryUpdateManyWithoutUserNestedInput
    designs?: DesignUpdateManyWithoutCreatorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutCalculationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    factories?: FactoryUncheckedUpdateManyWithoutUserNestedInput
    designs?: DesignUncheckedUpdateManyWithoutCreatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type WoodTypeUpsertWithoutCalculationsInput = {
    update: XOR<WoodTypeUpdateWithoutCalculationsInput, WoodTypeUncheckedUpdateWithoutCalculationsInput>
    create: XOR<WoodTypeCreateWithoutCalculationsInput, WoodTypeUncheckedCreateWithoutCalculationsInput>
    where?: WoodTypeWhereInput
  }

  export type WoodTypeUpdateToOneWithWhereWithoutCalculationsInput = {
    where?: WoodTypeWhereInput
    data: XOR<WoodTypeUpdateWithoutCalculationsInput, WoodTypeUncheckedUpdateWithoutCalculationsInput>
  }

  export type WoodTypeUpdateWithoutCalculationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: WoodReceiptUpdateManyWithoutWoodTypeNestedInput
    operations?: OperationUpdateManyWithoutWoodTypeNestedInput
    dryingProcesses?: DryingProcessUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeUncheckedUpdateWithoutCalculationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: WoodReceiptUncheckedUpdateManyWithoutWoodTypeNestedInput
    operations?: OperationUncheckedUpdateManyWithoutWoodTypeNestedInput
    dryingProcesses?: DryingProcessUncheckedUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeCreateWithoutReceiptsInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calculations?: WoodCalculationCreateNestedManyWithoutWoodTypeInput
    operations?: OperationCreateNestedManyWithoutWoodTypeInput
    dryingProcesses?: DryingProcessCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeUncheckedCreateWithoutReceiptsInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutWoodTypeInput
    operations?: OperationUncheckedCreateNestedManyWithoutWoodTypeInput
    dryingProcesses?: DryingProcessUncheckedCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeCreateOrConnectWithoutReceiptsInput = {
    where: WoodTypeWhereUniqueInput
    create: XOR<WoodTypeCreateWithoutReceiptsInput, WoodTypeUncheckedCreateWithoutReceiptsInput>
  }

  export type WoodTypeUpsertWithoutReceiptsInput = {
    update: XOR<WoodTypeUpdateWithoutReceiptsInput, WoodTypeUncheckedUpdateWithoutReceiptsInput>
    create: XOR<WoodTypeCreateWithoutReceiptsInput, WoodTypeUncheckedCreateWithoutReceiptsInput>
    where?: WoodTypeWhereInput
  }

  export type WoodTypeUpdateToOneWithWhereWithoutReceiptsInput = {
    where?: WoodTypeWhereInput
    data: XOR<WoodTypeUpdateWithoutReceiptsInput, WoodTypeUncheckedUpdateWithoutReceiptsInput>
  }

  export type WoodTypeUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calculations?: WoodCalculationUpdateManyWithoutWoodTypeNestedInput
    operations?: OperationUpdateManyWithoutWoodTypeNestedInput
    dryingProcesses?: DryingProcessUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeUncheckedUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calculations?: WoodCalculationUncheckedUpdateManyWithoutWoodTypeNestedInput
    operations?: OperationUncheckedUpdateManyWithoutWoodTypeNestedInput
    dryingProcesses?: DryingProcessUncheckedUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeCreateWithoutOperationsInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calculations?: WoodCalculationCreateNestedManyWithoutWoodTypeInput
    receipts?: WoodReceiptCreateNestedManyWithoutWoodTypeInput
    dryingProcesses?: DryingProcessCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeUncheckedCreateWithoutOperationsInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutWoodTypeInput
    receipts?: WoodReceiptUncheckedCreateNestedManyWithoutWoodTypeInput
    dryingProcesses?: DryingProcessUncheckedCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeCreateOrConnectWithoutOperationsInput = {
    where: WoodTypeWhereUniqueInput
    create: XOR<WoodTypeCreateWithoutOperationsInput, WoodTypeUncheckedCreateWithoutOperationsInput>
  }

  export type WoodTypeUpsertWithoutOperationsInput = {
    update: XOR<WoodTypeUpdateWithoutOperationsInput, WoodTypeUncheckedUpdateWithoutOperationsInput>
    create: XOR<WoodTypeCreateWithoutOperationsInput, WoodTypeUncheckedCreateWithoutOperationsInput>
    where?: WoodTypeWhereInput
  }

  export type WoodTypeUpdateToOneWithWhereWithoutOperationsInput = {
    where?: WoodTypeWhereInput
    data: XOR<WoodTypeUpdateWithoutOperationsInput, WoodTypeUncheckedUpdateWithoutOperationsInput>
  }

  export type WoodTypeUpdateWithoutOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calculations?: WoodCalculationUpdateManyWithoutWoodTypeNestedInput
    receipts?: WoodReceiptUpdateManyWithoutWoodTypeNestedInput
    dryingProcesses?: DryingProcessUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeUncheckedUpdateWithoutOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calculations?: WoodCalculationUncheckedUpdateManyWithoutWoodTypeNestedInput
    receipts?: WoodReceiptUncheckedUpdateManyWithoutWoodTypeNestedInput
    dryingProcesses?: DryingProcessUncheckedUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeCreateWithoutDryingProcessesInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calculations?: WoodCalculationCreateNestedManyWithoutWoodTypeInput
    receipts?: WoodReceiptCreateNestedManyWithoutWoodTypeInput
    operations?: OperationCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeUncheckedCreateWithoutDryingProcessesInput = {
    id?: string
    name: string
    description?: string | null
    density?: number | null
    grade: string
    origin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calculations?: WoodCalculationUncheckedCreateNestedManyWithoutWoodTypeInput
    receipts?: WoodReceiptUncheckedCreateNestedManyWithoutWoodTypeInput
    operations?: OperationUncheckedCreateNestedManyWithoutWoodTypeInput
  }

  export type WoodTypeCreateOrConnectWithoutDryingProcessesInput = {
    where: WoodTypeWhereUniqueInput
    create: XOR<WoodTypeCreateWithoutDryingProcessesInput, WoodTypeUncheckedCreateWithoutDryingProcessesInput>
  }

  export type DryingReadingCreateWithoutDryingProcessInput = {
    id?: string
    readingTime?: Date | string
    electricityMeter: number
    humidity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DryingReadingUncheckedCreateWithoutDryingProcessInput = {
    id?: string
    readingTime?: Date | string
    electricityMeter: number
    humidity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DryingReadingCreateOrConnectWithoutDryingProcessInput = {
    where: DryingReadingWhereUniqueInput
    create: XOR<DryingReadingCreateWithoutDryingProcessInput, DryingReadingUncheckedCreateWithoutDryingProcessInput>
  }

  export type DryingReadingCreateManyDryingProcessInputEnvelope = {
    data: DryingReadingCreateManyDryingProcessInput | DryingReadingCreateManyDryingProcessInput[]
    skipDuplicates?: boolean
  }

  export type WoodTypeUpsertWithoutDryingProcessesInput = {
    update: XOR<WoodTypeUpdateWithoutDryingProcessesInput, WoodTypeUncheckedUpdateWithoutDryingProcessesInput>
    create: XOR<WoodTypeCreateWithoutDryingProcessesInput, WoodTypeUncheckedCreateWithoutDryingProcessesInput>
    where?: WoodTypeWhereInput
  }

  export type WoodTypeUpdateToOneWithWhereWithoutDryingProcessesInput = {
    where?: WoodTypeWhereInput
    data: XOR<WoodTypeUpdateWithoutDryingProcessesInput, WoodTypeUncheckedUpdateWithoutDryingProcessesInput>
  }

  export type WoodTypeUpdateWithoutDryingProcessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calculations?: WoodCalculationUpdateManyWithoutWoodTypeNestedInput
    receipts?: WoodReceiptUpdateManyWithoutWoodTypeNestedInput
    operations?: OperationUpdateManyWithoutWoodTypeNestedInput
  }

  export type WoodTypeUncheckedUpdateWithoutDryingProcessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calculations?: WoodCalculationUncheckedUpdateManyWithoutWoodTypeNestedInput
    receipts?: WoodReceiptUncheckedUpdateManyWithoutWoodTypeNestedInput
    operations?: OperationUncheckedUpdateManyWithoutWoodTypeNestedInput
  }

  export type DryingReadingUpsertWithWhereUniqueWithoutDryingProcessInput = {
    where: DryingReadingWhereUniqueInput
    update: XOR<DryingReadingUpdateWithoutDryingProcessInput, DryingReadingUncheckedUpdateWithoutDryingProcessInput>
    create: XOR<DryingReadingCreateWithoutDryingProcessInput, DryingReadingUncheckedCreateWithoutDryingProcessInput>
  }

  export type DryingReadingUpdateWithWhereUniqueWithoutDryingProcessInput = {
    where: DryingReadingWhereUniqueInput
    data: XOR<DryingReadingUpdateWithoutDryingProcessInput, DryingReadingUncheckedUpdateWithoutDryingProcessInput>
  }

  export type DryingReadingUpdateManyWithWhereWithoutDryingProcessInput = {
    where: DryingReadingScalarWhereInput
    data: XOR<DryingReadingUpdateManyMutationInput, DryingReadingUncheckedUpdateManyWithoutDryingProcessInput>
  }

  export type DryingReadingScalarWhereInput = {
    AND?: DryingReadingScalarWhereInput | DryingReadingScalarWhereInput[]
    OR?: DryingReadingScalarWhereInput[]
    NOT?: DryingReadingScalarWhereInput | DryingReadingScalarWhereInput[]
    id?: StringFilter<"DryingReading"> | string
    dryingProcessId?: StringFilter<"DryingReading"> | string
    readingTime?: DateTimeFilter<"DryingReading"> | Date | string
    electricityMeter?: FloatFilter<"DryingReading"> | number
    humidity?: FloatFilter<"DryingReading"> | number
    notes?: StringNullableFilter<"DryingReading"> | string | null
    createdAt?: DateTimeFilter<"DryingReading"> | Date | string
    updatedAt?: DateTimeFilter<"DryingReading"> | Date | string
  }

  export type DryingProcessCreateWithoutReadingsInput = {
    id?: string
    batchNumber: string
    thickness: number
    thicknessUnit?: string
    pieceCount: number
    startingHumidity?: number | null
    startingElectricityUnits?: number | null
    startTime: Date | string
    endTime?: Date | string | null
    status?: string
    totalCost?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    woodType: WoodTypeCreateNestedOneWithoutDryingProcessesInput
  }

  export type DryingProcessUncheckedCreateWithoutReadingsInput = {
    id?: string
    batchNumber: string
    woodTypeId: string
    thickness: number
    thicknessUnit?: string
    pieceCount: number
    startingHumidity?: number | null
    startingElectricityUnits?: number | null
    startTime: Date | string
    endTime?: Date | string | null
    status?: string
    totalCost?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DryingProcessCreateOrConnectWithoutReadingsInput = {
    where: DryingProcessWhereUniqueInput
    create: XOR<DryingProcessCreateWithoutReadingsInput, DryingProcessUncheckedCreateWithoutReadingsInput>
  }

  export type DryingProcessUpsertWithoutReadingsInput = {
    update: XOR<DryingProcessUpdateWithoutReadingsInput, DryingProcessUncheckedUpdateWithoutReadingsInput>
    create: XOR<DryingProcessCreateWithoutReadingsInput, DryingProcessUncheckedCreateWithoutReadingsInput>
    where?: DryingProcessWhereInput
  }

  export type DryingProcessUpdateToOneWithWhereWithoutReadingsInput = {
    where?: DryingProcessWhereInput
    data: XOR<DryingProcessUpdateWithoutReadingsInput, DryingProcessUncheckedUpdateWithoutReadingsInput>
  }

  export type DryingProcessUpdateWithoutReadingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    woodType?: WoodTypeUpdateOneRequiredWithoutDryingProcessesNestedInput
  }

  export type DryingProcessUncheckedUpdateWithoutReadingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateManyOwnerInput = {
    id?: string
    name: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FactoryCreateManyUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DesignCreateManyCreatorInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    designId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodCalculationCreateManyUserInput = {
    id?: string
    woodTypeId: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    designs?: DesignUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    designs?: DesignUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DesignUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutDesignsNestedInput
    comments?: CommentUpdateManyWithoutDesignNestedInput
  }

  export type DesignUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutDesignNestedInput
  }

  export type DesignUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    design?: DesignUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    designId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    designId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodCalculationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    woodType?: WoodTypeUpdateOneRequiredWithoutCalculationsNestedInput
  }

  export type WoodCalculationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodCalculationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    woodTypeId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DesignCreateManyProjectInput = {
    id?: string
    name: string
    content: JsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    creatorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DesignUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutDesignsNestedInput
    comments?: CommentUpdateManyWithoutDesignNestedInput
  }

  export type DesignUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutDesignNestedInput
  }

  export type DesignUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyDesignInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateWithoutDesignInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutDesignInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutDesignInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodCalculationCreateManyWoodTypeInput = {
    id?: string
    userId: string
    thickness: number
    width: number
    length: number
    pricePerPlank: number
    volumeM3: number
    planksPerM3: number
    pricePerM3: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodReceiptCreateManyWoodTypeInput = {
    id?: string
    supplier: string
    receiptDate: Date | string
    lotNumber: string
    purchaseOrder?: string | null
    status?: string
    woodFormat?: string
    notes?: string | null
    estimatedAmount?: number
    estimatedVolumeM3?: number | null
    estimatedPieces?: number | null
    actualVolumeM3?: number | null
    actualPieces?: number | null
    receiptConfirmedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationCreateManyWoodTypeInput = {
    id?: string
    serialNumber: string
    lotNumber: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    sleeperSizes: JsonNullValueInput | InputJsonValue
    plankSizes: JsonNullValueInput | InputJsonValue
    status?: string
    wastePercentage?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DryingProcessCreateManyWoodTypeInput = {
    id?: string
    batchNumber: string
    thickness: number
    thicknessUnit?: string
    pieceCount: number
    startingHumidity?: number | null
    startingElectricityUnits?: number | null
    startTime: Date | string
    endTime?: Date | string | null
    status?: string
    totalCost?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WoodCalculationUpdateWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCalculationsNestedInput
  }

  export type WoodCalculationUncheckedUpdateWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodCalculationUncheckedUpdateManyWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    pricePerPlank?: FloatFieldUpdateOperationsInput | number
    volumeM3?: FloatFieldUpdateOperationsInput | number
    planksPerM3?: FloatFieldUpdateOperationsInput | number
    pricePerM3?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodReceiptUpdateWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier?: StringFieldUpdateOperationsInput | string
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    purchaseOrder?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    woodFormat?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedAmount?: FloatFieldUpdateOperationsInput | number
    estimatedVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedPieces?: NullableIntFieldUpdateOperationsInput | number | null
    actualVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    actualPieces?: NullableIntFieldUpdateOperationsInput | number | null
    receiptConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodReceiptUncheckedUpdateWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier?: StringFieldUpdateOperationsInput | string
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    purchaseOrder?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    woodFormat?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedAmount?: FloatFieldUpdateOperationsInput | number
    estimatedVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedPieces?: NullableIntFieldUpdateOperationsInput | number | null
    actualVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    actualPieces?: NullableIntFieldUpdateOperationsInput | number | null
    receiptConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WoodReceiptUncheckedUpdateManyWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier?: StringFieldUpdateOperationsInput | string
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    purchaseOrder?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    woodFormat?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedAmount?: FloatFieldUpdateOperationsInput | number
    estimatedVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedPieces?: NullableIntFieldUpdateOperationsInput | number | null
    actualVolumeM3?: NullableFloatFieldUpdateOperationsInput | number | null
    actualPieces?: NullableIntFieldUpdateOperationsInput | number | null
    receiptConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationUpdateWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleeperSizes?: JsonNullValueInput | InputJsonValue
    plankSizes?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    wastePercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationUncheckedUpdateWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleeperSizes?: JsonNullValueInput | InputJsonValue
    plankSizes?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    wastePercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationUncheckedUpdateManyWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    lotNumber?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleeperSizes?: JsonNullValueInput | InputJsonValue
    plankSizes?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    wastePercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingProcessUpdateWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readings?: DryingReadingUpdateManyWithoutDryingProcessNestedInput
  }

  export type DryingProcessUncheckedUpdateWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readings?: DryingReadingUncheckedUpdateManyWithoutDryingProcessNestedInput
  }

  export type DryingProcessUncheckedUpdateManyWithoutWoodTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    thickness?: FloatFieldUpdateOperationsInput | number
    thicknessUnit?: StringFieldUpdateOperationsInput | string
    pieceCount?: IntFieldUpdateOperationsInput | number
    startingHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    startingElectricityUnits?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingReadingCreateManyDryingProcessInput = {
    id?: string
    readingTime?: Date | string
    electricityMeter: number
    humidity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DryingReadingUpdateWithoutDryingProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingTime?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityMeter?: FloatFieldUpdateOperationsInput | number
    humidity?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingReadingUncheckedUpdateWithoutDryingProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingTime?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityMeter?: FloatFieldUpdateOperationsInput | number
    humidity?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DryingReadingUncheckedUpdateManyWithoutDryingProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingTime?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityMeter?: FloatFieldUpdateOperationsInput | number
    humidity?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DesignCountOutputTypeDefaultArgs instead
     */
    export type DesignCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DesignCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WoodTypeCountOutputTypeDefaultArgs instead
     */
    export type WoodTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WoodTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DryingProcessCountOutputTypeDefaultArgs instead
     */
    export type DryingProcessCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DryingProcessCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FactoryDefaultArgs instead
     */
    export type FactoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FactoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DesignDefaultArgs instead
     */
    export type DesignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DesignDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobDefaultArgs instead
     */
    export type JobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SettingDefaultArgs instead
     */
    export type SettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ElectricityRechargeDefaultArgs instead
     */
    export type ElectricityRechargeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ElectricityRechargeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WoodTypeDefaultArgs instead
     */
    export type WoodTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WoodTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WoodCalculationDefaultArgs instead
     */
    export type WoodCalculationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WoodCalculationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WoodReceiptDefaultArgs instead
     */
    export type WoodReceiptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WoodReceiptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OperationDefaultArgs instead
     */
    export type OperationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OperationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DryingProcessDefaultArgs instead
     */
    export type DryingProcessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DryingProcessDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DryingReadingDefaultArgs instead
     */
    export type DryingReadingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DryingReadingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceiptDraftDefaultArgs instead
     */
    export type ReceiptDraftArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceiptDraftDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceiptHistoryDefaultArgs instead
     */
    export type ReceiptHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceiptHistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}