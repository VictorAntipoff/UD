// This file should exist at backend/prisma/schema.prisma
// Let me know if you need me to create it

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  firstName       String?
  lastName        String?
  role            String            @default("user")
  isActive        Boolean           @default(true)
  projects        Project[]         @relation("ProjectOwner")
  factories       Factory[]
  designs         Design[]          @relation("DesignCreator")
  comments        Comment[]         @relation("CommentAuthor")
  calculations    WoodCalculation[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

}

model Project {
  id            String    @id @default(uuid())
  name          String
  description   String?
  ownerId       String
  owner         User        @relation("ProjectOwner", fields: [ownerId], references: [id])
  isPublic      Boolean     @default(false)
  designs       Design[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

}

model Factory {
  id        String   @id @default(uuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Design {
  id          String    @id @default(cuid())
  name        String
  content     Json
  thumbnail   String?
  projectId   String
  creatorId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id])
  creator     User      @relation("DesignCreator", fields: [creatorId], references: [id])
  comments    Comment[]

}

model Comment {
  id        String   @id @default(cuid())
  content   String
  designId  String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  design    Design   @relation(fields: [designId], references: [id])
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])

}

enum UserRole {
  USER
  ADMIN

}

model Job {
  id        String   @id @default(cuid())
  name      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model ElectricityRecharge {
  id              String   @id @default(uuid())
  rechargeDate    DateTime
  token           String
  kwhAmount       Float
  totalPaid       Float
  baseCost        Float?
  vat             Float?
  ewuraFee        Float?
  reaFee          Float?
  debtCollected   Float?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([rechargeDate])
}

model WoodType {
  id              String            @id @default(uuid())
  name            String
  description     String?
  density         Float?
  grade           String
  origin          String?
  calculations    WoodCalculation[]
  receipts        WoodReceipt[]
  operations      Operation[]
  dryingProcesses DryingProcess[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

}

model WoodCalculation {
  id            String    @id @default(uuid())
  userId        String
  woodTypeId    String
  thickness     Float
  width         Float
  length        Float
  pricePerPlank Float
  volumeM3      Float
  planksPerM3   Float
  pricePerM3    Float
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  woodType      WoodType  @relation(fields: [woodTypeId], references: [id])

}

model WoodReceipt {
  id                  String   @id @default(uuid())
  woodTypeId          String
  supplier            String
  receiptDate         DateTime
  lotNumber           String   @unique
  purchaseOrder       String?
  status              String   @default("CREATED")
  woodFormat          String   @default("SLEEPERS") // SLEEPERS or PLANKS
  notes               String?
  estimatedAmount     Float    @default(0)
  estimatedVolumeM3   Float?
  estimatedPieces     Int?
  actualVolumeM3      Float?
  actualPieces        Int?
  receiptConfirmedAt  DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  woodType            WoodType @relation(fields: [woodTypeId], references: [id])

  @@index([status])
  @@index([woodTypeId])
  @@index([createdAt])
  @@index([lotNumber])
}

model Operation {
  id                String   @id @default(uuid())
  serialNumber      String   @unique
  woodTypeId        String
  lotNumber         String
  sleeperNumber     Int?
  startTime         DateTime?
  endTime           DateTime?
  sleeperSizes      Json
  plankSizes        Json
  status            String   @default("draft") // draft, pending_approval, supervisor_approved, admin_approved, completed, rejected
  wastePercentage   Float?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  woodType          WoodType    @relation(fields: [woodTypeId], references: [id])
  approvals         Approval[]

  @@index([status])
  @@index([woodTypeId])
  @@index([lotNumber])
  @@index([createdAt])
  @@index([sleeperNumber])
}

model DryingProcess {
  id                        String            @id @default(uuid())
  batchNumber               String            @unique
  woodTypeId                String
  thickness                 Float
  thicknessUnit             String            @default("mm") // "mm" or "inch" - unit used when entering thickness
  pieceCount                Int
  startingHumidity          Float?            // Initial humidity percentage when starting the process
  startingElectricityUnits  Float?            // Initial electricity meter reading (kWh) when starting
  startTime                 DateTime
  endTime                   DateTime?
  status                    String            @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, CANCELLED
  totalCost                 Float?
  notes                     String?
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt

  // Relations
  woodType          WoodType          @relation(fields: [woodTypeId], references: [id])
  readings          DryingReading[]

  @@index([status])
  @@index([woodTypeId])
  @@index([startTime])
  @@index([batchNumber])
}

model DryingReading {
  id                String         @id @default(uuid())
  dryingProcessId   String
  readingTime       DateTime       @default(now())
  electricityMeter  Float          // Luku meter reading
  humidity          Float          // Humidity percentage
  notes             String?
  lukuSms           String?        // Original Luku SMS text for reference
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  dryingProcess     DryingProcess  @relation(fields: [dryingProcessId], references: [id], onDelete: Cascade)

  @@index([dryingProcessId])
  @@index([readingTime])
}

model ReceiptDraft {
  id           String   @id @default(uuid())
  receiptId    String   // LOT number
  measurements Json     // Array of sleeper measurements with lastModifiedBy/At
  updatedAt    DateTime @updatedAt
  updatedBy    String   // User ID who last updated
  createdAt    DateTime @default(now())

  @@index([receiptId])
}

model ReceiptHistory {
  id        String   @id @default(uuid())
  receiptId String   // LOT number
  userId    String
  userName  String
  action    String   // CREATE, UPDATE, SUBMIT, etc.
  details   String   // Description of what changed
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())

  @@index([receiptId])
  @@index([timestamp])
}

model Approval {
  id              String    @id @default(uuid())
  operationId     String
  approverRole    String    // SUPERVISOR or ADMIN
  approverId      String?   // User ID who approved/rejected
  approverName    String?   // User name who approved/rejected
  status          String    @default("pending") // pending, approved, rejected
  notes           String?   // Approval/rejection notes
  actionTakenAt   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  operation       Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([status])
  @@index([approverRole])
}